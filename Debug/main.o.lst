   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "main.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.XMC_UART_CH_ClearStatusFlag,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	XMC_UART_CH_ClearStatusFlag:
  25              	.LFB256:
  26              	 .file 1 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc/xmc_uart.h"
   1:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
   2:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * @file xmc_uart.h
   3:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * @date 2020-12-05
   4:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
   5:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * @cond
   6:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *****************************************************************************
   7:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
   9:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * Copyright (c) 2015-2020, Infineon Technologies AG
  10:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * All rights reserved.
  11:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  12:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * Boost Software License - Version 1.0 - August 17th, 2003
  13:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  14:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * Permission is hereby granted, free of charge, to any person or organization
  15:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * obtaining a copy of the software and accompanying documentation covered by
  16:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * this license (the "Software") to use, reproduce, display, distribute,
  17:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * execute, and transmit the Software, and to prepare derivative works of the
  18:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * Software, and to permit third-parties to whom the Software is furnished to
  19:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * do so, all subject to the following:
  20:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  21:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * The copyright notices in the Software and this entire statement, including
  22:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * the above license grant, this restriction and the following disclaimer,
  23:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * must be included in all copies of the Software, in whole or in part, and
  24:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * all derivative works of the Software, unless such copies or derivative
  25:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * works are solely in the form of machine-executable object code generated by
  26:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * a source language processor.
  27:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  28:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * DEALINGS IN THE SOFTWARE.
  35:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  36:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * To improve the quality of the software, users are encouraged to share
  37:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * at XMCSupport@infineon.com.
  39:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *****************************************************************************
  40:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  41:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * Change History
  42:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * --------------
  43:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  44:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2015-02-20:
  45:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Initial
  46:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  47:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2015-05-20:
  48:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Description updated <br>
  49:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Added XMC_UART_CH_TriggerServiceRequest() and XMC_UART_CH_SelectInterruptNodePointer <br>
  50:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  51:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2015-06-20:
  52:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Removed version macros and declaration of GetDriverVersion API <br>
  53:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  54:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2015-09-01:
  55:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Modified XMC_UART_CH_SetInputSource() for avoiding complete DXCR register overwriting. <br>
  56:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Modified XMC_UART_CH_EVENT_t enum for supporting XMC_UART_CH_EnableEvent() and XMC_UART_CH_
  57:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *       for supporting multiple events configuration <br>
  58:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  59:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2016-05-20:
  60:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Added XMC_UART_CH_EnableDataTransmission() and XMC_UART_CH_DisableDataTransmission()
  61:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  62:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2017-10-25:
  63:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Added XMC_UART_CH_EnableMasterClock() and XMC_UART_CH_DisableMasterClock()
  64:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  65:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2019-05-07:
  66:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Added normal_divider_mode to XMC_UART_CH_CONFIG_t configuration structure.
  67:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *       It selects normal divider mode for baudrate generator instead of default fractional divider
  68:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *     - Added XMC_UART_CH_SetBaudrateEx()
  69:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  70:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 2020-12-05:
  71:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *    - Added XMC_UART_CH_InitEx() that allows user select if automatic baudrate configuration shoul
  72:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * 
  73:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * @endcond
  74:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
  75:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** */
  76:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
  77:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #ifndef XMC_UART_H
  78:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART_H
  79:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
  80:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
  81:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * HEADER FILES
  82:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
  83:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
  84:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #include "xmc_usic.h"
  85:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
  86:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
  87:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @addtogroup XMClib XMC Peripheral Library
  88:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @{
  89:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
  90:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
  91:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
  92:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @addtogroup UART
  93:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @brief Universal Asynchronous Receiver/Transmitter (UART) driver for XMC microcontroller family.
  94:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
  95:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The UART driver uses Universal Serial Interface Channel(USIC) module to implement UART protocol.
  96:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * It provides APIs to configure USIC channel for UART communication. The driver enables the user
  97:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * in getting the status of UART protocol events, configuring interrupt service requests, protocol
  98:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * related parameter configuration etc.
  99:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 100:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * UART driver features:
 101:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Configuration structure XMC_UART_CH_CONFIG_t and initialization function XMC_UART_CH_Init()
 102:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Enumeration of events with their bit masks @ref XMC_UART_CH_EVENT_t, @ref XMC_UART_CH_STATUS_
 103:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows the selection of input source for the DX0 input stage using the API XMC_UART_CH_SetInp
 104:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows configuration of baudrate using XMC_UART_CH_SetBaudrate() and configuration of data le
 105:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  XMC_UART_CH_SetWordLength() and XMC_UART_CH_SetFrameLength()
 106:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Provides the status of UART protocol events, XMC_UART_CH_GetStatusFlag()
 107:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * -# Allows transmission of data using XMC_UART_CH_Transmit() and gets received data using XMC_UAR
 108:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 109:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @{
 110:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 111:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 112:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 113:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * MACROS
 114:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 115:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 116:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC0)
 117:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART0_CH0 XMC_USIC0_CH0 /**< USIC0 channel 0 base address */
 118:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART0_CH1 XMC_USIC0_CH1 /**< USIC0 channel 1 base address */
 119:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 120:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 121:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC1)
 122:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART1_CH0 XMC_USIC1_CH0 /**< USIC1 channel 0 base address */
 123:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART1_CH1 XMC_USIC1_CH1 /**< USIC1 channel 1 base address */
 124:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 125:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 126:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #if defined(USIC2)
 127:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART2_CH0 XMC_USIC2_CH0 /**< USIC2 channel 0 base address */
 128:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #define XMC_UART2_CH1 XMC_USIC2_CH1 /**< USIC2 channel 1 base address */
 129:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 130:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 131:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 132:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * ENUMS
 133:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 134:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 135:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 136:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * UART driver status
 137:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 138:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS
 139:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 140:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_OK,     /**< UART driver status : OK*/
 141:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_ERROR,  /**< UART driver status : ERROR */
 142:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_BUSY    /**< UART driver status : BUSY */
 143:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_STATUS_t;
 144:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 145:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 146:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * UART portocol status. The enum values can be used for getting the status of UART channel.
 147:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** *
 148:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** */
 149:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_STATUS_FLAG
 150:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 151:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE = USIC_CH_PSR_ASCMode_TXIDLE_Msk,                 /**< 
 152:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEPTION_IDLE = USIC_CH_PSR_ASCMode_RXIDLE_Msk,                    /**< 
 153:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED = USIC_CH_PSR_ASCMode_SBD_Msk,       /**< 
 154:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_COLLISION_DETECTED = USIC_CH_PSR_ASCMode_COL_Msk,                   /**< 
 155:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_NOISE_DETECTED = USIC_CH_PSR_ASCMode_RNS_Msk,              /**< 
 156:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_0 = USIC_CH_PSR_ASCMode_FER0_Msk,          /**< 
 157:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_FORMAT_ERROR_IN_STOP_BIT_1 = USIC_CH_PSR_ASCMode_FER1_Msk,          /**< 
 158:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_FRAME_FINISHED = USIC_CH_PSR_ASCMode_RFF_Msk,               /**< 
 159:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMITTER_FRAME_FINISHED = USIC_CH_PSR_ASCMode_TFF_Msk,           /**< 
 160:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSFER_STATUS_BUSY = USIC_CH_PSR_ASCMode_BUSY_Msk,                /**< 
 161:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVER_START_INDICATION = USIC_CH_PSR_ASCMode_RSIF_Msk,           /**< 
 162:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_DATA_LOST_INDICATION = USIC_CH_PSR_ASCMode_DLIF_Msk,                /**< 
 163:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_SHIFT_INDICATION = USIC_CH_PSR_ASCMode_TSIF_Msk,           /**< 
 164:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION = USIC_CH_PSR_ASCMode_TBIF_Msk,          /**< 
 165:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_RIF_Msk,                   /**< 
 166:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION = USIC_CH_PSR_ASCMode_AIF_Msk,       /**< 
 167:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_STATUS_FLAG_BAUD_RATE_GENERATOR_INDICATION = USIC_CH_PSR_ASCMode_BRGIF_Msk      /**< 
 168:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_STATUS_FLAG_t;
 169:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 170:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 171:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** * UART configuration events. The enums can be used for configuring events using the CCR register.
 172:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** */
 173:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_CH_UART_EVENT
 174:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 175:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVE_START       = USIC_CH_CCR_RSIEN_Msk,  /**< Receive start event */
 176:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_DATA_LOST           = USIC_CH_CCR_DLIEN_Msk,  /**< Data lost event */
 177:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_SHIFT      = USIC_CH_CCR_TSIEN_Msk,  /**< Transmit shift event */
 178:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_TRANSMIT_BUFFER     = USIC_CH_CCR_TBIEN_Msk,  /**< Transmit buffer event */
 179:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_STANDARD_RECEIVE    = USIC_CH_CCR_RIEN_Msk,   /**< Receive event */
 180:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_ALTERNATIVE_RECEIVE = USIC_CH_CCR_AIEN_Msk,   /**< Alternate receive event */
 181:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_BAUD_RATE_GENERATOR = USIC_CH_CCR_BRGIEN_Msk, /**< Baudrate generator event */
 182:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 183:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_SYNCHRONIZATION_BREAK = USIC_CH_PCR_ASCMode_SBIEN_Msk, /**< Event synchronizati
 184:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_COLLISION = USIC_CH_PCR_ASCMode_CDEN_Msk,              /**< Event collision */
 185:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_RECEIVER_NOISE = USIC_CH_PCR_ASCMode_RNIEN_Msk,        /**< Event receiver nois
 186:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FORMAT_ERROR = USIC_CH_PCR_ASCMode_FEIEN_Msk,          /**< Event format error 
 187:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_EVENT_FRAME_FINISHED = USIC_CH_PCR_ASCMode_FFIEN_Msk         /**< Event frame finishe
 188:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_EVENT_t;
 189:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 190:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 191:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * UART Input sampling frequency options
 192:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 193:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT_SAMPLING_FREQ
 194:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 195:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FPERIPH            = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FPERIPH,    
 196:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_DIVIDER = XMC_USIC_CH_INPUT_SAMPLING_FREQ_FRACTIONAL_D
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INPUT_SAMPLING_FREQ_t;
 198:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 199:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 200:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * UART input stages
 201:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 202:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INPUT
 203:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 204:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD = 0UL   /**< UART input stage DX0*/
 205:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #if UC_FAMILY == XMC1
 206:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   ,
 207:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD1 = 3UL, /**< UART input stage DX3*/
 208:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INPUT_RXD2 = 5UL  /**< UART input stage DX5*/
 209:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 210:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INPUT_t;
 211:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 212:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 214:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * UART channel interrupt node pointers
 215:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 216:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef enum XMC_UART_CH_INTERRUPT_NODE_POINTER
 217:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 218:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT      = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 219:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER     = XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANS
 220:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_RECEIVE             = XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEI
 221:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE   = XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTER
 222:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_INTERRUPT_NODE_POINTER_PROTOCOL            = XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTO
 223:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_INTERRUPT_NODE_POINTER_t;
 224:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 226:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * DATA STRUCTURES
 227:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 228:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 229:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 230:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * UART initialization structure
 231:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** */
 232:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** typedef struct XMC_UART_CH_CONFIG
 233:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 234:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   uint32_t baudrate;                         /**< Desired baudrate. \b Range: minimum= 100, maximum
 235:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   bool normal_divider_mode;                  /**< Selects normal divider mode for baudrate generato
 236:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t data_bits;                         /**< Number of bits for the data field. Value configur
 237:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 16*/
 238:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t frame_length;                      /**< Indicates nmber of bits in a frame. Configured as
 239:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****                                                   \b Range: minimum= 1, maximum= 63*/
 240:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t stop_bits;                         /**< Number of stop bits. \b Range: minimum= 1, maximu
 241:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   uint8_t oversampling;						           /**< Number of samples for a symbol(DCTQ).\b Range: minimum
 242:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_PARITY_MODE_t parity_mode;     /**< Parity mode. \b Range: @ref XMC_USIC_CH_PARITY_MO
 243:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****                                                   @ref XMC_USIC_CH_PARITY_MODE_ODD*/
 244:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** } XMC_UART_CH_CONFIG_t;
 245:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 246:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**************************************************************************************************
 247:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * API PROTOTYPES
 248:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  **************************************************************************************************
 249:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 250:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #ifdef __cplusplus
 251:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** extern "C" {
 252:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** #endif
 253:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 254:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 255:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 256:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1,XMC_UART1_CH0, XMC_UART1_CH1,XMC_UART2_CH0, XM
 257:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param config Constant pointer to UART configuration structure of type @ref XMC_UART_CH_CONFIG_t
 258:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param init_brg Selects if the baudrate generator should be configured automatically.
 259:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status of initializing the USIC channel for UART protocol.\n
 260:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_STATUS_OK if initialization is successful.\n
 261:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *                    @ref XMC_UART_CH_STATUS_ERROR if configuration of baudrate failed.
 262:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 263:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 264:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Initializes the USIC channel for UART protocol.\n\n
 265:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * During the initialization, USIC channel is enabled, baudrate is configured with the defined over
 266:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * in the intialization structure. If the oversampling value is set to 0 in the structure, the defa
 267:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * is considered. Sampling point for each symbol is configured at the half of sampling period. Symb
 268:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * majority decision among 3 samples.
 269:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length is configured with the number of data bits. If the value of \a frame_length is 0, th
 270:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * is set to the same value as word length. If \a frame_length is greater than 0, it is set as the 
 271:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Parity mode is set to the value configured for \a parity_mode.
 272:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The USIC channel should be set to UART mode by calling the XMC_UART_CH_Start() API after the ini
 273:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 274:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 275:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 276:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 277:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init
 278:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 279:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 280:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 281:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1,XMC_UART1_CH0, XMC_UART1_CH1,XMC_UART2_CH0, XM
 282:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param config Constant pointer to UART configuration structure of type @ref XMC_UART_CH_CONFIG_t
 283:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status of initializing the USIC channel for UART protocol.\n
 284:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: @ref XMC_UART_CH_STATUS_OK if initialization is successful.\n
 285:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *                    @ref XMC_UART_CH_STATUS_ERROR if configuration of baudrate failed.
 286:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 287:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 288:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Initializes the USIC channel for UART protocol.\n\n
 289:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * During the initialization, USIC channel is enabled, baudrate is configured with the defined over
 290:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * in the intialization structure. If the oversampling value is set to 0 in the structure, the defa
 291:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * is considered. Sampling point for each symbol is configured at the half of sampling period. Symb
 292:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * majority decision among 3 samples.
 293:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length is configured with the number of data bits. If the value of \a frame_length is 0, th
 294:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * is set to the same value as word length. If \a frame_length is greater than 0, it is set as the 
 295:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Parity mode is set to the value configured for \a parity_mode.
 296:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The USIC channel should be set to UART mode by calling the XMC_UART_CH_Start() API after the ini
 297:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 298:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 299:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 300:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 301:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *con
 302:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 303:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_UART_CH_InitEx(channel, config, true);
 304:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 305:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 306:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 307:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 308:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 309:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 310:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 311:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 312:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the USIC channel operation mode to UART mode.\n\n
 313:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * CCR register bitfield \a Mode is set to 2(UART mode). This API should be called after configurin
 314:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * the USIC channel. Transmission and reception can happen only when the UART mode is set.
 315:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * This is an inline function.
 316:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 317:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 318:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 319:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 320:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
 321:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 322:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPER
 323:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 324:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 325:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 326:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 327:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 328:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status to indicate if the communication channel is stopped successf
 329:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_OK if the communication channel is stopped.
 330:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *                              @ref XMC_UART_CH_STATUS_BUSY if the communication channel is busy.
 331:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 332:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 333:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Stops the UART communication.\n\n
 334:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * CCR register bitfield \a Mode is reset. This disables the communication.
 335:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Before starting the communication again, the channel has to be reconfigured.
 336:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 337:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 338:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init() \n\n\n
 339:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 340:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_Stop(XMC_USIC_CH_t *const channel);
 341:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 342:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 343:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 344:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 345:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param rate Desired baudrate. \n
 346:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 347:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 348:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 349:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 350:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 351:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 352:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 353:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 354:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 355:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description:</b><br>
 356:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 357:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 358:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 359:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 360:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 361:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 362:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 363:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop(), XMC_USIC_CH_GetBaudrate()
 364:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 365:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t 
 366:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 367:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 368:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 369:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, XMC_UART0_CH1 ,XMC_UART1_CH0, XMC_UART1_CH1, XMC_UART2_CH0,
 370:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param rate Desired baudrate. \n
 371:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *           \b Range: minimum value = 100, maximum value depends on the peripheral clock frequency
 372:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   and \a oversampling. Maximum baudrate can be derived using the formula: (fperiph * 1023)/
 373:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  oversampling Required oversampling. The value indicates the number of time quanta for on
 374:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 This can be related to the number of samples for each logic state of the data signal.\n
 375:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 \b Range: 4 to 32. Value should be chosen based on the protocol used.
 376:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param normal_divider_mode Selects normal divider mode for baudrate generator instead of default
 377:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return XMC_UART_CH_STATUS_t Status indicating the baudrate configuration.\n
 378:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 			     \b Range: @ref XMC_USIC_CH_STATUS_OK if baudrate is successfully configured,
 379:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					 @ref XMC_USIC_CH_STATUS_ERROR if desired baudrate or oversampling is invalid.
 380:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 381:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description:</b><br>
 382:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the bus speed in bits per second.\n\n
 383:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Derives the values of \a STEP and PDIV to arrive at the optimum realistic speed possible.
 384:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \a oversampling is the number of samples to be taken for each symbol of UART protocol.
 385:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Default \a oversampling of 16 is considered if the input \a oversampling is less than 4. It is r
 386:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * a minimum oversampling of 4 for UART.
 387:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 388:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 389:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_Init(), XMC_UART_CH_Stop(), XMC_USIC_CH_GetBaudrate()
 390:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 391:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** XMC_UART_CH_STATUS_t XMC_UART_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_
 392:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 393:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 394:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 395:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 396:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  data Data to be transmitted. \n
 397:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: 16 bit unsigned data within the range 0 to 65535. Actual size of
 398:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          data transmitted depends on the configured number of bits for the UART protocol in the 
 399:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 400:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 401:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 402:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Transmits data over serial communication channel using UART protocol.\n\n
 403:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Based on the channel configuration, data is either put to the transmit FIFO or to TBUF register.
 404:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Before putting data to TBUF, the API waits for TBUF to finish shifting its contents to shift reg
 405:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * So user can continuously execute the API without checking for TBUF busy status. Based on the num
 406:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * data bits configured, the lower significant bits will be extracted for transmission.
 407:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 408:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: When FIFO is not configured, the API waits for the TBUF to be available.
 409:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * This makes the execution a blocking call.
 410:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 411:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 412:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_GetReceivedData() \n\n\n
 413:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 414:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data);
 415:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 416:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 417:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 418:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 419:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return uint16_t Received data over UART communication channel.
 420:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 421:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Provides one word of data received over UART communication channel.\n\n
 422:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Based on the channel configuration, data is either read from the receive FIFO or RBUF register.
 423:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Before returning the value, there is no check for data validity. User should check the appropria
 424:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * data receive flags(standard receive/alternative receive/FIFO standard receive/FIFO alternative r
 425:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * before executing the API. Reading from an empty receive FIFO can generate a receive error event.
 426:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 427:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 428:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_GetStatusFlag(), XMC_UART_CH_Transmit() \n\n\n
 429:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 430:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel);
 431:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 432:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 433:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 434:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 435:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  word_length Data word length. \n
 436:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 16.
 437:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 438:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 439:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 440:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the data word length in number of bits.\n\n
 441:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Word length can range from 1 to 16. It indicates the number of data bits in a data word.
 442:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The value of \a word_length will be decremented by 1 before setting the value to \a SCTR registe
 443:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * If the UART data bits is more than 16, then the frame length should be set to the actual number 
 444:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * word length should be configured with the number of bits expected in each transaction. For examp
 445:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * for UART communication is 20 bits, then the frame length should be set as 20. Word length can be
 446:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * transmit and receive handling. If data is stored as 8bit array, then the word length can be set 
 447:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * a full message of UART data should be transmitted/ received as 3 data words.
 448:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 449:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 450:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SetFrameLength() \n\n\n
 451:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 452:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_len
 453:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 454:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetWordLength(channel, word_length);
 455:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 456:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 457:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 458:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 459:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 460:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  frame_length Number of data bits in each UART frame. \n
 461:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: minimum= 1, maximum= 64.
 462:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 463:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 464:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 465:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the number of data bits for UART communication.\n\n
 466:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The frame length is configured by setting the input value to \a SCTR register.
 467:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The value of \a frame_length will be decremented by 1, before setting it to the register.
 468:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Frame length should not be set to 64 for UART communication.
 469:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 470:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 471:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SetWordLength() \n\n\n
 472:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 473:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_l
 474:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 475:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetFrameLength(channel, frame_length);
 476:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 477:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 478:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 479:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 480:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 481:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  event Event bitmasks to enable. Use the type @ref XMC_UART_CH_EVENT_t for naming events.
 482:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 483:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 484:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  etc.
 485:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 486:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 487:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 488:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Enables interrupt events for UART communication.\n\n
 489:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 490:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @ref XMC_UART_CH_EVENT_t enumerates multiple event bitmasks. These enumerations can be used as i
 491:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Events are configured by setting bits in the CCR register.
 492:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 493:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(), XMC_UART_CH_SetInterruptNodePointer(), XMC_UART_CH_GetStatusFlag() \
 494:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 495:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 496:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 497:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 498:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 499:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 500:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  event Bitmask of events to disable. Use the type @ref XMC_UART_CH_EVENT_t for naming eve
 501:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART_CH_EVENT_RECEIVE_START, @ref XMC_UART_CH_EVENT_DATA_LOST,
 502:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  @ref XMC_UART_CH_EVENT_TRANSMIT_SHIFT, @ref XMC_UART_CH_EVENT_TRANSMIT_BUFFER,
 503:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  etc.
 504:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 505:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 506:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 507:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Disables the interrupt events by clearing the bits in CCR register.\n\n
 508:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 509:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EVENT_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as i
 510:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 511:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 512:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_ClearStatusFlag(), XMC_UART_CH_EnableEvent() \n\n\n
 513:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 514:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** void XMC_UART_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event);
 515:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 516:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 517:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 518:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 519:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param service_request Service request number for generating protocol interrupts.\n
 520:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: 0 to 5.
 521:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 522:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 523:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 524:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the interrupt node for UART channel protocol events.\n\n
 525:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * For all the protocol events enlisted in the enumeration XMC_UART_CH_EVENT_t, one common
 526:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * interrupt gets generated. The service request connects the interrupt node to the UART
 527:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * protocol events.
 528:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 529:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 530:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 531:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 532:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 533:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
 534:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****     const uint8_t service_request)
 535:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 536:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 537:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****                                       (uint32_t)service_request);
 538:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 539:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 540:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 541:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 542:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 543:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  interrupt_node Interrupt node pointer to be configured. \n
 544:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  \b Range: @ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_SHIFT,
 545:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  			@ref XMC_UART_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER etc.
 546:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param service_request Service request number.\n
 547:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 						  \b Range: 0 to 5.
 548:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 549:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 550:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 551:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Sets the interrupt node for USIC channel events. \n\n
 552:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * For an event to generate interrupt, node pointer should be configured with service request(SR0, 
 553:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * The NVIC node gets linked to the interrupt event by doing so.<br>
 554:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Note: NVIC node should be separately enabled to generate the interrupt.
 555:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 556:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 557:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent() \n\n\n
 558:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 559:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_SelectInterruptNodePointer(XMC_USIC_CH_t *const channel,
 560:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****     const XMC_UART_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
 561:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****     const uint32_t service_request)
 562:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 563:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_SetInterruptNodePointer(channel, (XMC_USIC_CH_INTERRUPT_NODE_POINTER_t)interrupt_node
 564:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****                                       (uint32_t)service_request);
 565:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 566:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 567:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 568:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  channel Pointer to USIC channel handler of type @ref XMC_USIC_CH_t \n
 569:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				   \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@r
 570:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param  service_request_line service request number of the event to be triggered. \n
 571:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 			\b Range: 0 to 5.
 572:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 573:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 574:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 575:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Trigger a UART interrupt service request.\n\n
 576:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * When the UART service request is triggered, the NVIC interrupt associated with it will be
 577:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * generated if enabled.
 578:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 579:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 580:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_SelectInterruptNodePointer() \n\n\n
 581:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 582:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t
 583:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 584:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   XMC_USIC_CH_TriggerServiceRequest(channel, (uint32_t)service_request_line);
 585:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 586:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 587:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 588:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 589:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 590:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return Status of UART channel events. \n
 591:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 592:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 593:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 594:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 595:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 596:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Provides the status of UART channel events.\n\n
 597:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Status provided by the API represents the status of multiple events at their bit positions. The 
 598:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * obtained using the enumeration XMC_UART_CH_STATUS_FLAG_t. Event status is obtained by reading
 599:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * the register PSR_ASCMode.
 600:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 601:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 602:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_EnableEvent(),  XMC_UART_CH_ClearStatusFlag()\n\n\n
 603:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 604:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE uint32_t XMC_UART_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
 605:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
 606:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   return channel->PSR_ASCMode;
 607:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
 608:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** 
 609:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** /**
 610:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param channel Constant pointer to USIC channel handle of type @ref XMC_USIC_CH_t \n
 611:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 				  \b Range: @ref XMC_UART0_CH0, @ref XMC_UART0_CH1,@ref XMC_UART1_CH0,@ref XMC_UART1_CH1,@re
 612:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @param flag UART events to be cleared. \n
 613:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *          \b Range: Use @ref XMC_UART_CH_STATUS_FLAG_t enumerations for
 614:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					event bitmasks. @ref XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE, @ref XMC_UART_CH_STATUS_FLA
 615:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * 					@ref XMC_UART_CH_STATUS_FLAG_SYNCHRONIZATION_BREAK_DETECTED etc.
 616:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * @return None
 617:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 618:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Description</b><br>
 619:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Clears the status of UART channel events.\n\n
 620:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Multiple events can be combined using the bitwise OR operation and configured in one function ca
 621:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_STATUS_FLAG_t enumerates multiple event bitmasks. These enumerations can be used as 
 622:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * Events are cleared by setting the bitmask to the PSCR register.
 623:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  *
 624:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * \par<b>Related APIs:</b><BR>
 625:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 626:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****  */
 627:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** __STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
 628:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** {
  27              	 .loc 1 628 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
  43 0008 3960     	 str r1,[r7]
 629:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h ****   channel->PSCR = flag;
  44              	 .loc 1 629 0
  45 000a 7B68     	 ldr r3,[r7,#4]
  46 000c 3A68     	 ldr r2,[r7]
  47 000e DA64     	 str r2,[r3,#76]
 630:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc\xmc_uart.h **** }
  48              	 .loc 1 630 0
  49 0010 0C37     	 adds r7,r7,#12
  50              	.LCFI3:
  51              	 .cfi_def_cfa_offset 4
  52 0012 BD46     	 mov sp,r7
  53              	.LCFI4:
  54              	 .cfi_def_cfa_register 13
  55              	 
  56 0014 5DF8047B 	 ldr r7,[sp],#4
  57              	.LCFI5:
  58              	 .cfi_restore 7
  59              	 .cfi_def_cfa_offset 0
  60 0018 7047     	 bx lr
  61              	 .cfi_endproc
  62              	.LFE256:
  64 001a 00BF     	 .section .text.UART_GetReceivedWord,"ax",%progbits
  65              	 .align 2
  66              	 .thumb
  67              	 .thumb_func
  69              	UART_GetReceivedWord:
  70              	.LFB272:
  71              	 .file 2 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART/uart.h"
   1:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
   2:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @file uart.h
   3:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @date 2021-01-08
   4:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
   5:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * NOTE:
   6:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
   8:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @cond
   9:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  10:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * UART v4.1.14 - Configures a USIC channel to perform transmit & receive operations using UART pro
  11:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  12:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  13:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * All rights reserved.
  14:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  15:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * following conditions are met:
  17:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  18:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   disclaimer.
  20:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  21:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   disclaimer in the documentation and/or other materials provided with the distribution.
  23:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  24:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   products derived from this software without specific prior written permission.
  26:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  27:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  35:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  38:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  39:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Change History
  40:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * --------------
  41:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  42:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * 2015-02-16:
  43:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Initial version for DAVEv4
  44:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  45:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * 2015-06-20:
  46:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Changed the abort API name from UART_Abort_Receive to UART_AbortReceive and added return t
  47:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  48:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * 2015-07-01:
  49:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Changed structure name from UART_DYNAMIC_t to UART_RUNTIME_t
  50:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  51:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * 2015-07-09:
  52:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Renamed UART_GetProtocolStatus as UART_GetFlagStatus and UART_ClearProtocolStatus as UART_
  53:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Removed APIs UART_GetTXFIFOStatus, UART_GetRXFIFOStatus, UART_ClearTXFIFOStatus,
  54:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_ClearRXFIFOStatus
  55:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  56:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * 2015-07-14:
  57:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Added support for DMA and Direct mode
  58:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  59:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * 2021-01-08:
  60:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     - Modified check for minimum XMCLib version
  61:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  62:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcond
  63:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
  64:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
  65:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  66:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  67:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * HEADER FILES
  68:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  69:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifndef UART_H
  70:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #define UART_H
  71:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  72:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #include "xmc_scu.h"
  73:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #include "xmc_gpio.h"
  74:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #include "xmc_uart.h"
  75:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  76:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #include "DAVE_Common.h"
  77:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #include "uart_conf.h"
  78:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #if ((defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED))
  79:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #include "GLOBAL_DMA/global_dma.h"
  80:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
  81:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  82:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**************************************************************************************************
  83:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * MACROS
  84:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
  85:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #define UART_XMC_LIB_MAJOR_VERSION 2
  86:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #define UART_XMC_LIB_MINOR_VERSION 1
  87:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #define UART_XMC_LIB_PATCH_VERSION 10
  88:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  89:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #if !((XMC_LIB_MAJOR_VERSION > UART_XMC_LIB_MAJOR_VERSION) ||\
  90:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****       ((XMC_LIB_MAJOR_VERSION == UART_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > UART_XMC_L
  91:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****       ((XMC_LIB_MAJOR_VERSION == UART_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == UART_XMC_
  92:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #error "UART requires XMC Peripheral Library v2.1.10 or higher"
  93:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
  94:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  95:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /*
  96:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Represents the maximum data size for DMA transaction*/
  97:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #define UART_DMA_MAXCOUNT (4095U)
  98:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
  99:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 100:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * ENUMS
 101:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 102:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 103:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @ingroup UART_enumerations
 104:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @{
 105:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 106:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 107:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 108:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Enum to describe the possible status values, returned
 109:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  by UART APIs.
 110:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 111:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef enum UART_STATUS
 112:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 113:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_STATUS_SUCCESS,        /**< Indicates App initialization state successful */
 114:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 115:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_STATUS_FAILURE,        /**< Unknown error */
 116:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 117:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_STATUS_BUSY,           /**< UART Busy */
 118:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 119:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_STATUS_BUFFER_INVALID, /**< Buffer provided or the buffer size is invalid*/
 120:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 121:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_STATUS_MODE_MISMATCH   /**< API invoked by a handle configured with different mode.
 122:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                    e.g, If UART_StartTransmitDMA is invoked for an instance
 123:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                    which has transmit mode configured as "Interrupt", will
 124:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                    return this status.*/
 125:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 126:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_STATUS_t;
 127:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 128:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 129:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Enum used to describe the UART Mode of operation
 130:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 131:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef enum UART_MODE
 132:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 133:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_MODE_FULLDUPLEX, /**< Full Duplex mode selected */
 134:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_MODE_HALFDUPLEX, /**< Half Duplex mode selected */
 135:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_MODE_LOOPBACK    /**< LoopBack mode selected */
 136:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_MODE_t;
 137:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 138:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 139:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify UART protocol event callback function
 140:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 141:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef enum UART_EVENT
 142:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 143:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_EVENT_SYNC_BRK,    /**< Synchronization break detected event */
 144:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_EVENT_RX_NOISE,    /**< Receiver noise detected event */
 145:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR0, /**< Frame format error at stop bit 0 event */
 146:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_EVENT_FORMAT_ERR1, /**< Frame format error at stop bit 1 event */
 147:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_EVENT_COLLISION,   /**< Data collision detected in half duplex mode event */
 148:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_EVENT_MAX          /**< Indicates number of UART events supported*/
 149:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_EVENT_t;
 150:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 151:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 152:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Enum used to identify the transfer type used for either transmit or receive function.
 153:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 154:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef enum UART_TRANSFER_MODE
 155:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 156:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_INTERRUPT,  /**< Implement data transmit or receive using interrupts */
 157:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DMA,        /**< Implement data transmit or receive using DMA */
 158:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_DIRECT      /**< This configuration exposes signals for external APP connectio
 159:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }UART_TRANSFER_MODE_t;
 160:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 161:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 162:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @}
 163:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 164:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 165:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 166:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * DATA STRUCTURES
 167:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 168:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 169:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for callback function
 170:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 171:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef void (*UART_cbhandler)(void);
 172:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 173:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Function pointer used for initialization function
 174:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 175:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef UART_STATUS_t (*UART_init_handler)(void);
 176:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 177:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @ingroup UART_datastructures
 178:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @{
 179:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 180:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 181:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 182:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Wrapper typedefinition for XMC_UART_PROTOCOL_STATUS_t.
 183:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 184:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef XMC_UART_CH_STATUS_FLAG_t UART_PROTOCOL_STATUS_t;
 185:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 186:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 187:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Structure for transmit pin configuration.
 188:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 189:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef struct UART_TX_CONFIG
 190:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 191:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_GPIO_PORT_t *const port;            /**< Pointer to the GPIO port base address */
 192:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const uint8_t pin;                      /**< Pin number in the port*/
 193:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const XMC_GPIO_CONFIG_t *const config;  /**< Pin configuration structure */
 194:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_TX_CONFIG_t;
 195:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 196:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_DMA_USED) || defined(UART_RX_DMA_USED))
 197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 198:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Structure for DMA configuration.
 199:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 200:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef struct UART_DMA_CONFIG
 201:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 202:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const XMC_DMA_CH_CONFIG_t * dma_ch_config;   /**< Pointer to the DMA channel configuration.*/
 203:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint8_t dma_channel;                         /**< DMA channel number */
 204:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }UART_DMA_CONFIG_t;
 205:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 206:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 207:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 208:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Structure for holding the configuration parameters of UART channel.
 209:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 210:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef struct UART_CONFIG
 211:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 212:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const XMC_UART_CH_CONFIG_t * const channel_config;   /**< Basic UART configuration from the GUI w
 213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             frame length, stop bits and parity */
 214:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #if (defined UART_TX_DMA_USED) || (defined UART_RX_DMA_USED)
 215:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   GLOBAL_DMA_t * global_dma;                           /**< Global DMA handle */
 216:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 217:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 218:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const transmit_dma_config; /**< Pointer to the DMA channel configuratio
 219:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 220:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 221:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const UART_DMA_CONFIG_t * const receive_dma_config;  /**< Pointer to the DMA channel configuratio
 222:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 223:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_init_handler fptr_uart_config;                  /**< Function pointer to configure the MUX v
 224:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler tx_cbhandler;                         /**< Function pointer to hold the callback f
 226:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when the transmission is complet
 227:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 228:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 229:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_cbhandler;                         /**< Function pointer to hold the callback f
 230:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when the reception is complete *
 231:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 232:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler sync_error_cbhandler;                 /**< Function pointer to hold the callback f
 233:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when synchronization break detec
 234:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler rx_noise_error_cbhandler;             /**< Function pointer to hold the callback f
 235:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when receiver noise is detected*
 236:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit0_cbhandler;          /**< Function pointer to hold the callback f
 237:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 238:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler format_error_bit1_cbhandler;          /**< Function pointer to hold the callback f
 239:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when format error with stop bit 
 240:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_cbhandler collision_error_cbhandler;            /**< Function pointer to hold the callback f
 241:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             called when collision error is detected
 242:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const UART_TX_CONFIG_t * tx_pin_config;              /**< Transmit pin configuration to be used d
 243:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             and while changing baudrate. */
 244:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_MODE_t mode;                                    /**< UART operation mode */
 245:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t transmit_mode;                  /**< Mode used for transmitting data. Data c
 246:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 247:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_TRANSFER_MODE_t receive_mode;                   /**< Mode used for receiving data. Data can 
 248:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                             interrupt, DMA or direct(using polling 
 249:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t tx_fifo_size;                /**< Transmit FIFO size configuration */
 250:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_FIFO_SIZE_t rx_fifo_size;                /**< Receive FIFO size configuration */
 251:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint8_t tx_sr;                                       /**< Service request number assigned to tran
 252:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_CONFIG_t;
 253:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 254:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 255:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Structure to hold the dynamic variables for the UART communication.
 256:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 257:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef struct UART_RUNTIME
 258:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 259:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint8_t * tx_data;            /**< Pointer to the transmit data buffer*/
 260:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint8_t * rx_data;            /**< Pointer to the receive data buffer*/
 261:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint32_t tx_data_count;       /**< Number of bytes of data to be transmitted*/
 262:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint32_t tx_data_index;       /**< Index to the byte to be transmitted next in the tx_data buffer
 263:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint32_t rx_data_count;       /**< Number of bytes of data to be received*/
 264:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   uint32_t rx_data_index;       /**< Indicates the number of bytes currently available in the rx_da
 265:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   volatile bool tx_busy;        /**< Status flag to indicate busy when a transmission is assigned*/
 266:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   volatile bool rx_busy;        /**< Status flag to indicate busy when a reception is assigned*/
 267:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_RUNTIME_t;
 268:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 269:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 270:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Handler structure with pointers to dynamic and static parameters.
 271:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 272:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** typedef struct UART
 273:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 274:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_t * const channel;              /**< USIC channel*/
 275:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   const UART_CONFIG_t * const config;         /**< UART configuration structure pointer*/
 276:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   UART_RUNTIME_t * const runtime;             /**< Pointer to the structure holding all variables,
 277:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****                                                    that can change at runtime*/
 278:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** } UART_t;
 279:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 280:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 281:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @}
 282:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 283:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 284:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**************************************************************************************************
 285:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * API Prototypes
 286:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  **************************************************************************************************
 287:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 288:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef __cplusplus
 289:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** extern "C" {
 290:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 291:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 292:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @ingroup UART_apidoc
 293:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @{
 294:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 295:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 296:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Get the UART APP version.
 297:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 298:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 299:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 300:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 301:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Description:
 302:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Transmits the text "UART APP supported.", if the UART APP version is v4.1.x, where x can be a
 303:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"
 304:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 305:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 306:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 307:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 308:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     DAVE_APP_VERSION_t uart_version;
 309:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t valid_str[] = "UART APP supported.";
 310:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 311:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 312:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 313:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 314:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       uart_version = UART_GetAppVersion();
 315:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if((uart_version.major == 4) &&
 316:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *          (uart_version.minor == 1))
 317:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 318:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, valid_str, sizeof(valid_str));
 319:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 320:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 321:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 322:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 323:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 324:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 325:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 326:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 327:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 328:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 329:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 330:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  @endcode
 331:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 332:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** DAVE_APP_VERSION_t UART_GetAppVersion(void);
 333:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 334:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 335:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Initializes the UART module as per the configuration made
 336:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * in UI.
 337:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param handle Pointer to static and dynamic content of APP configuration.
 338:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Status of UART driver initialization.\n
 339:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_SUCCESS - on successful initialization.\n
 340:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_FAILURE - if initialization fails.\n
 341:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                    @ref UART_STATUS_BUSY - if UART channel is busy.\n
 342:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 343:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 344:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Initializes IO pins used for the UART communication, configures
 345:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * USIC registers based on the settings provided in the GUI. Calculates divider
 346:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * values PDIV and STEP for a precise baudrate. It also enables configured interrupt
 347:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * flags and service request values.
 348:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <BR>
 349:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 350:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 351:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 352:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 353:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 354:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 355:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 356:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 357:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 358:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 359:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 360:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 361:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         while(1U)
 362:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 363:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 364:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 365:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 366:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 367:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 368:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 369:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 370:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 371:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 372:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 373:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 374:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  @endcode
 375:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 376:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Init(const UART_t *const handle);
 377:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 378:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 379:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 380:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 381:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 382:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 383:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 384:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 385:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 386:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 387:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 388:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 389:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 390:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 391:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 392:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 393:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 394:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. After the requested number of data bytes are received,
 395:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 396:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Data reception is accomplished using the receive mode selected in the UI.
 397:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 398:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer(RBUF) or receive FIFO(OUT) is used
 399:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 400:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 401:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 402:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * CPU load. Before starting data reception, the receive buffers are flushed. So only those data, r
 403:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 404:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 405:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed.
 406:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 407:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 408:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 409:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <br>
 410:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 411:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * DMA mode is available only in XMC4x family of microcontrollers. In this mode, a DMA channel is
 412:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * configured for receiving data from standard receive buffer(RBUF) to the user buffer. By calling
 413:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * this API, the DMA channel destination address is configured to the user buffer and the channel i
 414:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * enabled. FIFO will not be used when the receive mode is DMA.
 415:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Before starting data reception, the receive buffers are flushed. So only those data, received
 416:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 417:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 418:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed.
 419:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 420:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 421:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 422:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <br>
 423:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <b>Direct</b><br>
 424:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * In Direct receive mode, neither interrupt nor DMA is used. The API polls
 425:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the receive flag to read the received data and waits for all the requested number of bytes to
 426:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * be received. Based on FIFO configuration, either RBUF or OUT register is used for reading receiv
 427:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * data. Before starting data reception, the receive buffers are flushed. So only those data, recei
 428:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * after calling the API, will be placed in the user buffer.
 429:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is re
 430:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_GetReceivedWord, @ref UART_GetPr
 431:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 432:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 433:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 434:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 435:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 436:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 437:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Receive mode should be configured as "Direct".
 438:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 439:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits 10 bytes of data after receiving 10 bytes of data.
 440:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 441:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 442:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 443:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 444:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 445:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 446:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 447:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 448:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 449:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1)
 450:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 451:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 452:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         if(UART_Receive(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 453:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 454:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Retransmit the received 10 bytes
 455:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, ReadData, 10);
 456:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 457:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 458:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 459:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 460:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 461:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 462:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 463:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 464:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 465:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 466:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 467:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 468:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  @endcode
 469:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 470:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 471:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Receive(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 472:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 473:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 474:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 475:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 476:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 477:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 478:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 479:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 480:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 481:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 482:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 483:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 484:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 485:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 486:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 487:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * request is registered.
 488:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 489:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 490:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Transmits data using the UART channel. Transmission is accomplished using the transmit mode
 491:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * as configured in the UI.<br>
 492:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <b>Interrupt:</b><br>
 493:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 494:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 495:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 496:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved out of FIFO.
 497:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The APP handle's runtime structure is used to store the data pointer, count, data index
 498:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 499:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 500:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 501:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the data to the transmit buffer. If transmit FIFO is configured, the data is filled into the FIF
 502:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated subsequently when the transmit FIFO is empty. At this
 503:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 504:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 505:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 506:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 507:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 508:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 509:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the completion of data transmission.<br>
 510:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <b>DMA:</b><br>
 511:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * A DMA channel is configured to provide data to the UART transmit buffer. This removes the load
 512:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * off the CPU. This API will only configure and enable the DMA channel by specifying the data buff
 513:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * and count of bytes to transmit. Rest is taken care without the CPU's intervention. User can conf
 514:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the transmission is complete, the callback function will
 515:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * FIFO will not be used in DMA mode. Transmit buffer interrupt is configured for triggering the
 516:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * DMA channel. So each byte is transmitted in the background through the DMA channel.
 517:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If the callback function is not configured, \a handle->runtime->tx_busy flag can be checked to
 518:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * verify if the transmission is complete.
 519:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <b>Direct:</b><br>
 520:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Data will be transmitted using polling method. Status flags are used to check if data can be tra
 521:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <i><b> Note:</b> In Direct mode, the API blocks the CPU until the count of bytes requested is tr
 522:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If this behaviour is not desired, use other APIs like @ref UART_TransmitWord, @ref UART_GetProto
 523:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 524:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 525:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 526:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 527:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 528:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 529:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Direct".
 530:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 531:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon".
 532:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 533:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 534:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 535:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 536:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 537:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 538:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 539:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 540:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 541:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Transmit the string.
 542:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data)-1);
 543:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1)
 544:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 545:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 546:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 547:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 548:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 549:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 550:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 551:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 552:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 553:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 554:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 555:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 556:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
 557:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 558:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 559:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 560:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 561:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #if (defined(UART_TX_INTERRUPT_USED) || defined(UART_TX_DMA_USED) || defined(DOXYGEN))
 562:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 563:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Aborts the ongoing data transmission.
 564:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param handle  UART APP handle pointer of type @ref UART_t
 565:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of transmit abort request.\n
 566:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel transmission is stopped
 567:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       successfully.\n
 568:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if transmit mode is Direct.\n
 569:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 570:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 571:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 572:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the existing data will be flushed. After the transmission is stopped, user can start
 573:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * a new transmission without delay. Abort request for transmit mode direct cannot be serviced sinc
 574:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the direct mode transmit API is a blocking call.
 575:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 576:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 577:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 578:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 579:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 580:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 581:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 582:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 583:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Initiates the transmission of one string, aborts the transmission immediately and
 584:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //starts transmission of another string. The receiver might see traces of first string followe
 585:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //by the complete second string.
 586:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 587:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 588:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 589:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 590:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //String1
 591:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 592:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //String2
 593:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t NewData[] = "New data message";
 594:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 595:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 596:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 597:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 598:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Initiate transmission of first string.
 599:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 600:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *		 //When the first string is being transmitted,
 601:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->tx_busy)
 602:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 603:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Stop the transmission of first string.
 604:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         if(UART_AbortTransmit(&UART_0) == UART_STATUS_SUCCESS)
 605:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 606:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Start the transmission of second string
 607:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, NewData, sizeof(NewData));
 608:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait till the transmission is finished.
 609:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->tx_busy);
 610:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 611:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 612:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1)
 613:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 614:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 615:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 616:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 617:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 618:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 619:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 620:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 621:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 622:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 623:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 624:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 625:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
 626:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 627:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 628:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortTransmit(const UART_t *const handle);
 629:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 630:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 631:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #if (defined(UART_RX_INTERRUPT_USED) || defined(UART_RX_DMA_USED) || defined(DOXYGEN))
 632:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 633:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Stops the active data reception sequence.
 634:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
 635:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t: Result of reception abort request.\n
 636:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_SUCCESS if the UART channel reception has
 637:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       been stopped.\n
 638:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       @ref UART_STATUS_MODE_MISMATCH if receive mode is Direct.\n
 639:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 640:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 641:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a reception is in progress, it will be stopped. When a reception request
 642:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * is active, user will not be able to place a new receive request till the active
 643:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * reception is complete. This API can stop the progressing reception to make
 644:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * a new receive request. Abort request for receive mode direct cannot be serviced since
 645:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the direct mode receive API is a blocking call.
 646:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 647:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 648:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 649:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 650:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 651:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 652:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 653:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 654:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon DAVE application." and starts to receive data.
 655:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //After receiving first byte, checks the value of first byte. If the first byte is 0x55,
 656:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //aborts the ongoing reception and transmits the received byte.
 657:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 658:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 659:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 660:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 661:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon DAVE application.";
 662:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[64];
 663:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 664:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 665:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 666:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 667:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Transmit the initial string.
 668:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Send_Data, sizeof(Send_Data));
 669:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Wait till the string is transmitted.
 670:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
 671:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 672:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Start reception of data
 673:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_Receive(&UART_0, Rec_Data, 15);
 674:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Wait till atleast one byte is received.
 675:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->rx_data_index == 0);
 676:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //If the first byte is 0x55,
 677:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if(UART_0.runtime->rx_data[0] == 0x55)
 678:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 679:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Stop the reception
 680:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         if(UART_AbortReceive(&UART_0) == UART_STATUS_SUCCESS)
 681:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 682:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Transmit the received one byte.
 683:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, Rec_Data, 1);
 684:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 685:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 686:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 687:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 688:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 689:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 690:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 691:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 692:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 693:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 694:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 695:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 696:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
 697:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 698:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 699:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_AbortReceive(const UART_t *const handle);
 700:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 701:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 702:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_RX_INTERRUPT_USED
 703:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 704:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel.
 705:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 706:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 707:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 708:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 709:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 710:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= maximum value supported by type uint32_t.
 711:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 712:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 713:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 714:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 715:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 716:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 717:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 718:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 719:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 720:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 721:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Based on the UI configuration, either standard receive buffer or receive FIFO is used
 722:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * for data reception. An interrupt is configured for reading received data from the bus. This func
 723:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * only registers a request to receive a number of data bytes from a USIC channel. If FIFO is
 724:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * configured for reception, the FIFO limit is dynamically configured to optimally utilize the
 725:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * CPU load.  When all the requested number of data bytes are received, the configured callback
 726:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed.
 727:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 728:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 729:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 730:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 731:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 732:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 733:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 734:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 735:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 736:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured as "Interrupt".
 737:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 738:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the same.
 739:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 740:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 741:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 742:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 743:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 744:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 745:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 746:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 747:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 748:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1)
 749:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 750:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Start reception of 10 bytes. The status will be returned success, if the channel is not 
 751:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if(UART_StartReceiveIRQ(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 752:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 753:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Wait till the data is received.
 754:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy)
 755:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 756:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 757:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Transmit the received data.
 758:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, ReadData, 10);
 759:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 760:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 761:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 762:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 763:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 764:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 765:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 766:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 767:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 768:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 769:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 770:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 771:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 772:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 773:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 774:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  @endcode
 775:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 776:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 777:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 778:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 779:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 780:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_TX_INTERRUPT_USED
 781:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 782:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel.
 783:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 784:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 785:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 786:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  count Total no of words to be transmitted.\n
 787:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= maximum supported by uint32_t.
 788:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 789:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 790:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 791:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 792:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0.\n
 793:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 794:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 795:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * request is registered.
 796:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 797:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 798:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using transmit interrupt. User can configure
 799:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 800:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed. If transmit FIFO is enabled, the trigger limit is set to 1.
 801:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * So the transmit interrupt will be generated when all the data in FIFO is moved from FIFO.
 802:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the data pointer, count, data index
 803:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * and status of transmission. This function only registers a data transmission request if
 804:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens in the transmit
 805:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * interrupt service routine. A trigger is generated for the transmit interrupt to start loading
 806:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the data. If transmit FIFO is configured, the data is filled into the FIFO.
 807:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Transmit interrupt will be generated next time when the transmit FIFO is empty. At this
 808:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * point of time, if there is some more data to be transmitted, it is loaded to the FIFO again.
 809:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * When FIFO is not enabled, data is transmitted one byte at a time. On transmission of each byte
 810:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * an interrupt is generated and the next byte is transmitted in the interrupt service routine.
 811:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 812:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 813:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 814:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 815:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 816:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 817:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 818:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 819:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 820:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 821:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "Interrupt".
 822:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 823:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon"
 824:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 825:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 826:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 827:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 828:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 829:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 830:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 831:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 832:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 833:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitIRQ(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 834:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 835:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Wait till the data transmission is ongoing.
 836:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 837:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 838:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 839:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 840:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 841:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 842:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 843:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 844:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 845:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 846:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 847:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 848:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 849:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 850:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
 851:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 852:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 853:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitIRQ(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 854:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 855:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 856:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_TX_DMA_USED
 857:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 858:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Registers a request for transmitting data over UART channel using DMA.
 859:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 860:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle  UART APP handle pointer of type @ref UART_t
 861:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  data_ptr Pointer to data of type uint8_t.
 862:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  count Total number of words to be transmitted.\n
 863:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \b Range: minimum= 1, maximum= 4096.
 864:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 865:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status of transmit request.\n
 866:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 867:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a transmission is in progress.\n
 868:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 869:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        DMA transmit mode. \n
 870:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 871:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 872:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <i>Imp Note:</i> Return value should be validated by user to ensure that the
 873:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * request is registered.
 874:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 875:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 876:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The data transmission is accomplished using DMA. User can configure
 877:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * a callback function in the APP UI. When the data is fully transmitted, the callback
 878:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed.
 879:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The function uses APP handle's runtime structure to store the status of transmission.
 880:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * This function only registers a data transmission request, if
 881:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * there is no active transmission in progress. Actual data transmission happens through DMA channe
 882:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be transmitted in one API call. This limit is because of the DMA sin
 883:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Callback function is executed when all the data bytes are transmitted.
 884:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, user has to poll for the value of \a tx_busy flag of
 885:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the APP handle structure( \a handle->runtime->tx_busy ) to check for
 886:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the completion of data transmission.
 887:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If data more than the block size of 4096 have to be transmitted, user will have to transmit them
 888:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 889:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 890:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 891:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 892:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 893:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
 894:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode should be configured as "DMA".
 895:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 896:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using DMA.
 897:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 898:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 899:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 900:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 901:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
 902:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 903:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 904:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 905:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 906:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if(UART_StartTransmitDMA(&UART_0, Send_Data, sizeof(Send_Data)) == UART_STATUS_SUCCESS)
 907:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 908:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Wait till the data is transmitted.
 909:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->tx_busy)
 910:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 911:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 912:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 913:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 914:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 915:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 916:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 917:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 918:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 919:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 920:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 921:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 922:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 923:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
 924:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 925:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
 926:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartTransmitDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
 927:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
 928:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
 929:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #ifdef UART_RX_DMA_USED
 930:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
 931:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Registers a request for receiving data over UART channel using DMA.
 932:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 933:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 934:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle  Pointer to UART_t handle structure
 935:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param data_ptr  Pointer to data of type uint8_t.
 936:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  count  Total no of bytes to be received.\n
 937:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                \b Range: minimum= 1, maximum= 4096.
 938:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 939:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return  UART_STATUS_t: Status for receive request.\n
 940:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_SUCCESS if the request is accepted.\n
 941:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUSY if a reception is in progress.\n
 942:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_MODE_MISMATCH if the handle is not configured for
 943:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        DMA receive mode. \n
 944:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                        @ref UART_STATUS_BUFFER_INVALID if the data_ptr is NULL or count is 0. \n
 945:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 946:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 947:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
 948:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Data will be received asynchronously. When the requested number of data bytes are received,
 949:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * optionally, the user configured callback function will be executed.
 950:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * This function only registers a request to receive a number of data bytes from a USIC channel.
 951:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * When all the requested number of data bytes are received, the configured callback
 952:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * function will be executed.
 953:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If a callback function is not configured, the user has to poll for the value of the
 954:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * variable, \a handle->runtime->rx_busy to be false. The value is updated to \a false when all the
 955:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * requested number of data bytes are received.
 956:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * A maximum of 4096 bytes can be received in one API call. This limit is because of the DMA single
 957:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 958:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
 959:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
 960:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
 961:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 962:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre condition:
 963:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit mode and receive mode should be configured to "DMA"
 964:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
 965:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Receives 10 bytes of data and transmits the received data.
 966:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 967:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
 968:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
 969:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
 970:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
 971:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
 972:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
 973:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
 974:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 975:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1)
 976:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
 977:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Receive 10 bytes of data
 978:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         if(UART_StartReceiveDMA(&UART_0, ReadData, 10) == UART_STATUS_SUCCESS)
 979:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
 980:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait till 10 bytes are received
 981:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while(UART_0.runtime->rx_busy)
 982:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           {
 983:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           }
 984:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Transmit the received data.
 985:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_StartTransmitDMA(&UART_0, ReadData, 10);
 986:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
 987:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
 988:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 989:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
 990:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
 991:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
 992:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
 993:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
 994:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
 995:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
 996:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
 997:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
 998:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  @endcode
 999:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1000:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1001:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_StartReceiveDMA(const UART_t *const handle, uint8_t* data_ptr, uint32_t count);
1002:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** #endif
1003:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1004:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1005:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Changes the baudrate of UART channel.
1006:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1007:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param UART_t * Pointer to the UART APP handle.
1008:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param baud Value of new baudrate.
1009:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param oversampling Number of samples to be considered for each symbol. 16 is the standard value
1010:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1011:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return UART_STATUS_t UART_STATUS_SUCCESS if baudrate changed successfully.
1012:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       UART_STATUS_FAILURE if baudrate could not be changed.
1013:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1014:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1015:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The function stops the channel, calculates the clock divider values to achieve the desired baudr
1016:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Sets the divider values and reconfigures the channel as per the configuration in the UI. The cha
1017:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * enabled at the end of configuration.
1018:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <BR>
1019:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1020:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1021:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <i>Please disable the receive FIFO in the 'Advanced Settings' tab</i>
1022:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1023:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1024:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * #include "DAVE.h"      //Declarations from DAVE Code Generation (includes SFR declaration)
1025:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1026:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //Precondition:
1027:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //Disable receive FIFO in the Advanced settings tab.
1028:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //Description:
1029:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //Waits for user input of new baudrate value. Input is recognized after line feed is provided.
1030:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //Value is set as the new baudrate and the application waits for any key to be pressed.
1031:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //This helps in reconfiguring the terminal application to the newly set baudrate. On receiving
1032:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //new character, message indicating the successful baudrate change will be displayed using updat
1033:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //value of baudrate.
1034:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1035:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * const uint8_t send_askbaud[] = "Please enter desired baudrate:";
1036:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * const uint8_t send_data[] = "\nPress 'y' to change baudrate to desired value:";
1037:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * const uint8_t send_invalid[] = "\nInvalid value!!";
1038:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * const uint8_t send_success[] = "\nWe made it...Baudrate changed successfully :-).\n\n";
1039:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[11];
1040:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
1041:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1042:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1043:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint32_t baud;
1044:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1045:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();    // Initialization of DAVE Apps
1046:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1047:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1048:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1049:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
1050:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1051:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1052:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1053:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1054:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1055:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   while(1U)
1056:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1057:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_Transmit(&UART_0, send_askbaud, sizeof(send_askbaud)-1);
1058:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_Receive(&UART_0, rec_data, 10);
1059:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1060:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->rx_busy)
1061:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1062:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //If user enters newline character, accept the value
1063:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if((UART_0.runtime->rx_data_index > 0) && (UART_0.runtime->rx_data[UART_0.runtime->rx_data
1064:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
1065:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //End reception of data on finding newline character
1066:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         UART_AbortReceive(&UART_0);
1067:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
1068:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1069:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //Add end of string character to the last location
1070:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     rec_data[UART_0.runtime->rx_data_index] = 0;
1071:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //Convert the entered string to number.
1072:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     baud = atoi(rec_data);
1073:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //If the conversion is successful, set the baudrate.
1074:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(baud > 0)
1075:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1076:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Set the baudrate to USIC channel
1077:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       if(UART_SetBaudrate(&UART_0, baud, 16) == UART_STATUS_SUCCESS)
1078:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
1079:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //After changing the baudrate successfully,
1080:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Wait for user to enter a character.
1081:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //This wait gives time for the user to change
1082:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //the baudrate of the terminal tool used.
1083:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         UART_Receive(&UART_0, rec_data, 1);
1084:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         while(UART_0.runtime->rx_busy);
1085:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_success, sizeof(send_success)-1);
1086:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
1087:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       else
1088:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
1089:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1090:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
1091:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1092:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1093:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1094:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, send_invalid, sizeof(send_invalid)-1);
1095:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1096:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(UART_0.runtime->tx_busy);
1097:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1098:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1099:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1100:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * */
1101:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** UART_STATUS_t UART_SetBaudrate(const UART_t * handle, uint32_t baud, uint32_t oversampling);
1102:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1103:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1104:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Gets the transmit FIFO event flags.
1105:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1106:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1107:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1108:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of the STBI and TBERI bits in TRBSR register in
1109:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                      their bit positions.\n
1110:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                      \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t for the bitmask of event
1111:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1112:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1113:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Function reads the value of TRBSR register. It masks the standard transmit buffer
1114:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * interrupt flag and transmit buffer error flag before providing the value.
1115:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * User has to mask the bits of interest before checking the status.
1116:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1117:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1118:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1119:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1120:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1121:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Pre-condition:
1122:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Configure transmit mode as "Direct" with transmit FIFO enabled.
1123:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Description:
1124:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Transmits the string "Infineon".
1125:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1126:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1127:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1128:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1129:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1130:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1131:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1132:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1133:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1134:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Clear the Tx FIFO standard transmit buffer event.
1135:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1136:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Iterate for the length of the string "Infineon"
1137:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data)-1)
1138:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1139:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Put the character in the transmit FIFO.
1140:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData((XMC_USIC_CH_t *)UART_0.channel,(uint16_t)Send_Data[index])
1141:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1142:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1143:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standard buffer interrupt to fill it again with remaining dat
1144:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1145:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1146:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1147:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1148:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1149:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1150:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1151:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1152:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1153:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1154:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1155:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1156:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1157:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1158:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1159:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1160:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetTXFIFOStatus(const UART_t* const handle)
1161:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1162:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1163:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_GetEvent(handle->channel);
1164:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1165:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1166:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1167:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Provides the received data from receive buffer.
1168:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1169:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1170:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return uint8_t: Data read from RBUF.\n
1171:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1172:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1173:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * This can be used in receive mode "Direct" to read the received data.
1174:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If Rx FIFO is not configured, function reads the value of RBUF register.
1175:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Otherwise it reads the data from OUTR register.
1176:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure an interrupt by connecting the
1177:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP to receive event signals. This API can be used inside the ISR to read the
1178:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1179:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1180:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1181:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1182:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1183:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Pre-condition:
1184:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct" with transmit FIFO and receive FIFO ena
1185:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
1186:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon", receives 10 bytes and retransmits the received 10 bytes.
1187:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1188:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1189:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1190:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1191:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1192:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1193:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1194:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1195:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1196:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1197:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1198:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Transmit the string "Infineon"
1199:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1200:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1201:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1202:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1203:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1204:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1205:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1206:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1207:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1208:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1209:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Configure receive FIFO trigger limit to 9.
1210:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1211:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Receive 10 bytes input
1212:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        index = 0;
1213:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Wait till 10 bytes are received
1214:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        while(!(UART_GetRXFIFOStatus(&UART_0) &
1215:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             (XMC_USIC_CH_RXFIFO_EVENT_STANDARD | XMC_USIC_CH_RXFIFO_EVENT_ALTERNATE)))
1216:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1217:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *          Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1218:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *          index++;
1219:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *          if(index == 10)
1220:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *          {
1221:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *            break;
1222:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *          }
1223:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1224:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1225:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1226:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Transmit the received data
1227:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        index = 0;
1228:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        while(index < 10)
1229:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1230:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Rec_Data[index]);
1231:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1232:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1233:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1234:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1235:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1236:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1237:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1238:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1239:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1240:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1241:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1242:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1243:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1244:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1245:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1246:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1247:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1248:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1249:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1250:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1251:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
1252:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
  72              	 .loc 2 1252 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76 0000 80B5     	 push {r7,lr}
  77              	.LCFI6:
  78              	 .cfi_def_cfa_offset 8
  79              	 .cfi_offset 7,-8
  80              	 .cfi_offset 14,-4
  81 0002 82B0     	 sub sp,sp,#8
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
1253:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1254:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
  88              	 .loc 2 1254 0
  89 0008 7B68     	 ldr r3,[r7,#4]
  90 000a 1B68     	 ldr r3,[r3]
  91 000c 1846     	 mov r0,r3
  92 000e FFF7FEFF 	 bl XMC_UART_CH_GetReceivedData
  93 0012 0346     	 mov r3,r0
  94 0014 DBB2     	 uxtb r3,r3
1255:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
  95              	 .loc 2 1255 0
  96 0016 1846     	 mov r0,r3
  97 0018 0837     	 adds r7,r7,#8
  98              	.LCFI9:
  99              	 .cfi_def_cfa_offset 8
 100 001a BD46     	 mov sp,r7
 101              	.LCFI10:
 102              	 .cfi_def_cfa_register 13
 103              	 
 104 001c 80BD     	 pop {r7,pc}
 105              	 .cfi_endproc
 106              	.LFE272:
 108 001e 00BF     	 .section .text.UART_ClearFlag,"ax",%progbits
 109              	 .align 2
 110              	 .thumb
 111              	 .thumb_func
 113              	UART_ClearFlag:
 114              	.LFB284:
1256:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1257:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1258:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Transmits a word of data.
1259:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1260:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t \n
1261:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param data Data to be transmitted.\n
1262:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return None\n
1263:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1264:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1265:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Transmits a byte of data through the UART channel.
1266:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If Tx FIFO is configured, the data is placed in the IN[0] register of the USIC channel used.
1267:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * If Tx FIFO is not configured, API waits for the TBUF to be free and then places the data in the 
1268:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * User can poll for receive event or configure interrupt by connecting an
1269:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * external INTERRUPT APP. This API can be used inside the ISR to read the received data.
1270:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1271:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1272:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1273:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1274:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1275:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Precondition:
1276:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Configure transmit mode and receive mode as "Direct"
1277:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
1278:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infinon"
1279:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1280:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1281:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1282:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1283:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1284:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1285:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1286:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1287:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1288:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1289:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1290:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1291:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1292:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_TransmitWord(&UART_0,Send_Data[index]);
1293:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1294:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1295:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait for transmit buffer interrupt to fill it again with remaining data
1296:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1297:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1298:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1299:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1300:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1301:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1302:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1303:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1304:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1305:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1306:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1307:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1308:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1309:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1310:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1311:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1312:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_TransmitWord(const UART_t* const handle, uint8_t data)
1313:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1314:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1315:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_UART_CH_Transmit(handle->channel, (uint16_t)data);
1316:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1317:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1318:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1319:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Enables the selected protocol events for interrupt generation.
1320:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1321:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1322:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  events Protocol events to be enabled for interrupt generation. \n
1323:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1324:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1325:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return None\n
1326:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1327:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1328:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Enables the events by configuring CCR or PCR register based on the event.
1329:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * When the event is enabled, an interrupt can be generated on occurrence of the event.
1330:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The API should be used only for \a Direct mode related events. Using this API for non \a Direct 
1331:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * may not yield expected result.
1332:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1333:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1334:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1335:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * * #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR decla
1336:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1337:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Precondition:
1338:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Disable receive FIFO.
1339:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1340:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1341:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //
1342:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Description:
1343:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Generates an event when data loss is detected and transmits a relevent message.
1344:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // To generate the event, transmit more than 2 bytes of data to the UART channel .
1345:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1346:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
1347:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1348:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1349:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1350:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1351:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1352:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1353:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1354:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1355:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1356:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1357:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1358:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1359:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1360:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1361:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Enable the interrupt generation when data loss is detected.
1362:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1363:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   while(1U)
1364:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1365:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1366:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1367:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //Protocol interrupt handler
1368:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1369:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1370:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1371:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit the message to indicate data loss
1372:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1373:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1374:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1375:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1376:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_EnableEvent(const UART_t* const handle, uint32_t events)
1377:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1378:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1379:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_UART_CH_EnableEvent(handle->channel, events);
1380:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1381:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1382:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1383:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Disables selected events from generating interrupt.
1384:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1385:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1386:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  events Events to be disabled from generating interrupt. \n
1387:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         \bRange: Use type \aXMC_UART_CH_EVENT_t to select the event. Multiple events can be
1388:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         combined using the bitwise OR operation.\n
1389:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return None
1390:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1391:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1392:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Events are disabled by clearing their respective bits in either CCR, TBCTR or RBCTR.
1393:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1394:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1395:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1396:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declara
1397:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1398:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Precondition:
1399:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Add INTERRUPT APP and connect the UART APP protocol interrupt signal to the INTERRUPT APP
1400:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // irq signal. Provide the callback function name in INTERRUPT APP as "ProtocolInterrupt".
1401:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * //
1402:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // Description: The example configures protocol interrupt for data loss detection.
1403:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // When the data loss interrupt occurs, the receive FIFO is cleared. After the receive FIFO
1404:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * // is cleared, the channel can receive few bytes till the FIFO gets filled.
1405:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1406:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
1407:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1408:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1409:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1410:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();
1411:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1412:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1413:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1414:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1415:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1416:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1417:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1418:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1419:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1420:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1421:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Enable interrupt generation when data loss is detected
1422:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1423:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   while(1U)
1424:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1425:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1426:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1427:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * void ProtocolInterrupt()
1428:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1429:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t txt_msg[]="Receiver data loss detected";
1430:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, txt_msg, sizeof(txt_msg));
1431:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_DisableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1432:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Clear receive FIFO so that data will be received.
1433:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   XMC_USIC_CH_RXFIFO_Flush(UART_0.channel);
1434:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_EnableEvent(&UART_0, XMC_UART_CH_EVENT_DATA_LOST);
1435:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1436:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1437:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1438:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1439:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_DisableEvent(const UART_t* const handle, uint32_t events)
1440:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1441:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1442:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_UART_CH_DisableEvent(handle->channel, events);
1443:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1444:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1445:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1446:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Checks if the transmit FIFO is full.
1447:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1448:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1449:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1450:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return bool Status of transmit FIFO filling level.
1451:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if transmit FIFO is full.<br>
1452:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       \afalse- if transmit FIFO is not full.<br>
1453:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1454:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while filling
1455:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * data to the transmit FIFO.
1456:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1457:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1458:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1459:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1460:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1461:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  // Precondition:
1462:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  // Transmit mode should be "Direct"
1463:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Description:
1464:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Transmits a string using FIFO.
1465:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1466:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * uint8_t send_data[] = "Infineon Technologies";
1467:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
1468:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1469:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1470:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1471:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1472:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1473:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1474:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1475:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1476:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1477:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1478:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1479:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1480:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1481:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1482:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1483:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(send_data); loc_index++)
1484:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1485:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //Wait when Tx FIFO is full
1486:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(UART_IsTXFIFOFull(&UART_0))
1487:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1488:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1489:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_TransmitWord(&UART_0, send_data[loc_index]);
1490:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1491:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   while(1U)
1492:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1493:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1494:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1495:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1496:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1497:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsTXFIFOFull(const UART_t* const handle)
1498:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1499:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1500:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
1501:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1502:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1503:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1504:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Checks if the receive FIFO is empty.
1505:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1506:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1507:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1508:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return bool Status of receive FIFO filling level.
1509:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *              \bRange: \atrue- if receive FIFO is empty.<br>
1510:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                       \afalse- if receive FIFO still has data.<br>
1511:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1512:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Checks the status using the register TRBSR. Can be used while reading
1513:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * data from the receive FIFO.
1514:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1515:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1516:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1517:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declar
1518:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1519:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  // Precondition:
1520:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  // Receive mode should be "Direct"
1521:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //
1522:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  // Description:
1523:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  // Receives 10 bytes and transmits the received 10 bytes.
1524:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1525:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * uint8_t send_text[] = "Enter 10 bytes:";
1526:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * uint8_t rec_data[10];
1527:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
1528:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1529:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t status;
1530:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint32_t loc_index;
1531:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1532:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   status = DAVE_Init();           // Initialization of DAVE APPs
1533:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1534:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(status == DAVE_STATUS_FAILURE)
1535:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1536:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("DAVE APPs initialization failed\n");
1537:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1538:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1539:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1540:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1541:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1542:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1543:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, send_text, sizeof(send_text));
1544:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   for(loc_index = 0; loc_index < sizeof(rec_data); loc_index++)
1545:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1546:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     //Wait when Rx FIFO is empty
1547:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(UART_IsRXFIFOEmpty(&UART_0))
1548:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1549:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1550:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     rec_data[loc_index] = UART_GetReceivedWord(&UART_0);
1551:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1552:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmit the received data
1553:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   UART_Transmit(&UART_0, rec_data, sizeof(rec_data));
1554:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   while(1U)
1555:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1556:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1557:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1558:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1559:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1560:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE bool UART_IsRXFIFOEmpty(const UART_t* const handle)
1561:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1562:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1563:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
1564:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1565:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1566:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1567:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the transmit FIFO.
1568:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1569:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1570:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  limit Value of transmit FIFO filling level, transition below which the interrupt should 
1571:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to transmit FIFO size.\n
1572:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *               e.g, If transmit FIFO size is 16, and limit is configured as 8, FIFO standard tran
1573:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level drops from 8 to 7.\n
1574:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1575:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return None\n
1576:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1577:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1578:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Transmit FIFO trigger limit is configured by setting its value in the TBCTR register.
1579:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Transmit FIFO is configured to generate interrupt when the FIFO filling level drops
1580:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * below the trigger limit.
1581:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1582:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1583:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1584:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1585:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1586:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Precondition:
1587:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1588:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_transmit_buffer_interru
1589:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1590:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "tx_cb"
1591:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
1592:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Transmits the string "Infineon" using FIFO. Configures the FIFO to generate event when the F
1593:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //is empty. Puts one byte to the FIFO when the event is generated.
1594:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1595:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1596:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1597:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1598:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1599:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1600:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Rec_Data[10];
1601:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1602:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1603:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1604:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1605:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Configure transmit interrupt generation when the transmit FIFO is empty
1606:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_SetTXFIFOTriggerLimit(&UART_0, 1);
1607:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Put one word to the FIFO
1608:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_TransmitWord(&UART_0,Send_Data[index]);
1609:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       index++;
1610:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1611:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1612:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1613:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1614:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1615:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1616:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1617:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1618:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1619:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1620:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1621:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1622:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  void tx_cb()
1623:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  {
1624:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *    if(index < sizeof(Send_Data))
1625:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *    {
1626:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      //Put one word to the FIFO
1627:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      UART_TransmitWord(&UART_0,Send_Data[index]);
1628:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      index++;
1629:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *    }
1630:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1631:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1632:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1633:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetTXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1634:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1635:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1636:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->tx_fifo_size, limit);
1637:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1638:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1639:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1640:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Configures trigger limit for the receive FIFO.
1641:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1642:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1643:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  limit Value of receive FIFO filling level, transition above which the interrupt should b
1644:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *               \bRange: 0 to receive FIFO size.\n
1645:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *               e.g, If receive FIFO size is 16, and limit is configured as 8, FIFO receive buffer
1646:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *               will be generated when the FIFO filling level rises from 8 to 9.\n
1647:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1648:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return None\n
1649:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1650:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1651:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Receive FIFO trigger limit is configured by setting its value in the RBCTR register.
1652:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Receive FIFO is configured to generate interrupt when the FIFO filling level rises
1653:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * above the trigger limit.
1654:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1655:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1656:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1657:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1658:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1659:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Precondition:
1660:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Configure receive mode as "Direct"
1661:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Add an instance of the INTERRUPT APP and connect the UART event_fifo_receive_buffer_interrup
1662:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //signal to the INTERRUPT sr_irq signal.
1663:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Provide the callback function name in INTERRUPT APP as "rx_cb"
1664:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description:
1665:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1666:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t Rec_Data[10];
1667:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t index = 0;
1668:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1669:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1670:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1671:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1672:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1673:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1674:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1675:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Configure receive interrupt generation when 10 bytes are received
1676:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 9);
1677:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Wait for the data to be received.
1678:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(index < 10);
1679:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Transmit the received data
1680:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_Transmit(&UART_0, Rec_Data, 10);
1681:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Wait for transmission to finish
1682:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(UART_0.runtime->tx_busy);
1683:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1684:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1685:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1686:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1687:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1688:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1689:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1690:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1691:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1692:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1693:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1694:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //INTERRUPT APP callback function
1695:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  void rx_cb()
1696:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  {
1697:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *    while((index < 10) && (!XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel)))
1698:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *    {
1699:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      //Read data from FIFO
1700:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      Rec_Data[index] = UART_GetReceivedWord(&UART_0);
1701:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      index++;
1702:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *    }
1703:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1704:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1705:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1706:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_SetRXFIFOTriggerLimit(const UART_t* const handle, uint32_t limit)
1707:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1708:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1709:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_SetSizeTriggerLimit(handle->channel, handle->config->rx_fifo_size, limit);
1710:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1711:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1712:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1713:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Gets the status of event flags related to receive FIFO.
1714:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1715:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1716:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1717:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1718:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of standard receive buffer event, alternative receive buffer
1719:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * event and receive buffer error event in their bit positions in TRBSR register.\n
1720:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for event bitmasks. Multiple events' status
1721:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * can be combined for comparison using \a OR operation.
1722:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1723:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1724:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * It provides the status of standard receive buffer event, alternative receive buffer
1725:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * event and receive buffer error event.
1726:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Function masks the TRBSR register with the bitmask of SRBI,
1727:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * ARBI and RBERI flags. User has to mask the bits of interest before checking
1728:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the status.
1729:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1730:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1731:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1732:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1733:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode and receive mode as direct.
1734:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Description: Receives data of 10 bytes and retransmits it.
1735:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1736:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1737:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1738:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1739:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1740:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1741:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1742:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1743:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1744:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Configure the receive FIFO event to generate when one byte is received.
1745:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1746:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1U)
1747:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
1748:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Check if receive FIFO event is generated
1749:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1750:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
1751:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1752:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Read received data
1753:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1754:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1755:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1756:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1757:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1758:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
1759:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
1760:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1761:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1762:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1763:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1764:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1765:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1766:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1767:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1768:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1769:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1770:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1771:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1772:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1773:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetRXFIFOStatus(const UART_t* const handle)
1774:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1775:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1776:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   return XMC_USIC_CH_RXFIFO_GetEvent(handle->channel);
1777:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1778:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1779:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1780:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1781:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * transmit FIFO.
1782:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1783:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1784:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1785:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at their bit positions in TRBSR register
1786:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1787:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_TXFIFO_EVENT_t. Multiple events can be
1788:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             combined using \a OR operation.
1789:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1790:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return    None
1791:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1792:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1793:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR register using the TRBSCR register.
1794:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * But the function does not mask the input value with the bit positions restricted
1795:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * to transmit FIFO status bits. User should ensure that the input value is appropriately
1796:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * masked.
1797:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1798:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1799:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1800:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1801:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode as direct.
1802:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description: Transmits the string "Infineon" bytewise.
1803:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1804:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1805:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1806:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t Send_Data[] = "Infineon";
1807:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1808:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1809:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1810:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1811:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1812:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        while(index < sizeof(Send_Data))
1813:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1814:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Put every byte to FIFO.
1815:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           XMC_USIC_CH_TXFIFO_PutData(UART_0.channel,(uint16_t)Send_Data[index]);
1816:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1817:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1818:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Wait for FIFO transmit standar buffer interrupt to fill it again with remaining data
1819:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
1820:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
1821:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1822:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1823:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1824:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1825:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1826:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1827:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1828:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1829:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1830:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1831:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1832:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1833:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1834:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1835:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearTXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1836:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1837:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1838:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_TXFIFO_ClearEvent(handle->channel, flag);
1839:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1840:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1841:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1842:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Function clears the specified FIFO event flag related to
1843:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * receive FIFO. It should be used to clear the status of standard
1844:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * receive buffer interrupt, alternative receive buffer interupt and
1845:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * receive buffer error interrupt flags.
1846:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1847:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1848:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  handle UART APP handle pointer of type @ref UART_t
1849:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param  flag Value with event bits at the bit positions in TRBSR register
1850:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             to be cleared.\n
1851:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_USIC_CH_RXFIFO_EVENT_t for providing events.
1852:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             Multiple events can be input by using \a OR operation.
1853:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1854:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return    None
1855:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1856:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1857:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Function clears a status bit in TRBSR using the TRBSCR register.
1858:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The function does not mask the input value to clear only receive buffer
1859:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * events. So user should appropriately mask the input value before calling
1860:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the function.
1861:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1862:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1863:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1864:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   #include "DAVE.h"         //Declarations from DAVE Code Generation (includes SFR declaration)
1865:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Precondition: Configure transmit mode and receive mode as direct.
1866:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   //Description: Receives data of 10 bytes and transmits the same bytewise.
1867:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   int main(void)
1868:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1869:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     UART_STATUS_t init_status;
1870:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t ReadData[10];
1871:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     uint8_t index = 0;
1872:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1873:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     init_status = (UART_STATUS_t)UART_Init(&UART_0);
1874:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     if(init_status == UART_STATUS_SUCCESS)
1875:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1876:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       //Configure receive FIFO to generate event when one byte is received.
1877:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       UART_SetRXFIFOTriggerLimit(&UART_0, 0);
1878:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       while(1U)
1879:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       {
1880:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         //Check if receive event is generated
1881:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         if(UART_GetRXFIFOStatus(&UART_0) & XMC_USIC_CH_RXFIFO_EVENT_STANDARD)
1882:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         {
1883:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Clear receive event
1884:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearRXFIFOStatus(&UART_0, XMC_USIC_CH_RXFIFO_EVENT_STANDARD);
1885:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Read received data from FIFO
1886:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           ReadData[index] = (uint8_t)XMC_USIC_CH_RXFIFO_GetData((XMC_USIC_CH_t *)&UART_0.channel
1887:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Transmit received data
1888:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_Transmit(&UART_0, &ReadData[index], 1);
1889:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index++;
1890:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           index = index % 10;
1891:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         }
1892:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *       }
1893:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1894:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     else
1895:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1896:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      XMC_DEBUG("main: Application initialization failed");
1897:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(1U)
1898:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1899:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1900:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1901:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      return 1U;
1902:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  }
1903:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1904:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1905:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  */
1906:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearRXFIFOStatus(const UART_t* const handle, const uint32_t flag)
1907:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1908:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1909:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_USIC_CH_RXFIFO_ClearEvent(handle->channel, flag);
1910:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1911:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1912:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1913:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Provides the status of protocol events.
1914:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1915:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1916:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be read.\n
1917:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1918:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1919:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1920:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return uint32_t: Status of selected protocol events read from PSR_ASCMode register.\n
1921:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for comparing the return value
1922:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * with event bitmasks. Status of multiple events can be checked by combining enum
1923:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * values using \a OR operation while comparing.
1924:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1925:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
1926:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Reads the protocol status bits from the register PSR_ASCMode and compares the values with
1927:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * the input value of selected events. Returns the masked value of selected events with the status 
1928:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
1929:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <BR>
1930:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1931:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
1932:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
1933:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * #include "DAVE.h"
1934:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Precondition: Configure transmit mode as Interrupt
1935:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Desription: Transmits the string "Infineon", waits for transmit buffer to go idle and then re
1936:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Transmits the received 10 bytes.
1937:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1938:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
1939:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
1940:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
1941:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t Send_Data[] = "Infineon";
1942:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint8_t ReceiveData[10] = {0};
1943:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1944:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
1945:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1946:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
1947:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1948:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      //Send the first string.
1949:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      //Check if the request to transmit is accepted.
1950:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      while(UART_Transmit(&UART_0,Send_Data, sizeof(Send_Data)) == UART_STATUS_BUSY)
1951:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      {
1952:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *      }
1953:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1954:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1955:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1956:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Check if transmit buffer is idle
1957:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, XMC_UART_CH_STATUS_FLAG_TRANSMISSION_IDLE))
1958:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
1959:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Check if receive request is successful
1960:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           if(UART_Receive(&UART_0, ReceiveData, 10) == UART_STATUS_SUCCESS)
1961:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           {
1962:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             //Wait for reception of 10 bytes
1963:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             while(UART_0.runtime->rx_busy)
1964:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             {
1965:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             }
1966:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             //Transmit the received data.
1967:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             UART_Transmit(&UART_0, ReceiveData, 10);
1968:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           }
1969:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
1970:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1971:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1972:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   else
1973:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
1974:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1975:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
1976:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
1977:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
1978:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
1979:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
1980:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1981:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   return 1U;
1982:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
1983:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
1984:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1985:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * */
1986:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE uint32_t UART_GetFlagStatus(const UART_t * const handle, uint32_t protocol_status)
1987:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
1988:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
1989:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   return (XMC_UART_CH_GetStatusFlag(handle->channel) & protocol_status);
1990:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
1991:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** 
1992:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** /**
1993:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @brief Clears the event status in the register(PSR_ASCMode).
1994:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
1995:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param handle UART APP handle pointer of type @ref UART_t
1996:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @param protocol_status Event whose status is to be cleared.\n
1997:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             \b Range: Use type @ref XMC_UART_CH_STATUS_FLAG_t for input. Multiple events can
1998:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *             be combined using \a OR operation.
1999:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @return None
2000:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2001:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * \par<b>Description:</b><br>
2002:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Clears a given protocol event flag bit using the PSCR register.
2003:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * This function is an inline wrapper for the API provided by xmc_uart.h file.
2004:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * The user should mask the input value based on the events to be cleared.
2005:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * <BR>
2006:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2007:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * Example Usage:
2008:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @code
2009:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * #include "DAVE.h"
2010:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Precondition:
2011:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Configure receive mode as direct and disable receive FIFO and transmit FIFO.
2012:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Description:
2013:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *  //Transmits each received byte of data.
2014:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * int main(void)
2015:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * {
2016:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   DAVE_STATUS_t init_status;
2017:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   uint16_t ReceiveData = 0;
2018:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2019:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   init_status = DAVE_Init();
2020:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2021:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   if(init_status == DAVE_STATUS_SUCCESS)
2022:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
2023:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
2024:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
2025:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        //Check if data is received
2026:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        if(UART_GetFlagStatus(&UART_0, (XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2027:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *         XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION)))
2028:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        {
2029:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Read the received data
2030:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           ReceiveData = XMC_UART_CH_GetReceivedData(UART_0.channel);
2031:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Transmit the received data
2032:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           XMC_UART_CH_Transmit(UART_0.channel,(const uint16_t)ReceiveData);
2033:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           //Clear the receive flags
2034:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *           UART_ClearFlag(&UART_0,(XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION |
2035:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *                    XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION));
2036:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *        }
2037:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
2038:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
2039:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   else
2040:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   {
2041:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2042:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     XMC_DEBUG("main: Application initialization failed");
2043:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     while(1U)
2044:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     {
2045:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *     }
2046:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   }
2047:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2048:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *   return 1U;
2049:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * }
2050:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * @endcode
2051:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  *
2052:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****  * */
2053:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** __STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
2054:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** {
 115              	 .loc 2 2054 0
 116              	 .cfi_startproc
 117              	 
 118              	 
 119 0000 80B5     	 push {r7,lr}
 120              	.LCFI11:
 121              	 .cfi_def_cfa_offset 8
 122              	 .cfi_offset 7,-8
 123              	 .cfi_offset 14,-4
 124 0002 82B0     	 sub sp,sp,#8
 125              	.LCFI12:
 126              	 .cfi_def_cfa_offset 16
 127 0004 00AF     	 add r7,sp,#0
 128              	.LCFI13:
 129              	 .cfi_def_cfa_register 7
 130 0006 7860     	 str r0,[r7,#4]
 131 0008 3960     	 str r1,[r7]
2055:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_ASSERT("UART APP handle invalid", (handle != NULL));
2056:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h ****   XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
 132              	 .loc 2 2056 0
 133 000a 7B68     	 ldr r3,[r7,#4]
 134 000c 1B68     	 ldr r3,[r3]
 135 000e 1846     	 mov r0,r3
 136 0010 3968     	 ldr r1,[r7]
 137 0012 FFF7FEFF 	 bl XMC_UART_CH_ClearStatusFlag
2057:C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART\uart.h **** }
 138              	 .loc 2 2057 0
 139 0016 0837     	 adds r7,r7,#8
 140              	.LCFI14:
 141              	 .cfi_def_cfa_offset 8
 142 0018 BD46     	 mov sp,r7
 143              	.LCFI15:
 144              	 .cfi_def_cfa_register 13
 145              	 
 146 001a 80BD     	 pop {r7,pc}
 147              	 .cfi_endproc
 148              	.LFE284:
 150              	 .comm UartRxBuffer,255,4
 151              	 .comm UartRxBufferGp,4,4
 152              	 .comm UartRxBufferPp,4,4
 153              	 .global TxEnd
 154              	 .section .bss.TxEnd,"aw",%nobits
 157              	TxEnd:
 158 0000 00       	 .space 1
 159              	 .section .text._write,"ax",%progbits
 160              	 .align 2
 161              	 .global _write
 162              	 .thumb
 163              	 .thumb_func
 165              	_write:
 166              	.LFB293:
 167              	 .file 3 "../main.c"
   1:../main.c     **** /*
   2:../main.c     ****  * main.c
   3:../main.c     ****  *
   4:../main.c     ****  *  Created on: 2024 May 27 13:33:41
   5:../main.c     ****  *  Author: Administrator
   6:../main.c     ****  */
   7:../main.c     **** 
   8:../main.c     **** 
   9:../main.c     **** 
  10:../main.c     **** 
  11:../main.c     **** #include "DAVE.h"                 //Declarations from DAVE Code Generation (includes SFR declaratio
  12:../main.c     **** #include <stdio.h>
  13:../main.c     **** #include <stdbool.h>
  14:../main.c     **** 
  15:../main.c     **** #define UartRxBufferMax 255
  16:../main.c     **** uint8_t UartRxBuffer[UartRxBufferMax];
  17:../main.c     **** int			UartRxBufferGp;	// Get pointer, Read
  18:../main.c     **** int			UartRxBufferPp; // Put pointer, Write
  19:../main.c     **** 
  20:../main.c     **** bool TxEnd = false;
  21:../main.c     **** 
  22:../main.c     **** // printf 재정의
  23:../main.c     **** int _write(int file, char *p, int len) {
 168              	 .loc 3 23 0
 169              	 .cfi_startproc
 170              	 
 171              	 
 172 0000 80B5     	 push {r7,lr}
 173              	.LCFI16:
 174              	 .cfi_def_cfa_offset 8
 175              	 .cfi_offset 7,-8
 176              	 .cfi_offset 14,-4
 177 0002 84B0     	 sub sp,sp,#16
 178              	.LCFI17:
 179              	 .cfi_def_cfa_offset 24
 180 0004 00AF     	 add r7,sp,#0
 181              	.LCFI18:
 182              	 .cfi_def_cfa_register 7
 183 0006 F860     	 str r0,[r7,#12]
 184 0008 B960     	 str r1,[r7,#8]
 185 000a 7A60     	 str r2,[r7,#4]
  24:../main.c     **** 	UART_Transmit(&UART_0, p, len);
 186              	 .loc 3 24 0
 187 000c 7B68     	 ldr r3,[r7,#4]
 188 000e 0548     	 ldr r0,.L7
 189 0010 B968     	 ldr r1,[r7,#8]
 190 0012 1A46     	 mov r2,r3
 191 0014 FFF7FEFF 	 bl UART_Transmit
  25:../main.c     **** 	return len;
 192              	 .loc 3 25 0
 193 0018 7B68     	 ldr r3,[r7,#4]
  26:../main.c     **** }
 194              	 .loc 3 26 0
 195 001a 1846     	 mov r0,r3
 196 001c 1037     	 adds r7,r7,#16
 197              	.LCFI19:
 198              	 .cfi_def_cfa_offset 8
 199 001e BD46     	 mov sp,r7
 200              	.LCFI20:
 201              	 .cfi_def_cfa_register 13
 202              	 
 203 0020 80BD     	 pop {r7,pc}
 204              	.L8:
 205 0022 00BF     	 .align 2
 206              	.L7:
 207 0024 00000000 	 .word UART_0
 208              	 .cfi_endproc
 209              	.LFE293:
 211              	 .section .text.USIC0_5_IRQHandler,"ax",%progbits
 212              	 .align 2
 213              	 .global USIC0_5_IRQHandler
 214              	 .thumb
 215              	 .thumb_func
 217              	USIC0_5_IRQHandler:
 218              	.LFB294:
  27:../main.c     **** 
  28:../main.c     **** void callbackTransmit() {
 219              	 .loc 3 28 0
 220              	 .cfi_startproc
 221              	 
 222              	 
 223              	 
 224 0000 80B4     	 push {r7}
 225              	.LCFI21:
 226              	 .cfi_def_cfa_offset 4
 227              	 .cfi_offset 7,-4
 228 0002 00AF     	 add r7,sp,#0
 229              	.LCFI22:
 230              	 .cfi_def_cfa_register 7
  29:../main.c     **** 	TxEnd = true;
 231              	 .loc 3 29 0
 232 0004 034B     	 ldr r3,.L10
 233 0006 0122     	 movs r2,#1
 234 0008 1A70     	 strb r2,[r3]
  30:../main.c     **** }
 235              	 .loc 3 30 0
 236 000a BD46     	 mov sp,r7
 237              	.LCFI23:
 238              	 .cfi_def_cfa_register 13
 239              	 
 240 000c 5DF8047B 	 ldr r7,[sp],#4
 241              	.LCFI24:
 242              	 .cfi_restore 7
 243              	 .cfi_def_cfa_offset 0
 244 0010 7047     	 bx lr
 245              	.L11:
 246 0012 00BF     	 .align 2
 247              	.L10:
 248 0014 00000000 	 .word TxEnd
 249              	 .cfi_endproc
 250              	.LFE294:
 252              	 .section .text.USIC0_3_IRQHandler,"ax",%progbits
 253              	 .align 2
 254              	 .global USIC0_3_IRQHandler
 255              	 .thumb
 256              	 .thumb_func
 258              	USIC0_3_IRQHandler:
 259              	.LFB295:
  31:../main.c     **** 
  32:../main.c     **** void callbackReceive() {
 260              	 .loc 3 32 0
 261              	 .cfi_startproc
 262              	 
 263              	 
 264 0000 98B5     	 push {r3,r4,r7,lr}
 265              	.LCFI25:
 266              	 .cfi_def_cfa_offset 16
 267              	 .cfi_offset 3,-16
 268              	 .cfi_offset 4,-12
 269              	 .cfi_offset 7,-8
 270              	 .cfi_offset 14,-4
 271 0002 00AF     	 add r7,sp,#0
 272              	.LCFI26:
 273              	 .cfi_def_cfa_register 7
  33:../main.c     **** 	UartRxBuffer[UartRxBufferPp++] = UART_GetReceivedWord(&UART_0);
 274              	 .loc 3 33 0
 275 0004 104B     	 ldr r3,.L13
 276 0006 1C68     	 ldr r4,[r3]
 277 0008 631C     	 adds r3,r4,#1
 278 000a 0F4A     	 ldr r2,.L13
 279 000c 1360     	 str r3,[r2]
 280 000e 0F48     	 ldr r0,.L13+4
 281 0010 FFF7FEFF 	 bl UART_GetReceivedWord
 282 0014 0346     	 mov r3,r0
 283 0016 1A46     	 mov r2,r3
 284 0018 0D4B     	 ldr r3,.L13+8
 285 001a 1A55     	 strb r2,[r3,r4]
  34:../main.c     **** 	UartRxBufferPp %= UartRxBufferMax;
 286              	 .loc 3 34 0
 287 001c 0A4B     	 ldr r3,.L13
 288 001e 1A68     	 ldr r2,[r3]
 289 0020 0C4B     	 ldr r3,.L13+12
 290 0022 82FB0301 	 smull r0,r1,r2,r3
 291 0026 5318     	 adds r3,r2,r1
 292 0028 D911     	 asrs r1,r3,#7
 293 002a D317     	 asrs r3,r2,#31
 294 002c C91A     	 subs r1,r1,r3
 295 002e 0B46     	 mov r3,r1
 296 0030 1B02     	 lsls r3,r3,#8
 297 0032 5B1A     	 subs r3,r3,r1
 298 0034 D11A     	 subs r1,r2,r3
 299 0036 044B     	 ldr r3,.L13
 300 0038 1960     	 str r1,[r3]
  35:../main.c     **** 	UART_ClearFlag(&UART_0, XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_UART_CH_STATUS_FLAG_ALTER
 301              	 .loc 3 35 0
 302 003a 0448     	 ldr r0,.L13+4
 303 003c 4FF44041 	 mov r1,#49152
 304 0040 FFF7FEFF 	 bl UART_ClearFlag
  36:../main.c     **** }
 305              	 .loc 3 36 0
 306 0044 98BD     	 pop {r3,r4,r7,pc}
 307              	.L14:
 308 0046 00BF     	 .align 2
 309              	.L13:
 310 0048 00000000 	 .word UartRxBufferPp
 311 004c 00000000 	 .word UART_0
 312 0050 00000000 	 .word UartRxBuffer
 313 0054 81808080 	 .word -2139062143
 314              	 .cfi_endproc
 315              	.LFE295:
 317              	 .section .text.getChar,"ax",%progbits
 318              	 .align 2
 319              	 .global getChar
 320              	 .thumb
 321              	 .thumb_func
 323              	getChar:
 324              	.LFB296:
  37:../main.c     **** 
  38:../main.c     **** uint16_t	getChar() {
 325              	 .loc 3 38 0
 326              	 .cfi_startproc
 327              	 
 328              	 
 329              	 
 330 0000 80B4     	 push {r7}
 331              	.LCFI27:
 332              	 .cfi_def_cfa_offset 4
 333              	 .cfi_offset 7,-4
 334 0002 83B0     	 sub sp,sp,#12
 335              	.LCFI28:
 336              	 .cfi_def_cfa_offset 16
 337 0004 00AF     	 add r7,sp,#0
 338              	.LCFI29:
 339              	 .cfi_def_cfa_register 7
  39:../main.c     **** 	uint16_t result = -1;
 340              	 .loc 3 39 0
 341 0006 4FF6FF73 	 movw r3,#65535
 342 000a FB80     	 strh r3,[r7,#6]
  40:../main.c     **** 	if(UartRxBufferGp == UartRxBufferPp) return result;
 343              	 .loc 3 40 0
 344 000c 124B     	 ldr r3,.L18
 345 000e 1A68     	 ldr r2,[r3]
 346 0010 124B     	 ldr r3,.L18+4
 347 0012 1B68     	 ldr r3,[r3]
 348 0014 9A42     	 cmp r2,r3
 349 0016 01D1     	 bne .L16
 350              	 .loc 3 40 0 is_stmt 0 discriminator 1
 351 0018 FB88     	 ldrh r3,[r7,#6]
 352 001a 17E0     	 b .L17
 353              	.L16:
  41:../main.c     **** 	result = UartRxBuffer[UartRxBufferGp++];
 354              	 .loc 3 41 0 is_stmt 1
 355 001c 0E4B     	 ldr r3,.L18
 356 001e 1B68     	 ldr r3,[r3]
 357 0020 5A1C     	 adds r2,r3,#1
 358 0022 0D49     	 ldr r1,.L18
 359 0024 0A60     	 str r2,[r1]
 360 0026 0E4A     	 ldr r2,.L18+8
 361 0028 D35C     	 ldrb r3,[r2,r3]
 362 002a FB80     	 strh r3,[r7,#6]
  42:../main.c     **** 	UartRxBufferGp %= UartRxBufferMax;
 363              	 .loc 3 42 0
 364 002c 0A4B     	 ldr r3,.L18
 365 002e 1A68     	 ldr r2,[r3]
 366 0030 0C4B     	 ldr r3,.L18+12
 367 0032 82FB0301 	 smull r0,r1,r2,r3
 368 0036 5318     	 adds r3,r2,r1
 369 0038 D911     	 asrs r1,r3,#7
 370 003a D317     	 asrs r3,r2,#31
 371 003c C91A     	 subs r1,r1,r3
 372 003e 0B46     	 mov r3,r1
 373 0040 1B02     	 lsls r3,r3,#8
 374 0042 5B1A     	 subs r3,r3,r1
 375 0044 D11A     	 subs r1,r2,r3
 376 0046 044B     	 ldr r3,.L18
 377 0048 1960     	 str r1,[r3]
  43:../main.c     **** 	return result;
 378              	 .loc 3 43 0
 379 004a FB88     	 ldrh r3,[r7,#6]
 380              	.L17:
  44:../main.c     **** }
 381              	 .loc 3 44 0
 382 004c 1846     	 mov r0,r3
 383 004e 0C37     	 adds r7,r7,#12
 384              	.LCFI30:
 385              	 .cfi_def_cfa_offset 4
 386 0050 BD46     	 mov sp,r7
 387              	.LCFI31:
 388              	 .cfi_def_cfa_register 13
 389              	 
 390 0052 5DF8047B 	 ldr r7,[sp],#4
 391              	.LCFI32:
 392              	 .cfi_restore 7
 393              	 .cfi_def_cfa_offset 0
 394 0056 7047     	 bx lr
 395              	.L19:
 396              	 .align 2
 397              	.L18:
 398 0058 00000000 	 .word UartRxBufferGp
 399 005c 00000000 	 .word UartRxBufferPp
 400 0060 00000000 	 .word UartRxBuffer
 401 0064 81808080 	 .word -2139062143
 402              	 .cfi_endproc
 403              	.LFE296:
 405              	 .section .text.getMessage,"ax",%progbits
 406              	 .align 2
 407              	 .global getMessage
 408              	 .thumb
 409              	 .thumb_func
 411              	getMessage:
 412              	.LFB297:
  45:../main.c     **** 
  46:../main.c     **** char *getMessage() {
 413              	 .loc 3 46 0
 414              	 .cfi_startproc
 415              	 
 416              	 
 417 0000 80B5     	 push {r7,lr}
 418              	.LCFI33:
 419              	 .cfi_def_cfa_offset 8
 420              	 .cfi_offset 7,-8
 421              	 .cfi_offset 14,-4
 422 0002 82B0     	 sub sp,sp,#8
 423              	.LCFI34:
 424              	 .cfi_def_cfa_offset 16
 425 0004 00AF     	 add r7,sp,#0
 426              	.LCFI35:
 427              	 .cfi_def_cfa_register 7
  47:../main.c     **** 	static char result[100];
  48:../main.c     **** 	static int pos = 0;
  49:../main.c     **** 	uint16_t ch = getChar();
 428              	 .loc 3 49 0
 429 0006 FFF7FEFF 	 bl getChar
 430 000a 0346     	 mov r3,r0
 431 000c FB80     	 strh r3,[r7,#6]
  50:../main.c     **** 	if(ch != -1) {
  51:../main.c     **** 		if(ch == '\n') {
 432              	 .loc 3 51 0
 433 000e FB88     	 ldrh r3,[r7,#6]
 434 0010 0A2B     	 cmp r3,#10
 435 0012 08D1     	 bne .L21
  52:../main.c     **** 			memset(result, 0, 100);
 436              	 .loc 3 52 0
 437 0014 0B48     	 ldr r0,.L24
 438 0016 0021     	 movs r1,#0
 439 0018 6422     	 movs r2,#100
 440 001a FFF7FEFF 	 bl memset
  53:../main.c     **** 			pos = 0;
 441              	 .loc 3 53 0
 442 001e 0A4B     	 ldr r3,.L24+4
 443 0020 0022     	 movs r2,#0
 444 0022 1A60     	 str r2,[r3]
 445 0024 08E0     	 b .L22
 446              	.L21:
  54:../main.c     **** 		}
  55:../main.c     **** 		else {
  56:../main.c     **** 			result[pos++] = ch;
 447              	 .loc 3 56 0
 448 0026 084B     	 ldr r3,.L24+4
 449 0028 1B68     	 ldr r3,[r3]
 450 002a 5A1C     	 adds r2,r3,#1
 451 002c 0649     	 ldr r1,.L24+4
 452 002e 0A60     	 str r2,[r1]
 453 0030 FA88     	 ldrh r2,[r7,#6]
 454 0032 D1B2     	 uxtb r1,r2
 455 0034 034A     	 ldr r2,.L24
 456 0036 D154     	 strb r1,[r2,r3]
 457              	.L22:
  57:../main.c     **** 		}
  58:../main.c     **** 	}
  59:../main.c     **** 	return result;
 458              	 .loc 3 59 0
 459 0038 024B     	 ldr r3,.L24
  60:../main.c     **** }
 460              	 .loc 3 60 0
 461 003a 1846     	 mov r0,r3
 462 003c 0837     	 adds r7,r7,#8
 463              	.LCFI36:
 464              	 .cfi_def_cfa_offset 8
 465 003e BD46     	 mov sp,r7
 466              	.LCFI37:
 467              	 .cfi_def_cfa_register 13
 468              	 
 469 0040 80BD     	 pop {r7,pc}
 470              	.L25:
 471 0042 00BF     	 .align 2
 472              	.L24:
 473 0044 00000000 	 .word result.9345
 474 0048 00000000 	 .word pos.9346
 475              	 .cfi_endproc
 476              	.LFE297:
 478              	 .comm delay1000,4,4
 479              	 .section .text.callback,"ax",%progbits
 480              	 .align 2
 481              	 .global callback
 482              	 .thumb
 483              	 .thumb_func
 485              	callback:
 486              	.LFB298:
  61:../main.c     **** 
  62:../main.c     **** int delay1000;
  63:../main.c     **** 
  64:../main.c     **** // 1ms
  65:../main.c     **** void callback() {
 487              	 .loc 3 65 0
 488              	 .cfi_startproc
 489              	 
 490              	 
 491              	 
 492 0000 80B4     	 push {r7}
 493              	.LCFI38:
 494              	 .cfi_def_cfa_offset 4
 495              	 .cfi_offset 7,-4
 496 0002 00AF     	 add r7,sp,#0
 497              	.LCFI39:
 498              	 .cfi_def_cfa_register 7
  66:../main.c     **** 	if(delay1000 > 0)
 499              	 .loc 3 66 0
 500 0004 064B     	 ldr r3,.L28
 501 0006 1B68     	 ldr r3,[r3]
 502 0008 002B     	 cmp r3,#0
 503 000a 04DD     	 ble .L26
  67:../main.c     **** 		delay1000--;
 504              	 .loc 3 67 0
 505 000c 044B     	 ldr r3,.L28
 506 000e 1B68     	 ldr r3,[r3]
 507 0010 013B     	 subs r3,r3,#1
 508 0012 034A     	 ldr r2,.L28
 509 0014 1360     	 str r3,[r2]
 510              	.L26:
  68:../main.c     **** 
  69:../main.c     **** }
 511              	 .loc 3 69 0
 512 0016 BD46     	 mov sp,r7
 513              	.LCFI40:
 514              	 .cfi_def_cfa_register 13
 515              	 
 516 0018 5DF8047B 	 ldr r7,[sp],#4
 517              	.LCFI41:
 518              	 .cfi_restore 7
 519              	 .cfi_def_cfa_offset 0
 520 001c 7047     	 bx lr
 521              	.L29:
 522 001e 00BF     	 .align 2
 523              	.L28:
 524 0020 00000000 	 .word delay1000
 525              	 .cfi_endproc
 526              	.LFE298:
 528              	 .section .text.delay,"ax",%progbits
 529              	 .align 2
 530              	 .global delay
 531              	 .thumb
 532              	 .thumb_func
 534              	delay:
 535              	.LFB299:
  70:../main.c     **** 
  71:../main.c     **** void delay(int d) {
 536              	 .loc 3 71 0
 537              	 .cfi_startproc
 538              	 
 539              	 
 540              	 
 541 0000 80B4     	 push {r7}
 542              	.LCFI42:
 543              	 .cfi_def_cfa_offset 4
 544              	 .cfi_offset 7,-4
 545 0002 83B0     	 sub sp,sp,#12
 546              	.LCFI43:
 547              	 .cfi_def_cfa_offset 16
 548 0004 00AF     	 add r7,sp,#0
 549              	.LCFI44:
 550              	 .cfi_def_cfa_register 7
 551 0006 7860     	 str r0,[r7,#4]
  72:../main.c     **** 	delay1000 = d;
 552              	 .loc 3 72 0
 553 0008 064A     	 ldr r2,.L32
 554 000a 7B68     	 ldr r3,[r7,#4]
 555 000c 1360     	 str r3,[r2]
  73:../main.c     **** 	while(delay1000 > 0)
 556              	 .loc 3 73 0
 557 000e 00BF     	 nop
 558              	.L31:
 559              	 .loc 3 73 0 is_stmt 0 discriminator 1
 560 0010 044B     	 ldr r3,.L32
 561 0012 1B68     	 ldr r3,[r3]
 562 0014 002B     	 cmp r3,#0
 563 0016 FBDC     	 bgt .L31
  74:../main.c     **** 		;
  75:../main.c     **** }
 564              	 .loc 3 75 0 is_stmt 1
 565 0018 0C37     	 adds r7,r7,#12
 566              	.LCFI45:
 567              	 .cfi_def_cfa_offset 4
 568 001a BD46     	 mov sp,r7
 569              	.LCFI46:
 570              	 .cfi_def_cfa_register 13
 571              	 
 572 001c 5DF8047B 	 ldr r7,[sp],#4
 573              	.LCFI47:
 574              	 .cfi_restore 7
 575              	 .cfi_def_cfa_offset 0
 576 0020 7047     	 bx lr
 577              	.L33:
 578 0022 00BF     	 .align 2
 579              	.L32:
 580 0024 00000000 	 .word delay1000
 581              	 .cfi_endproc
 582              	.LFE299:
 584              	 .section .bss.isFlag,"aw",%nobits
 587              	isFlag:
 588 0000 00       	 .space 1
 589              	 .section .bss.angle,"aw",%nobits
 590              	 .align 2
 593              	angle:
 594 0000 00000000 	 .space 4
 595              	 .comm sinValue,4,4
 596              	 .comm cosValue,4,4
 597              	 .comm msg,4,4
 598              	 .global __aeabi_i2d
 599              	 .global __aeabi_dmul
 600              	 .global __aeabi_ddiv
 601              	 .global __aeabi_d2f
 602              	 .global __aeabi_f2d
 603              	 .section .rodata
 604              	 .align 2
 605              	.LC0:
 606 0000 25662C20 	 .ascii "%f, %f\012\000"
 606      25660A00 
 607              	 .align 2
 608              	.LC1:
 609 0008 53544152 	 .ascii "START\000"
 609      5400
 610 000e 0000     	 .align 2
 611              	.LC2:
 612 0010 53544F50 	 .ascii "STOP\000"
 612      00
 613 0015 000000   	 .section .text.main,"ax",%progbits
 614              	 .align 2
 615              	 .global main
 616              	 .thumb
 617              	 .thumb_func
 619              	main:
 620              	.LFB300:
  76:../main.c     **** 
  77:../main.c     **** static bool isFlag = false;
  78:../main.c     **** static int angle = 0;
  79:../main.c     **** float sinValue;
  80:../main.c     **** float cosValue;
  81:../main.c     **** char *msg;
  82:../main.c     **** 
  83:../main.c     **** int main(void)
  84:../main.c     **** {
 621              	 .loc 3 84 0
 622              	 .cfi_startproc
 623              	 
 624              	 
 625 0000 B0B5     	 push {r4,r5,r7,lr}
 626              	.LCFI48:
 627              	 .cfi_def_cfa_offset 16
 628              	 .cfi_offset 4,-16
 629              	 .cfi_offset 5,-12
 630              	 .cfi_offset 7,-8
 631              	 .cfi_offset 14,-4
 632 0002 84B0     	 sub sp,sp,#16
 633              	.LCFI49:
 634              	 .cfi_def_cfa_offset 32
 635 0004 02AF     	 add r7,sp,#8
 636              	.LCFI50:
 637              	 .cfi_def_cfa 7,24
  85:../main.c     ****   DAVE_STATUS_t status;
  86:../main.c     **** 
  87:../main.c     ****   status = DAVE_Init();           /* Initialization of DAVE APPs  */
 638              	 .loc 3 87 0
 639 0006 FFF7FEFF 	 bl DAVE_Init
 640 000a 0346     	 mov r3,r0
 641 000c FB71     	 strb r3,[r7,#7]
  88:../main.c     **** 
  89:../main.c     ****   if (status != DAVE_STATUS_SUCCESS)
 642              	 .loc 3 89 0
 643 000e FB79     	 ldrb r3,[r7,#7]
 644 0010 002B     	 cmp r3,#0
 645 0012 00D0     	 beq .L35
 646              	.L36:
  90:../main.c     ****   {
  91:../main.c     ****     /* Placeholder for error handler code. The while loop below can be replaced with an user error 
  92:../main.c     ****     XMC_DEBUG("DAVE APPs initialization failed\n");
  93:../main.c     **** 
  94:../main.c     ****     while(1U)
  95:../main.c     ****     {
  96:../main.c     **** 
  97:../main.c     ****     }
 647              	 .loc 3 97 0 discriminator 1
 648 0014 FEE7     	 b .L36
 649              	.L35:
  98:../main.c     ****   }
  99:../main.c     **** 
 100:../main.c     ****   int id = SYSTIMER_CreateTimer(1000, SYSTIMER_MODE_PERIODIC, callback, NULL);
 650              	 .loc 3 100 0
 651 0016 4FF47A70 	 mov r0,#1000
 652 001a 0121     	 movs r1,#1
 653 001c 5A4A     	 ldr r2,.L42+8
 654 001e 0023     	 movs r3,#0
 655 0020 FFF7FEFF 	 bl SYSTIMER_CreateTimer
 656 0024 0346     	 mov r3,r0
 657 0026 3B60     	 str r3,[r7]
 101:../main.c     ****   SYSTIMER_StartTimer(id);
 658              	 .loc 3 101 0
 659 0028 3B68     	 ldr r3,[r7]
 660 002a 1846     	 mov r0,r3
 661 002c FFF7FEFF 	 bl SYSTIMER_StartTimer
 662              	.L41:
 663              	.LBB2:
 102:../main.c     **** 
 103:../main.c     ****   /* Placeholder for user application code. The while loop below can be replaced with user applicat
 104:../main.c     ****   while(1U)
 105:../main.c     ****   {
 106:../main.c     ****   	if(isFlag) angle++;
 664              	 .loc 3 106 0
 665 0030 564B     	 ldr r3,.L42+12
 666 0032 1B78     	 ldrb r3,[r3]
 667 0034 002B     	 cmp r3,#0
 668 0036 04D0     	 beq .L37
 669              	 .loc 3 106 0 is_stmt 0 discriminator 1
 670 0038 554B     	 ldr r3,.L42+16
 671 003a 1B68     	 ldr r3,[r3]
 672 003c 0133     	 adds r3,r3,#1
 673 003e 544A     	 ldr r2,.L42+16
 674 0040 1360     	 str r3,[r2]
 675              	.L37:
 107:../main.c     ****   	if(angle >= 360) angle = 0;
 676              	 .loc 3 107 0 is_stmt 1
 677 0042 534B     	 ldr r3,.L42+16
 678 0044 1B68     	 ldr r3,[r3]
 679 0046 B3F5B47F 	 cmp r3,#360
 680 004a 02DB     	 blt .L38
 681              	 .loc 3 107 0 is_stmt 0 discriminator 1
 682 004c 504B     	 ldr r3,.L42+16
 683 004e 0022     	 movs r2,#0
 684 0050 1A60     	 str r2,[r3]
 685              	.L38:
 108:../main.c     ****   	sinValue = sin(angle * 3.14 / 180);
 686              	 .loc 3 108 0 is_stmt 1
 687 0052 4F4B     	 ldr r3,.L42+16
 688 0054 1B68     	 ldr r3,[r3]
 689 0056 1846     	 mov r0,r3
 690 0058 FFF7FEFF 	 bl __aeabi_i2d
 691 005c 0246     	 mov r2,r0
 692 005e 0B46     	 mov r3,r1
 693 0060 1046     	 mov r0,r2
 694 0062 1946     	 mov r1,r3
 695 0064 46A3     	 adr r3,.L42
 696 0066 D3E90023 	 ldrd r2,[r3]
 697 006a FFF7FEFF 	 bl __aeabi_dmul
 698 006e 0246     	 mov r2,r0
 699 0070 0B46     	 mov r3,r1
 700 0072 1046     	 mov r0,r2
 701 0074 1946     	 mov r1,r3
 702 0076 4FF00002 	 mov r2,#0
 703 007a 464B     	 ldr r3,.L42+20
 704 007c FFF7FEFF 	 bl __aeabi_ddiv
 705 0080 0246     	 mov r2,r0
 706 0082 0B46     	 mov r3,r1
 707 0084 1046     	 mov r0,r2
 708 0086 1946     	 mov r1,r3
 709 0088 FFF7FEFF 	 bl sin
 710 008c 0246     	 mov r2,r0
 711 008e 0B46     	 mov r3,r1
 712 0090 1046     	 mov r0,r2
 713 0092 1946     	 mov r1,r3
 714 0094 FFF7FEFF 	 bl __aeabi_d2f
 715 0098 0246     	 mov r2,r0
 716 009a 3F4B     	 ldr r3,.L42+24
 717 009c 1A60     	 str r2,[r3]
 109:../main.c     ****   	cosValue = cos(angle * 3.14 / 180);
 718              	 .loc 3 109 0
 719 009e 3C4B     	 ldr r3,.L42+16
 720 00a0 1B68     	 ldr r3,[r3]
 721 00a2 1846     	 mov r0,r3
 722 00a4 FFF7FEFF 	 bl __aeabi_i2d
 723 00a8 0246     	 mov r2,r0
 724 00aa 0B46     	 mov r3,r1
 725 00ac 1046     	 mov r0,r2
 726 00ae 1946     	 mov r1,r3
 727 00b0 33A3     	 adr r3,.L42
 728 00b2 D3E90023 	 ldrd r2,[r3]
 729 00b6 FFF7FEFF 	 bl __aeabi_dmul
 730 00ba 0246     	 mov r2,r0
 731 00bc 0B46     	 mov r3,r1
 732 00be 1046     	 mov r0,r2
 733 00c0 1946     	 mov r1,r3
 734 00c2 4FF00002 	 mov r2,#0
 735 00c6 334B     	 ldr r3,.L42+20
 736 00c8 FFF7FEFF 	 bl __aeabi_ddiv
 737 00cc 0246     	 mov r2,r0
 738 00ce 0B46     	 mov r3,r1
 739 00d0 1046     	 mov r0,r2
 740 00d2 1946     	 mov r1,r3
 741 00d4 FFF7FEFF 	 bl cos
 742 00d8 0246     	 mov r2,r0
 743 00da 0B46     	 mov r3,r1
 744 00dc 1046     	 mov r0,r2
 745 00de 1946     	 mov r1,r3
 746 00e0 FFF7FEFF 	 bl __aeabi_d2f
 747 00e4 0246     	 mov r2,r0
 748 00e6 2D4B     	 ldr r3,.L42+28
 749 00e8 1A60     	 str r2,[r3]
 110:../main.c     ****   	printf("%f, %f\n", sinValue, cosValue);
 750              	 .loc 3 110 0
 751 00ea 2B4B     	 ldr r3,.L42+24
 752 00ec 1B68     	 ldr r3,[r3]
 753 00ee 1846     	 mov r0,r3
 754 00f0 FFF7FEFF 	 bl __aeabi_f2d
 755 00f4 0446     	 mov r4,r0
 756 00f6 0D46     	 mov r5,r1
 757 00f8 284B     	 ldr r3,.L42+28
 758 00fa 1B68     	 ldr r3,[r3]
 759 00fc 1846     	 mov r0,r3
 760 00fe FFF7FEFF 	 bl __aeabi_f2d
 761 0102 0246     	 mov r2,r0
 762 0104 0B46     	 mov r3,r1
 763 0106 CDE90023 	 strd r2,[sp]
 764 010a 2548     	 ldr r0,.L42+32
 765 010c 2246     	 mov r2,r4
 766 010e 2B46     	 mov r3,r5
 767 0110 FFF7FEFF 	 bl printf
 111:../main.c     ****   	msg = getMessage();
 768              	 .loc 3 111 0
 769 0114 FFF7FEFF 	 bl getMessage
 770 0118 0246     	 mov r2,r0
 771 011a 224B     	 ldr r3,.L42+36
 772 011c 1A60     	 str r2,[r3]
 112:../main.c     ****   	if(strlen(msg) >= 5)
 773              	 .loc 3 112 0
 774 011e 214B     	 ldr r3,.L42+36
 775 0120 1B68     	 ldr r3,[r3]
 776 0122 1846     	 mov r0,r3
 777 0124 FFF7FEFF 	 bl strlen
 778 0128 0346     	 mov r3,r0
 779 012a 042B     	 cmp r3,#4
 780 012c 0CD9     	 bls .L39
 113:../main.c     **** 			if(strncmp(msg, "START", 5) == 0) {
 781              	 .loc 3 113 0
 782 012e 1D4B     	 ldr r3,.L42+36
 783 0130 1B68     	 ldr r3,[r3]
 784 0132 1846     	 mov r0,r3
 785 0134 1C49     	 ldr r1,.L42+40
 786 0136 0522     	 movs r2,#5
 787 0138 FFF7FEFF 	 bl strncmp
 788 013c 0346     	 mov r3,r0
 789 013e 002B     	 cmp r3,#0
 790 0140 02D1     	 bne .L39
 114:../main.c     **** 				isFlag = true;
 791              	 .loc 3 114 0
 792 0142 124B     	 ldr r3,.L42+12
 793 0144 0122     	 movs r2,#1
 794 0146 1A70     	 strb r2,[r3]
 795              	.L39:
 115:../main.c     **** 			}
 116:../main.c     ****   	if(strlen(msg) >= 4)
 796              	 .loc 3 116 0
 797 0148 164B     	 ldr r3,.L42+36
 798 014a 1B68     	 ldr r3,[r3]
 799 014c 1846     	 mov r0,r3
 800 014e FFF7FEFF 	 bl strlen
 801 0152 0346     	 mov r3,r0
 802 0154 032B     	 cmp r3,#3
 803 0156 0CD9     	 bls .L40
 117:../main.c     ****   	if(strncmp(msg, "STOP", 4) == 0) {
 804              	 .loc 3 117 0
 805 0158 124B     	 ldr r3,.L42+36
 806 015a 1B68     	 ldr r3,[r3]
 807 015c 1846     	 mov r0,r3
 808 015e 1349     	 ldr r1,.L42+44
 809 0160 0422     	 movs r2,#4
 810 0162 FFF7FEFF 	 bl strncmp
 811 0166 0346     	 mov r3,r0
 812 0168 002B     	 cmp r3,#0
 813 016a 02D1     	 bne .L40
 118:../main.c     ****   		isFlag = false;
 814              	 .loc 3 118 0
 815 016c 074B     	 ldr r3,.L42+12
 816 016e 0022     	 movs r2,#0
 817 0170 1A70     	 strb r2,[r3]
 818              	.L40:
 119:../main.c     ****   	}
 120:../main.c     ****   	delay(10);
 819              	 .loc 3 120 0
 820 0172 0A20     	 movs r0,#10
 821 0174 FFF7FEFF 	 bl delay
 822              	.LBE2:
 121:../main.c     ****   }
 823              	 .loc 3 121 0
 824 0178 5AE7     	 b .L41
 825              	.L43:
 826 017a 00BFAFF3 	 .align 3
 826      0080
 827              	.L42:
 828 0180 1F85EB51 	 .word 1374389535
 829 0184 B81E0940 	 .word 1074339512
 830 0188 00000000 	 .word callback
 831 018c 00000000 	 .word isFlag
 832 0190 00000000 	 .word angle
 833 0194 00806640 	 .word 1080459264
 834 0198 00000000 	 .word sinValue
 835 019c 00000000 	 .word cosValue
 836 01a0 00000000 	 .word .LC0
 837 01a4 00000000 	 .word msg
 838 01a8 08000000 	 .word .LC1
 839 01ac 10000000 	 .word .LC2
 840              	 .cfi_endproc
 841              	.LFE300:
 843              	 .section .bss.result.9345,"aw",%nobits
 844              	 .align 2
 847              	result.9345:
 848 0000 00000000 	 .space 100
 848      00000000 
 848      00000000 
 848      00000000 
 848      00000000 
 849              	 .section .bss.pos.9346,"aw",%nobits
 850              	 .align 2
 853              	pos.9346:
 854 0000 00000000 	 .space 4
 855              	 .text
 856              	.Letext0:
 857              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 858              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 859              	 .file 6 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc/xmc_gpio.h"
 860              	 .file 7 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc/xmc4_gpio.h"
 861              	 .file 8 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/XMCLib/inc/xmc_usic.h"
 862              	 .file 9 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/SYSTIMER/systimer.h"
 863              	 .file 10 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/DAVE.h"
 864              	 .file 11 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/CMSIS/Include/cmsis_gcc.h"
 865              	 .file 12 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/CMSIS/Include/core_cm4.h"
 866              	 .file 13 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 867              	 .file 14 "C:/Infineon/Tools/DAVE IDE/4.5.0.202105191637/eclipse/workspace/UART/Dave/Generated/UART/uart_extern.h"
 868              	 .file 15 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
    {standard input}:20     .text.XMC_UART_CH_ClearStatusFlag:00000000 $t
    {standard input}:24     .text.XMC_UART_CH_ClearStatusFlag:00000000 XMC_UART_CH_ClearStatusFlag
    {standard input}:65     .text.UART_GetReceivedWord:00000000 $t
    {standard input}:69     .text.UART_GetReceivedWord:00000000 UART_GetReceivedWord
    {standard input}:109    .text.UART_ClearFlag:00000000 $t
    {standard input}:113    .text.UART_ClearFlag:00000000 UART_ClearFlag
                            *COM*:000000ff UartRxBuffer
                            *COM*:00000004 UartRxBufferGp
                            *COM*:00000004 UartRxBufferPp
    {standard input}:157    .bss.TxEnd:00000000 TxEnd
    {standard input}:158    .bss.TxEnd:00000000 $d
    {standard input}:160    .text._write:00000000 $t
    {standard input}:165    .text._write:00000000 _write
    {standard input}:207    .text._write:00000024 $d
    {standard input}:212    .text.USIC0_5_IRQHandler:00000000 $t
    {standard input}:217    .text.USIC0_5_IRQHandler:00000000 USIC0_5_IRQHandler
    {standard input}:248    .text.USIC0_5_IRQHandler:00000014 $d
    {standard input}:253    .text.USIC0_3_IRQHandler:00000000 $t
    {standard input}:258    .text.USIC0_3_IRQHandler:00000000 USIC0_3_IRQHandler
    {standard input}:310    .text.USIC0_3_IRQHandler:00000048 $d
    {standard input}:318    .text.getChar:00000000 $t
    {standard input}:323    .text.getChar:00000000 getChar
    {standard input}:398    .text.getChar:00000058 $d
    {standard input}:406    .text.getMessage:00000000 $t
    {standard input}:411    .text.getMessage:00000000 getMessage
    {standard input}:473    .text.getMessage:00000044 $d
    {standard input}:847    .bss.result.9345:00000000 result.9345
    {standard input}:853    .bss.pos.9346:00000000 pos.9346
                            *COM*:00000004 delay1000
    {standard input}:480    .text.callback:00000000 $t
    {standard input}:485    .text.callback:00000000 callback
    {standard input}:524    .text.callback:00000020 $d
    {standard input}:529    .text.delay:00000000 $t
    {standard input}:534    .text.delay:00000000 delay
    {standard input}:580    .text.delay:00000024 $d
    {standard input}:587    .bss.isFlag:00000000 isFlag
    {standard input}:588    .bss.isFlag:00000000 $d
    {standard input}:590    .bss.angle:00000000 $d
    {standard input}:593    .bss.angle:00000000 angle
                            *COM*:00000004 sinValue
                            *COM*:00000004 cosValue
                            *COM*:00000004 msg
    {standard input}:604    .rodata:00000000 $d
    {standard input}:614    .text.main:00000000 $t
    {standard input}:619    .text.main:00000000 main
    {standard input}:828    .text.main:00000180 $d
    {standard input}:844    .bss.result.9345:00000000 $d
    {standard input}:850    .bss.pos.9346:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
XMC_UART_CH_GetReceivedData
UART_Transmit
UART_0
memset
__aeabi_i2d
__aeabi_dmul
__aeabi_ddiv
__aeabi_d2f
__aeabi_f2d
DAVE_Init
SYSTIMER_CreateTimer
SYSTIMER_StartTimer
sin
cos
printf
strlen
strncmp
