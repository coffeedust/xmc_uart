
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006d58  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .eh_frame     00000000  08006d58  0c006d58  0000ed58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00018000  2**0
                  ALLOC
  3 .data         000000a8  1ffe8800  0c006d58  00010800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000002e8  1ffe88a8  0c006e00  000108a8  2**2
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  00017fc0  2**2
                  ALLOC
  6 .stab         00000084  00000000  00000000  000108a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      00000117  00000000  00000000  0001092c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000918  00000000  00000000  00010a48  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000bd68  00000000  00000000  00011360  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001f61  00000000  00000000  0001d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000044dd  00000000  00000000  0001f029  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003388  00000000  00000000  00023508  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005cee  00000000  00000000  00026890  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b8a  00000000  00000000  0002c57e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  00031108  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 00000e5a  00000000  00000000  000318e0  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 99 02 00 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	dd 1b 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	49 22 00 08 99 02 00 08 31 22 00 08 99 02 00 08     I"......1"......
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c006d58 	.word	0x0c006d58
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	000000a8 	.word	0x000000a8
 8000254:	0c006d58 	.word	0x0c006d58
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1ffe88a8 	.word	0x1ffe88a8
 8000264:	000002e8 	.word	0x000002e8
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	0800029d 	.word	0x0800029d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08004211 	.word	0x08004211
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080023a1 	.word	0x080023a1

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 800029c:	b598      	push	{r3, r4, r7, lr}
 800029e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 80002a0:	4a05      	ldr	r2, [pc, #20]	; (80002b8 <SystemInit+0x1c>)
 80002a2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80002a6:	4614      	mov	r4, r2
 80002a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 80002ae:	f001 feaf 	bl	8002010 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 80002b2:	f001 ff17 	bl	80020e4 <SystemCoreClockSetup>
}
 80002b6:	bd98      	pop	{r3, r4, r7, pc}
 80002b8:	2003ffc4 	.word	0x2003ffc4

080002bc <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 80002c2:	4b2f      	ldr	r3, [pc, #188]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d03e      	beq.n	800034c <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 80002ce:	4b2d      	ldr	r3, [pc, #180]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002d0:	68db      	ldr	r3, [r3, #12]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d002      	beq.n	80002e0 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 80002da:	4b2b      	ldr	r3, [pc, #172]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 80002dc:	60fb      	str	r3, [r7, #12]
 80002de:	e002      	b.n	80002e6 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 80002e0:	f001 fef6 	bl	80020d0 <OSCHP_GetFrequency>
 80002e4:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 80002e6:	4b27      	ldr	r3, [pc, #156]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f003 0304 	and.w	r3, r3, #4
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d020      	beq.n	8000334 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 80002f2:	4b24      	ldr	r3, [pc, #144]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80002fa:	0e1b      	lsrs	r3, r3, #24
 80002fc:	3301      	adds	r3, #1
 80002fe:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8000300:	4b20      	ldr	r3, [pc, #128]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8000308:	0a1b      	lsrs	r3, r3, #8
 800030a:	3301      	adds	r3, #1
 800030c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 800030e:	4b1d      	ldr	r3, [pc, #116]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8000316:	0c1b      	lsrs	r3, r3, #16
 8000318:	3301      	adds	r3, #1
 800031a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	683a      	ldr	r2, [r7, #0]
 8000320:	fb02 f303 	mul.w	r3, r2, r3
 8000324:	68fa      	ldr	r2, [r7, #12]
 8000326:	fbb2 f3f3 	udiv	r3, r2, r3
 800032a:	687a      	ldr	r2, [r7, #4]
 800032c:	fb02 f303 	mul.w	r3, r2, r3
 8000330:	60fb      	str	r3, [r7, #12]
 8000332:	e00d      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8000334:	4b13      	ldr	r3, [pc, #76]	; (8000384 <SystemCoreClockUpdate+0xc8>)
 8000336:	689b      	ldr	r3, [r3, #8]
 8000338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800033c:	3301      	adds	r3, #1
 800033e:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8000340:	68fa      	ldr	r2, [r7, #12]
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	fbb2 f3f3 	udiv	r3, r2, r3
 8000348:	60fb      	str	r3, [r7, #12]
 800034a:	e001      	b.n	8000350 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 800034c:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <SystemCoreClockUpdate+0xcc>)
 800034e:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	3301      	adds	r3, #1
 8000358:	68fa      	ldr	r2, [r7, #12]
 800035a:	fbb2 f3f3 	udiv	r3, r2, r3
 800035e:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <SystemCoreClockUpdate+0xc4>)
 8000362:	691b      	ldr	r3, [r3, #16]
 8000364:	f003 0301 	and.w	r3, r3, #1
 8000368:	3301      	adds	r3, #1
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000370:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8000372:	4a06      	ldr	r2, [pc, #24]	; (800038c <SystemCoreClockUpdate+0xd0>)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	50004600 	.word	0x50004600
 8000384:	50004710 	.word	0x50004710
 8000388:	016e3600 	.word	0x016e3600
 800038c:	2003ffc0 	.word	0x2003ffc0

08000390 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8000390:	b480      	push	{r7}
 8000392:	b085      	sub	sp, #20
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	460b      	mov	r3, r1
 800039a:	607a      	str	r2, [r7, #4]
 800039c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 800039e:	7afb      	ldrb	r3, [r7, #11]
 80003a0:	089b      	lsrs	r3, r3, #2
 80003a2:	b2db      	uxtb	r3, r3
 80003a4:	4618      	mov	r0, r3
 80003a6:	7afb      	ldrb	r3, [r7, #11]
 80003a8:	089b      	lsrs	r3, r3, #2
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	461a      	mov	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	3204      	adds	r2, #4
 80003b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80003b6:	7afb      	ldrb	r3, [r7, #11]
 80003b8:	f003 0303 	and.w	r3, r3, #3
 80003bc:	00db      	lsls	r3, r3, #3
 80003be:	4619      	mov	r1, r3
 80003c0:	23f8      	movs	r3, #248	; 0xf8
 80003c2:	408b      	lsls	r3, r1
 80003c4:	43db      	mvns	r3, r3
 80003c6:	ea02 0103 	and.w	r1, r2, r3
 80003ca:	68fb      	ldr	r3, [r7, #12]
 80003cc:	1d02      	adds	r2, r0, #4
 80003ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80003d2:	68fb      	ldr	r3, [r7, #12]
 80003d4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80003d6:	7afb      	ldrb	r3, [r7, #11]
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4619      	mov	r1, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	408b      	lsls	r3, r1
 80003e0:	43db      	mvns	r3, r3
 80003e2:	401a      	ands	r2, r3
 80003e4:	68fb      	ldr	r3, [r7, #12]
 80003e6:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	4a3a      	ldr	r2, [pc, #232]	; (80004d4 <XMC_GPIO_Init+0x144>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d003      	beq.n	80003f8 <XMC_GPIO_Init+0x68>
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	4a39      	ldr	r2, [pc, #228]	; (80004d8 <XMC_GPIO_Init+0x148>)
 80003f4:	4293      	cmp	r3, r2
 80003f6:	d10a      	bne.n	800040e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	2101      	movs	r1, #1
 8000400:	fa01 f303 	lsl.w	r3, r1, r3
 8000404:	43db      	mvns	r3, r3
 8000406:	401a      	ands	r2, r3
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	661a      	str	r2, [r3, #96]	; 0x60
 800040c:	e042      	b.n	8000494 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	b2db      	uxtb	r3, r3
 8000414:	b25b      	sxtb	r3, r3
 8000416:	2b00      	cmp	r3, #0
 8000418:	da3c      	bge.n	8000494 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	685a      	ldr	r2, [r3, #4]
 800041e:	7afb      	ldrb	r3, [r7, #11]
 8000420:	409a      	lsls	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8000426:	7afb      	ldrb	r3, [r7, #11]
 8000428:	08db      	lsrs	r3, r3, #3
 800042a:	b2db      	uxtb	r3, r3
 800042c:	4618      	mov	r0, r3
 800042e:	7afb      	ldrb	r3, [r7, #11]
 8000430:	08db      	lsrs	r3, r3, #3
 8000432:	b2db      	uxtb	r3, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	3210      	adds	r2, #16
 800043a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800043e:	7afb      	ldrb	r3, [r7, #11]
 8000440:	f003 0307 	and.w	r3, r3, #7
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4619      	mov	r1, r3
 8000448:	2307      	movs	r3, #7
 800044a:	408b      	lsls	r3, r1
 800044c:	43db      	mvns	r3, r3
 800044e:	ea02 0103 	and.w	r1, r2, r3
 8000452:	68fb      	ldr	r3, [r7, #12]
 8000454:	f100 0210 	add.w	r2, r0, #16
 8000458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 800045c:	7afb      	ldrb	r3, [r7, #11]
 800045e:	08db      	lsrs	r3, r3, #3
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	7afb      	ldrb	r3, [r7, #11]
 8000466:	08db      	lsrs	r3, r3, #3
 8000468:	b2db      	uxtb	r3, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	3210      	adds	r2, #16
 8000470:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	7a1b      	ldrb	r3, [r3, #8]
 8000478:	4619      	mov	r1, r3
 800047a:	7afb      	ldrb	r3, [r7, #11]
 800047c:	f003 0307 	and.w	r3, r3, #7
 8000480:	009b      	lsls	r3, r3, #2
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	ea42 0103 	orr.w	r1, r2, r3
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f100 0210 	add.w	r2, r0, #16
 8000490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8000494:	7afb      	ldrb	r3, [r7, #11]
 8000496:	089b      	lsrs	r3, r3, #2
 8000498:	b2db      	uxtb	r3, r3
 800049a:	4618      	mov	r0, r3
 800049c:	7afb      	ldrb	r3, [r7, #11]
 800049e:	089b      	lsrs	r3, r3, #2
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	461a      	mov	r2, r3
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3204      	adds	r2, #4
 80004a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	4619      	mov	r1, r3
 80004b2:	7afb      	ldrb	r3, [r7, #11]
 80004b4:	f003 0303 	and.w	r3, r3, #3
 80004b8:	00db      	lsls	r3, r3, #3
 80004ba:	fa01 f303 	lsl.w	r3, r1, r3
 80004be:	ea42 0103 	orr.w	r1, r2, r3
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	1d02      	adds	r2, r0, #4
 80004c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80004ca:	3714      	adds	r7, #20
 80004cc:	46bd      	mov	sp, r7
 80004ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d2:	4770      	bx	lr
 80004d4:	48028e00 	.word	0x48028e00
 80004d8:	48028f00 	.word	0x48028f00

080004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 80004e2:	681b      	ldr	r3, [r3, #0]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	2003ffc0 	.word	0x2003ffc0

080004f4 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80004f8:	4b03      	ldr	r3, [pc, #12]	; (8000508 <XMC_SCU_GetMirrorStatus+0x14>)
 80004fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80004fe:	4618      	mov	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	50004000 	.word	0x50004000

0800050c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8000514:	f7ff fed2 	bl	80002bc <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8000518:	4b0b      	ldr	r3, [pc, #44]	; (8000548 <XMC_SCU_lDelay+0x3c>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <XMC_SCU_lDelay+0x40>)
 800051e:	fba2 2303 	umull	r2, r3, r2, r3
 8000522:	0c9a      	lsrs	r2, r3, #18
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	fb02 f303 	mul.w	r3, r2, r3
 800052a:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 800052c:	2300      	movs	r3, #0
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	e003      	b.n	800053a <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 8000532:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	3301      	adds	r3, #1
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	429a      	cmp	r2, r3
 8000540:	d3f7      	bcc.n	8000532 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 8000542:	3710      	adds	r7, #16
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	2003ffc0 	.word	0x2003ffc0
 800054c:	431bde83 	.word	0x431bde83

08000550 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 8000556:	685b      	ldr	r3, [r3, #4]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	50004074 	.word	0x50004074

08000568 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8000570:	4a03      	ldr	r2, [pc, #12]	; (8000580 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	370c      	adds	r7, #12
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	50004074 	.word	0x50004074

08000584 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b084      	sub	sp, #16
 8000588:	af02      	add	r7, sp, #8
 800058a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 800058c:	2000      	movs	r0, #0
 800058e:	f000 f8c5 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8000592:	f000 fab7 	bl	8000b04 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	79db      	ldrb	r3, [r3, #7]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d00a      	beq.n	80005b4 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800059e:	f000 faef 	bl	8000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 80005a2:	bf00      	nop
 80005a4:	f000 fada 	bl	8000b5c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 80005a8:	4603      	mov	r3, r0
 80005aa:	f083 0301 	eor.w	r3, r3, #1
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f7      	bne.n	80005a4 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	7a5b      	ldrb	r3, [r3, #9]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f929 	bl	8000810 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff98 	bl	80004f4 <XMC_SCU_GetMirrorStatus>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	7a1b      	ldrb	r3, [r3, #8]
 80005ce:	4618      	mov	r0, r3
 80005d0:	f000 fa72 	bl	8000ab8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	7c1b      	ldrb	r3, [r3, #16]
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 f937 	bl	800084c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	7c5b      	ldrb	r3, [r3, #17]
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 f95a 	bl	800089c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	7c9b      	ldrb	r3, [r3, #18]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f941 	bl	8000874 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	7cdb      	ldrb	r3, [r3, #19]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 f964 	bl	80008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	799b      	ldrb	r3, [r3, #6]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00a      	beq.n	800061a <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 8000604:	f000 faf4 	bl	8000bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 8000608:	bf00      	nop
 800060a:	f000 fb19 	bl	8000c40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 800060e:	4603      	mov	r3, r0
 8000610:	f083 0301 	eor.w	r3, r3, #1
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d1f7      	bne.n	800060a <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	78db      	ldrb	r3, [r3, #3]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d109      	bne.n	8000636 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	799b      	ldrb	r3, [r3, #6]
 8000626:	f083 0301 	eor.w	r3, r3, #1
 800062a:	b2db      	uxtb	r3, r3
 800062c:	2b00      	cmp	r3, #0
 800062e:	d017      	beq.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 8000630:	f000 fb2a 	bl	8000c88 <XMC_SCU_CLOCK_DisableSystemPll>
 8000634:	e014      	b.n	8000660 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 8000636:	f000 fb17 	bl	8000c68 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8899      	ldrh	r1, [r3, #4]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000646:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800064c:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8000652:	9300      	str	r3, [sp, #0]
 8000654:	4608      	mov	r0, r1
 8000656:	4611      	mov	r1, r2
 8000658:	462a      	mov	r2, r5
 800065a:	4623      	mov	r3, r4
 800065c:	f000 fb24 	bl	8000ca8 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000668:	d103      	bne.n	8000672 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800066a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800066e:	f000 f855 	bl	800071c <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8000672:	f7ff fe23 	bl	80002bc <SystemCoreClockUpdate>
}
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bdb0      	pop	{r4, r5, r7, pc}

0800067c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	0f1b      	lsrs	r3, r3, #28
 8000688:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000690:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	4613      	mov	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	4413      	add	r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	461a      	mov	r2, r3
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 80006a0:	4413      	add	r3, r2
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	601a      	str	r2, [r3, #0]
}
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	50004414 	.word	0x50004414

080006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	0f1b      	lsrs	r3, r3, #28
 80006c0:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80006c8:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	461a      	mov	r2, r3
 80006d6:	4b08      	ldr	r3, [pc, #32]	; (80006f8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80006d8:	4413      	add	r3, r2
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4013      	ands	r3, r2
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3714      	adds	r7, #20
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	5000440c 	.word	0x5000440c

080006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 8000700:	f7ff feec 	bl	80004dc <XMC_SCU_CLOCK_GetCpuClockFrequency>
 8000704:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 8000708:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 8000712:	4618      	mov	r0, r3
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	50004600 	.word	0x50004600

0800071c <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8000724:	4906      	ldr	r1, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	4313      	orrs	r3, r2
 8000732:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8000734:	370c      	adds	r7, #12
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	50004600 	.word	0x50004600

08000744 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800074c:	4906      	ldr	r1, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8000750:	699b      	ldr	r3, [r3, #24]
 8000752:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4313      	orrs	r3, r2
 800075a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000764:	4770      	bx	lr
 8000766:	bf00      	nop
 8000768:	50004600 	.word	0x50004600

0800076c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8000774:	4906      	ldr	r1, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000776:	4b06      	ldr	r3, [pc, #24]	; (8000790 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	4313      	orrs	r3, r2
 8000782:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	50004600 	.word	0x50004600

08000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800079e:	88fb      	ldrh	r3, [r7, #6]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d108      	bne.n	80007b6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007a4:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a6:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007a8:	68db      	ldr	r3, [r3, #12]
 80007aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007ae:	f023 0301 	bic.w	r3, r3, #1
 80007b2:	60d3      	str	r3, [r2, #12]
 80007b4:	e007      	b.n	80007c6 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 80007b6:	4a06      	ldr	r2, [pc, #24]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	60d3      	str	r3, [r2, #12]
  }
}
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	50004710 	.word	0x50004710

080007d4 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80007de:	bf00      	nop
 80007e0:	4b09      	ldr	r3, [pc, #36]	; (8000808 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80007e2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80007e6:	f003 0308 	and.w	r3, r3, #8
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f8      	bne.n	80007e0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007ee:	4907      	ldr	r1, [pc, #28]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80007f2:	68db      	ldr	r3, [r3, #12]
 80007f4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80007fa:	4313      	orrs	r3, r2
 80007fc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	50004000 	.word	0x50004000
 800080c:	50004300 	.word	0x50004300

08000810 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	4603      	mov	r3, r0
 8000818:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800081a:	bf00      	nop
 800081c:	4b09      	ldr	r3, [pc, #36]	; (8000844 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 800081e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f8      	bne.n	800081c <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 800082a:	4907      	ldr	r1, [pc, #28]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800082e:	68db      	ldr	r3, [r3, #12]
 8000830:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8000834:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8000836:	4313      	orrs	r3, r2
 8000838:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	50004000 	.word	0x50004000
 8000848:	50004300 	.word	0x50004300

0800084c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000854:	4906      	ldr	r1, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8000862:	4313      	orrs	r3, r2
 8000864:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	50004600 	.word	0x50004600

08000874 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800087c:	4906      	ldr	r1, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800087e:	4b06      	ldr	r3, [pc, #24]	; (8000898 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8000880:	6a1b      	ldr	r3, [r3, #32]
 8000882:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800088a:	4313      	orrs	r3, r2
 800088c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	50004600 	.word	0x50004600

0800089c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008a4:	4906      	ldr	r1, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a6:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 80008b2:	4313      	orrs	r3, r2
 80008b4:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	50004600 	.word	0x50004600

080008c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008cc:	4906      	ldr	r1, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80008d0:	695b      	ldr	r3, [r3, #20]
 80008d2:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80008da:	4313      	orrs	r3, r2
 80008dc:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	50004600 	.word	0x50004600

080008ec <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f6:	4b06      	ldr	r3, [pc, #24]	; (8000910 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 8000902:	4313      	orrs	r3, r2
 8000904:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr
 8000910:	50004600 	.word	0x50004600

08000914 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 8000920:	69db      	ldr	r3, [r3, #28]
 8000922:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 800092a:	4313      	orrs	r3, r2
 800092c:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	50004600 	.word	0x50004600

0800093c <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000944:	4906      	ldr	r1, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8000948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800094a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8000952:	4313      	orrs	r3, r2
 8000954:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	50004600 	.word	0x50004600

08000964 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	0f1b      	lsrs	r3, r3, #28
 8000970:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000978:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4613      	mov	r3, r2
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	4413      	add	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	461a      	mov	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8000988:	4413      	add	r3, r2
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	601a      	str	r2, [r3, #0]
}
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	50004648 	.word	0x50004648

0800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	0f1b      	lsrs	r3, r3, #28
 80009a8:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80009b0:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80009b2:	68fa      	ldr	r2, [r7, #12]
 80009b4:	4613      	mov	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	4413      	add	r3, r2
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	461a      	mov	r2, r3
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80009c0:	4413      	add	r3, r2
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68bb      	ldr	r3, [r7, #8]
 80009c6:	4013      	ands	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	bf14      	ite	ne
 80009cc:	2301      	movne	r3, #1
 80009ce:	2300      	moveq	r3, #0
 80009d0:	b2db      	uxtb	r3, r3
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	50004640 	.word	0x50004640

080009e4 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f2:	f023 0302 	bic.w	r3, r3, #2
 80009f6:	6153      	str	r3, [r2, #20]
}
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	50004710 	.word	0x50004710

08000a04 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 8000a0c:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a0e:	4a28      	ldr	r2, [pc, #160]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8000a1a:	bf00      	nop
 8000a1c:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a1e:	691b      	ldr	r3, [r3, #16]
 8000a20:	f003 0301 	and.w	r3, r3, #1
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0f9      	beq.n	8000a1c <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a28:	4a21      	ldr	r2, [pc, #132]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a2a:	4b21      	ldr	r3, [pc, #132]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a2c:	695b      	ldr	r3, [r3, #20]
 8000a2e:	f043 0310 	orr.w	r3, r3, #16
 8000a32:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a34:	491e      	ldr	r1, [pc, #120]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	3b01      	subs	r3, #1
 8000a3a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8000a42:	4313      	orrs	r3, r2
 8000a44:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a46:	4a1a      	ldr	r2, [pc, #104]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a4a:	695b      	ldr	r3, [r3, #20]
 8000a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a50:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f023 0310 	bic.w	r3, r3, #16
 8000a5c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8000a5e:	4a14      	ldr	r2, [pc, #80]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a68:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8000a6a:	bf00      	nop
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a6e:	691b      	ldr	r3, [r3, #16]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0f9      	beq.n	8000a6c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a7c:	695b      	ldr	r3, [r3, #20]
 8000a7e:	f023 0301 	bic.w	r3, r3, #1
 8000a82:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8000a84:	bf00      	nop
 8000a86:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a88:	691b      	ldr	r3, [r3, #16]
 8000a8a:	f003 0301 	and.w	r3, r3, #1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d1f9      	bne.n	8000a86 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8000a92:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a9c:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8000aa0:	2208      	movs	r2, #8
 8000aa2:	60da      	str	r2, [r3, #12]
}
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	50004710 	.word	0x50004710
 8000ab4:	50004160 	.word	0x50004160

08000ab8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000acc:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 8000ace:	79fb      	ldrb	r3, [r7, #7]
 8000ad0:	2b01      	cmp	r3, #1
 8000ad2:	d10e      	bne.n	8000af2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000ade:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 8000ae0:	2064      	movs	r0, #100	; 0x64
 8000ae2:	f7ff fd13 	bl	800050c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 8000ae6:	4a06      	ldr	r2, [pc, #24]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000af0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 8000af2:	2064      	movs	r0, #100	; 0x64
 8000af4:	f7ff fd0a 	bl	800050c <XMC_SCU_lDelay>
}
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	50004710 	.word	0x50004710

08000b04 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b08:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d109      	bne.n	8000b28 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8000b1a:	bf00      	nop
 8000b1c:	4b0d      	ldr	r3, [pc, #52]	; (8000b54 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0301 	and.w	r3, r3, #1
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d0f9      	beq.n	8000b1c <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8000b28:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00a      	beq.n	8000b4a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8000b34:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8000b3c:	bf00      	nop
 8000b3e:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1f9      	bne.n	8000b3e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	50004200 	.word	0x50004200
 8000b58:	50004400 	.word	0x50004400

08000b5c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0308 	and.w	r3, r3, #8
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	bf0c      	ite	eq
 8000b6c:	2301      	moveq	r3, #1
 8000b6e:	2300      	movne	r3, #0
 8000b70:	b2db      	uxtb	r3, r3
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	50004300 	.word	0x50004300

08000b80 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 8000b84:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000b88:	f7ff fcee 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 8000b8c:	4a17      	ldr	r2, [pc, #92]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000b96:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 8000b98:	bf00      	nop
 8000b9a:	f7ff fcd9 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f8      	beq.n	8000b9a <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 8000ba8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000bac:	f7ff fcdc 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 8000bb0:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 8000bb6:	bf00      	nop
 8000bb8:	f7ff fcca 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d0f8      	beq.n	8000bb8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 8000bc6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000bca:	f7ff fccd 	bl	8000568 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8000bce:	4a07      	ldr	r2, [pc, #28]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8000bda:	bf00      	nop
 8000bdc:	f7ff fcb8 	bl	8000550 <XMC_SCU_INTERUPT_GetEventStatus>
 8000be0:	4603      	mov	r3, r0
 8000be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d0f8      	beq.n	8000bdc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	50004300 	.word	0x50004300

08000bf0 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bf6:	4b0f      	ldr	r3, [pc, #60]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bfe:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c00:	4d0d      	ldr	r5, [pc, #52]	; (8000c38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8000c0a:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8000c0e:	f001 fa5f 	bl	80020d0 <OSCHP_GetFrequency>
 8000c12:	4602      	mov	r2, r0
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8000c16:	fba3 2302 	umull	r2, r3, r3, r2
 8000c1a:	0d1b      	lsrs	r3, r3, #20
 8000c1c:	3b01      	subs	r3, #1
 8000c1e:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8000c20:	4323      	orrs	r3, r4
 8000c22:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c26:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000c2e:	6053      	str	r3, [r2, #4]
}
 8000c30:	bdb0      	pop	{r4, r5, r7, pc}
 8000c32:	bf00      	nop
 8000c34:	50004710 	.word	0x50004710
 8000c38:	50004700 	.word	0x50004700
 8000c3c:	6b5fca6b 	.word	0x6b5fca6b

08000c40 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8000c4c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000c50:	bf0c      	ite	eq
 8000c52:	2301      	moveq	r3, #1
 8000c54:	2300      	movne	r3, #0
 8000c56:	b2db      	uxtb	r3, r3
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	50004710 	.word	0x50004710

08000c68 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c76:	f023 0302 	bic.w	r3, r3, #2
 8000c7a:	6053      	str	r3, [r2, #4]
}
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	50004710 	.word	0x50004710

08000c88 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8000c8c:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c8e:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	f043 0302 	orr.w	r3, r3, #2
 8000c9a:	6053      	str	r3, [r2, #4]
}
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	50004710 	.word	0x50004710

08000ca8 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	60ba      	str	r2, [r7, #8]
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	81fb      	strh	r3, [r7, #14]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8000cba:	89fb      	ldrh	r3, [r7, #14]
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f7ff fd69 	bl	8000794 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8000cc2:	7b7b      	ldrb	r3, [r7, #13]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	f040 808b 	bne.w	8000de0 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d109      	bne.n	8000ce4 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8000cd0:	f001 f9fe 	bl	80020d0 <OSCHP_GetFrequency>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8000cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	059b      	lsls	r3, r3, #22
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	e002      	b.n	8000cea <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8000ce4:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8000ce8:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	687a      	ldr	r2, [r7, #4]
 8000cee:	fb02 f203 	mul.w	r2, r2, r3
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf8:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4a4b      	ldr	r2, [pc, #300]	; (8000e2c <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8000cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000d02:	091b      	lsrs	r3, r3, #4
 8000d04:	0d9b      	lsrs	r3, r3, #22
 8000d06:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d08:	4a49      	ldr	r2, [pc, #292]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000d14:	bf00      	nop
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0f9      	beq.n	8000d16 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d22:	4a43      	ldr	r2, [pc, #268]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d24:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d2e:	4940      	ldr	r1, [pc, #256]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d30:	4b3f      	ldr	r3, [pc, #252]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	4b3f      	ldr	r3, [pc, #252]	; (8000e34 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8000d36:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	3a01      	subs	r2, #1
 8000d3c:	0212      	lsls	r2, r2, #8
 8000d3e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8000d46:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8000d52:	4a37      	ldr	r2, [pc, #220]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d54:	4b36      	ldr	r3, [pc, #216]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5c:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8000d5e:	4a34      	ldr	r2, [pc, #208]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d60:	4b33      	ldr	r3, [pc, #204]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f023 0310 	bic.w	r3, r3, #16
 8000d68:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6c:	4b30      	ldr	r3, [pc, #192]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8000d76:	bf00      	nop
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f9      	beq.n	8000d78 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000d84:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f023 0301 	bic.w	r3, r3, #1
 8000d8e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8000d90:	bf00      	nop
 8000d92:	4b27      	ldr	r3, [pc, #156]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f003 0301 	and.w	r3, r3, #1
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f9      	bne.n	8000d92 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	4a25      	ldr	r2, [pc, #148]	; (8000e38 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	095b      	lsrs	r3, r3, #5
 8000da8:	0d9b      	lsrs	r3, r3, #22
 8000daa:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dac:	6a3a      	ldr	r2, [r7, #32]
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d202      	bcs.n	8000dba <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000db4:	6938      	ldr	r0, [r7, #16]
 8000db6:	f000 f845 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	085b      	lsrs	r3, r3, #1
 8000dbe:	4a1f      	ldr	r2, [pc, #124]	; (8000e3c <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8000dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc4:	095b      	lsrs	r3, r3, #5
 8000dc6:	0d9b      	lsrs	r3, r3, #22
 8000dc8:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8000dca:	6a3a      	ldr	r2, [r7, #32]
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d202      	bcs.n	8000dd8 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8000dd2:	6938      	ldr	r0, [r7, #16]
 8000dd4:	f000 f836 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8000dd8:	6a38      	ldr	r0, [r7, #32]
 8000dda:	f000 f833 	bl	8000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8000dde:	e01c      	b.n	8000e1a <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000de0:	4913      	ldr	r1, [pc, #76]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000de2:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8000dea:	6a3b      	ldr	r3, [r7, #32]
 8000dec:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8000dee:	4313      	orrs	r3, r2
 8000df0:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8000df2:	bf00      	nop
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0f9      	beq.n	8000df4 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8000e00:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f043 0301 	orr.w	r3, r3, #1
 8000e0a:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8000e0c:	bf00      	nop
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d0f9      	beq.n	8000e0e <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8000e1a:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	60da      	str	r2, [r3, #12]
}
 8000e20:	3718      	adds	r7, #24
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	431bde83 	.word	0x431bde83
 8000e2c:	aaaaaaab 	.word	0xaaaaaaab
 8000e30:	50004710 	.word	0x50004710
 8000e34:	f08080ff 	.word	0xf08080ff
 8000e38:	88888889 	.word	0x88888889
 8000e3c:	b60b60b7 	.word	0xb60b60b7
 8000e40:	50004160 	.word	0x50004160

08000e44 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e4c:	490b      	ldr	r1, [pc, #44]	; (8000e7c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e4e:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e50:	689b      	ldr	r3, [r3, #8]
 8000e52:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8000e60:	bf00      	nop
 8000e62:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0320 	and.w	r3, r3, #32
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8000e6e:	2032      	movs	r0, #50	; 0x32
 8000e70:	f7ff fb4c 	bl	800050c <XMC_SCU_lDelay>
}
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	50004710 	.word	0x50004710

08000e80 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e92:	b2db      	uxtb	r3, r3
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	683a      	ldr	r2, [r7, #0]
 8000eae:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8000eca:	2310      	movs	r3, #16
 8000ecc:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f000 f89e 	bl	8001010 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	7a1b      	ldrb	r3, [r3, #8]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	7a1b      	ldrb	r3, [r3, #8]
 8000ee0:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d014      	beq.n	8000f12 <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	791b      	ldrb	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d009      	beq.n	8000f04 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	f000 f945 	bl	800118c <XMC_USIC_CH_SetBaudrateEx>
 8000f02:	e006      	b.n	8000f12 <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	697a      	ldr	r2, [r7, #20]
 8000f0e:	f000 f8cb 	bl	80010a8 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	79db      	ldrb	r3, [r3, #7]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	085b      	lsrs	r3, r3, #1
 8000f1e:	3301      	adds	r3, #1
 8000f20:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8000f22:	4313      	orrs	r3, r2
 8000f24:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	68fa      	ldr	r2, [r7, #12]
 8000f2e:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	795b      	ldrb	r3, [r3, #5]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	061b      	lsls	r3, r3, #24
 8000f38:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	799b      	ldrb	r3, [r3, #6]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d009      	beq.n	8000f5c <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	799b      	ldrb	r3, [r3, #6]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	041b      	lsls	r3, r3, #16
 8000f54:	431a      	orrs	r2, r3
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	635a      	str	r2, [r3, #52]	; 0x34
 8000f5a:	e008      	b.n	8000f6e <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	795b      	ldrb	r3, [r3, #5]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	041b      	lsls	r3, r3, #16
 8000f68:	431a      	orrs	r2, r3
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	895b      	ldrh	r3, [r3, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000f88:	3718      	adds	r7, #24
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop

08000f90 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8000fa2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d110      	bne.n	8000fcc <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8000faa:	bf00      	nop
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff67 	bl	8000e80 <XMC_USIC_CH_GetTransmitBufferStatus>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b80      	cmp	r3, #128	; 0x80
 8000fb6:	d0f9      	beq.n	8000fac <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8000fb8:	6878      	ldr	r0, [r7, #4]
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	f7ff ff6f 	bl	8000ea0 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8000fca:	e003      	b.n	8000fd4 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop

08000fdc <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b085      	sub	sp, #20
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8000fea:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	e003      	b.n	8001002 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8001000:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8001002:	89fb      	ldrh	r3, [r7, #14]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <XMC_USIC_CH_Enable+0x74>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d003      	beq.n	8001028 <XMC_USIC_CH_Enable+0x18>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	4a19      	ldr	r2, [pc, #100]	; (8001088 <XMC_USIC_CH_Enable+0x78>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d103      	bne.n	8001030 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8001028:	4818      	ldr	r0, [pc, #96]	; (800108c <XMC_USIC_CH_Enable+0x7c>)
 800102a:	f000 f991 	bl	8001350 <XMC_USIC_Enable>
 800102e:	e016      	b.n	800105e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a17      	ldr	r2, [pc, #92]	; (8001090 <XMC_USIC_CH_Enable+0x80>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d003      	beq.n	8001040 <XMC_USIC_CH_Enable+0x30>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <XMC_USIC_CH_Enable+0x84>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d103      	bne.n	8001048 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8001040:	4815      	ldr	r0, [pc, #84]	; (8001098 <XMC_USIC_CH_Enable+0x88>)
 8001042:	f000 f985 	bl	8001350 <XMC_USIC_Enable>
 8001046:	e00a      	b.n	800105e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <XMC_USIC_CH_Enable+0x8c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d003      	beq.n	8001058 <XMC_USIC_CH_Enable+0x48>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a13      	ldr	r2, [pc, #76]	; (80010a0 <XMC_USIC_CH_Enable+0x90>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d102      	bne.n	800105e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <XMC_USIC_CH_Enable+0x94>)
 800105a:	f000 f979 	bl	8001350 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2203      	movs	r2, #3
 8001062:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8001064:	bf00      	nop
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f9      	beq.n	8001066 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f023 020f 	bic.w	r2, r3, #15
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40030000 	.word	0x40030000
 8001088:	40030200 	.word	0x40030200
 800108c:	40030008 	.word	0x40030008
 8001090:	48020000 	.word	0x48020000
 8001094:	48020200 	.word	0x48020200
 8001098:	48020008 	.word	0x48020008
 800109c:	48024000 	.word	0x48024000
 80010a0:	48024200 	.word	0x48024200
 80010a4:	48024008 	.word	0x48024008

080010a8 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08e      	sub	sp, #56	; 0x38
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	2b63      	cmp	r3, #99	; 0x63
 80010b8:	d95a      	bls.n	8001170 <XMC_USIC_CH_SetBaudrate+0xc8>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d057      	beq.n	8001170 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80010c0:	f7ff fb1c 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80010c8:	fba3 2302 	umull	r2, r3, r3, r2
 80010cc:	095b      	lsrs	r3, r3, #5
 80010ce:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	4a2c      	ldr	r2, [pc, #176]	; (8001184 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80010d4:	fba2 2303 	umull	r2, r3, r2, r3
 80010d8:	095b      	lsrs	r3, r3, #5
 80010da:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 80010dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 80010e2:	2301      	movs	r3, #1
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 80010e6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 80010ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
 80010f2:	e022      	b.n	800113a <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80010f8:	fb02 f203 	mul.w	r2, r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	fbb2 f3f3 	udiv	r3, r2, r3
 8001108:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	0a9b      	lsrs	r3, r3, #10
 800110e:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001116:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111e:	d809      	bhi.n	8001134 <XMC_USIC_CH_SetBaudrate+0x8c>
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001124:	429a      	cmp	r2, r3
 8001126:	d205      	bcs.n	8001134 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8001130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8001134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001136:	3b01      	subs	r3, #1
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
 800113a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1d9      	bne.n	80010f4 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8001140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001142:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8001144:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	695a      	ldr	r2, [r3, #20]
 8001150:	4b0d      	ldr	r3, [pc, #52]	; (8001188 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8001152:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	3a01      	subs	r2, #1
 8001158:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800115a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 800115c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115e:	3b01      	subs	r3, #1
 8001160:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001162:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8001168:	2300      	movs	r3, #0
 800116a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800116e:	e002      	b.n	8001176 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8001176:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800117a:	4618      	mov	r0, r3
 800117c:	3738      	adds	r7, #56	; 0x38
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	51eb851f 	.word	0x51eb851f
 8001188:	fc0080ef 	.word	0xfc0080ef

0800118c <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af00      	add	r7, sp, #0
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8001198:	f7ff fab0 	bl	80006fc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 800119c:	4603      	mov	r3, r0
 800119e:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	fb02 f303 	mul.w	r3, r2, r3
 80011a8:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dd5f      	ble.n	8001276 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80011b6:	6a3a      	ldr	r2, [r7, #32]
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80011c0:	e010      	b.n	80011e4 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80011c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c4:	3301      	adds	r3, #1
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	fb02 f303 	mul.w	r3, r2, r3
 80011d0:	461a      	mov	r2, r3
 80011d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011d4:	fb03 f302 	mul.w	r3, r3, r2
 80011d8:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80011da:	6a3a      	ldr	r2, [r7, #32]
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	fb92 f3f3 	sdiv	r3, r2, r3
 80011e2:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 80011e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011e6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d8e9      	bhi.n	80011c2 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 80011ee:	6a3a      	ldr	r2, [r7, #32]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80011fa:	fb01 f303 	mul.w	r3, r1, r3
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8001204:	6a3a      	ldr	r2, [r7, #32]
 8001206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001208:	3301      	adds	r3, #1
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	fb01 f303 	mul.w	r3, r1, r3
 8001210:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001212:	fb01 f303 	mul.w	r3, r1, r3
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001226:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800122a:	68b9      	ldr	r1, [r7, #8]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	1acb      	subs	r3, r1, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	bfb8      	it	lt
 8001234:	425b      	neglt	r3, r3
 8001236:	429a      	cmp	r2, r3
 8001238:	da02      	bge.n	8001240 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 800123a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800123c:	3301      	adds	r3, #1
 800123e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8001240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001242:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8001248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800124a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8001258:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	3a01      	subs	r2, #1
 800125e:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8001260:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8001262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001264:	3b01      	subs	r3, #1
 8001266:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8001268:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800126e:	2300      	movs	r3, #0
 8001270:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001274:	e002      	b.n	800127c <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 800127c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001280:	4618      	mov	r0, r3
 8001282:	3730      	adds	r7, #48	; 0x30
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	fc0080ef 	.word	0xfc0080ef

0800128c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	603b      	str	r3, [r7, #0]
 8001298:	4613      	mov	r3, r2
 800129a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 80012b4:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	0211      	lsls	r1, r2, #8
 80012ba:	68ba      	ldr	r2, [r7, #8]
 80012bc:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 80012be:	79fa      	ldrb	r2, [r7, #7]
 80012c0:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 80012c2:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 80012c4:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	f8ffc0c0 	.word	0xf8ffc0c0

080012dc <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	460b      	mov	r3, r1
 80012e6:	607a      	str	r2, [r7, #4]
 80012e8:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	7afb      	ldrb	r3, [r7, #11]
 80012f0:	2107      	movs	r1, #7
 80012f2:	fa01 f303 	lsl.w	r3, r1, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 80012fa:	7afb      	ldrb	r3, [r7, #11]
 80012fc:	6879      	ldr	r1, [r7, #4]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001302:	431a      	orrs	r2, r3
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>:

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	460b      	mov	r3, r1
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	72fb      	strb	r3, [r7, #11]
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001328:	7afb      	ldrb	r3, [r7, #11]
 800132a:	2107      	movs	r1, #7
 800132c:	fa01 f303 	lsl.w	r3, r1, r3
 8001330:	43db      	mvns	r3, r3
 8001332:	401a      	ands	r2, r3
                              (service_request << (uint32_t)interrupt_node));
 8001334:	7afb      	ldrb	r3, [r7, #11]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->TBCTR = (uint32_t)((channel->TBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 800133c:	431a      	orrs	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              (service_request << (uint32_t)interrupt_node));
}
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a28      	ldr	r2, [pc, #160]	; (80013fc <XMC_USIC_Enable+0xac>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d118      	bne.n	8001392 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8001360:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001364:	f7ff fafe 	bl	8000964 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8001368:	bf00      	nop
 800136a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800136e:	f7ff fb15 	bl	800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f8      	bne.n	800136a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8001378:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800137c:	f7ff f97e 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8001380:	bf00      	nop
 8001382:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001386:	f7ff f995 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f8      	bne.n	8001382 <XMC_USIC_Enable+0x32>
 8001390:	e030      	b.n	80013f4 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a1a      	ldr	r2, [pc, #104]	; (8001400 <XMC_USIC_Enable+0xb0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d114      	bne.n	80013c4 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 800139a:	481a      	ldr	r0, [pc, #104]	; (8001404 <XMC_USIC_Enable+0xb4>)
 800139c:	f7ff fae2 	bl	8000964 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 80013a0:	bf00      	nop
 80013a2:	4818      	ldr	r0, [pc, #96]	; (8001404 <XMC_USIC_Enable+0xb4>)
 80013a4:	f7ff fafa 	bl	800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f9      	bne.n	80013a2 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 80013ae:	4815      	ldr	r0, [pc, #84]	; (8001404 <XMC_USIC_Enable+0xb4>)
 80013b0:	f7ff f964 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 80013b4:	bf00      	nop
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <XMC_USIC_Enable+0xb4>)
 80013b8:	f7ff f97c 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f9      	bne.n	80013b6 <XMC_USIC_Enable+0x66>
 80013c2:	e017      	b.n	80013f4 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4a10      	ldr	r2, [pc, #64]	; (8001408 <XMC_USIC_Enable+0xb8>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d113      	bne.n	80013f4 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 80013cc:	480f      	ldr	r0, [pc, #60]	; (800140c <XMC_USIC_Enable+0xbc>)
 80013ce:	f7ff fac9 	bl	8000964 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 80013d2:	bf00      	nop
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <XMC_USIC_Enable+0xbc>)
 80013d6:	f7ff fae1 	bl	800099c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1f9      	bne.n	80013d4 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 80013e0:	480a      	ldr	r0, [pc, #40]	; (800140c <XMC_USIC_Enable+0xbc>)
 80013e2:	f7ff f94b 	bl	800067c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 80013e6:	bf00      	nop
 80013e8:	4808      	ldr	r0, [pc, #32]	; (800140c <XMC_USIC_Enable+0xbc>)
 80013ea:	f7ff f963 	bl	80006b4 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1f9      	bne.n	80013e8 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40030008 	.word	0x40030008
 8001400:	48020008 	.word	0x48020008
 8001404:	10000080 	.word	0x10000080
 8001408:	48024008 	.word	0x48024008
 800140c:	10000100 	.word	0x10000100

08001410 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <_sbrk+0x5c>)
 8001422:	4a13      	ldr	r2, [pc, #76]	; (8001470 <_sbrk+0x60>)
 8001424:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8001426:	4b11      	ldr	r3, [pc, #68]	; (800146c <_sbrk+0x5c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3303      	adds	r3, #3
 8001430:	f023 0303 	bic.w	r3, r3, #3
 8001434:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8001436:	4b0d      	ldr	r3, [pc, #52]	; (800146c <_sbrk+0x5c>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4413      	add	r3, r2
 800143e:	4a0d      	ldr	r2, [pc, #52]	; (8001474 <_sbrk+0x64>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d207      	bcs.n	8001454 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8001444:	4b09      	ldr	r3, [pc, #36]	; (800146c <_sbrk+0x5c>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	4a07      	ldr	r2, [pc, #28]	; (800146c <_sbrk+0x5c>)
 800144e:	6013      	str	r3, [r2, #0]
    return (base);
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	e006      	b.n	8001462 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8001454:	f002 fed6 	bl	8004204 <__errno>
 8001458:	4602      	mov	r2, r0
 800145a:	230c      	movs	r3, #12
 800145c:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	1ffe88a8 	.word	0x1ffe88a8
 8001470:	20000000 	.word	0x20000000
 8001474:	2003ffc0 	.word	0x2003ffc0

08001478 <_init>:

/* Init */
void _init(void)
{}
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001492:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80014ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	bf14      	ite	ne
 80014b6:	2301      	movne	r3, #1
 80014b8:	2300      	moveq	r3, #0
 80014ba:	b2db      	uxtb	r3, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80014d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014da:	2b00      	cmp	r3, #0
 80014dc:	bf14      	ite	ne
 80014de:	2301      	movne	r3, #1
 80014e0:	2300      	moveq	r3, #0
 80014e2:	b2db      	uxtb	r3, r3
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80014f8:	2300      	movs	r3, #0
 80014fa:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	4798      	blx	r3
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]

  return status;
 8001508:	7bfb      	ldrb	r3, [r7, #15]
}
 800150a:	4618      	mov	r0, r3
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop

08001514 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8001520:	2304      	movs	r3, #4
 8001522:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800152c:	2b02      	cmp	r3, #2
 800152e:	d000      	beq.n	8001532 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8001530:	e007      	b.n	8001542 <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	f000 f808 	bl	800154c <UART_lStartTransmitPolling>
 800153c:	4603      	mov	r3, r0
 800153e:	75fb      	strb	r3, [r7, #23]
    break;
 8001540:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8001542:	7dfb      	ldrb	r3, [r7, #23]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8001558:	2303      	movs	r3, #3
 800155a:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d058      	beq.n	8001614 <UART_lStartTransmitPolling+0xc8>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d055      	beq.n	8001614 <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 8001568:	2302      	movs	r3, #2
 800156a:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	7e1b      	ldrb	r3, [r3, #24]
 8001572:	b2db      	uxtb	r3, r3
 8001574:	f083 0301 	eor.w	r3, r3, #1
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d04a      	beq.n	8001614 <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	2201      	movs	r2, #1
 8001584:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800158e:	2b00      	cmp	r3, #0
 8001590:	d004      	beq.n	800159c <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff ff74 	bl	8001484 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	e01c      	b.n	80015dc <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d008      	beq.n	80015c0 <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 80015ae:	bf00      	nop
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff73 	bl	80014a0 <XMC_USIC_CH_TXFIFO_IsFull>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f7      	bne.n	80015b0 <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6819      	ldr	r1, [r3, #0]
 80015c4:	68ba      	ldr	r2, [r7, #8]
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4608      	mov	r0, r1
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fcdd 	bl	8000f90 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	3301      	adds	r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3de      	bcc.n	80015a2 <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d00b      	beq.n	8001608 <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 80015f0:	bf00      	nop
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff66 	bl	80014c8 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f4      	bne.n	80015f2 <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 8001608:	2300      	movs	r3, #0
 800160a:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2200      	movs	r2, #0
 8001612:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 8001614:	7dfb      	ldrb	r3, [r7, #23]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop

08001620 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	70fb      	strb	r3, [r7, #3]
 800162c:	4613      	mov	r3, r2
 800162e:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001630:	78f8      	ldrb	r0, [r7, #3]
 8001632:	78fb      	ldrb	r3, [r7, #3]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	3306      	adds	r3, #6
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8001642:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8001644:	431a      	orrs	r2, r3
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	1d83      	adds	r3, r0, #6
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	440b      	add	r3, r1
 800164e:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop

0800165c <XMC_USIC_CH_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_DisableEvent(), XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	6039      	str	r1, [r7, #0]
  channel->CCR |= event;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <XMC_USIC_CH_TXFIFO_EnableEvent>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  channel->TBCTR |= event;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	6839      	ldr	r1, [r7, #0]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f7ff fc04 	bl	8000ebc <XMC_UART_CH_InitEx>
}
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop

080016bc <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f023 030f 	bic.w	r3, r3, #15
 80016cc:	f043 0202 	orr.w	r2, r3, #2
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80016e6:	2300      	movs	r3, #0
 80016e8:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 4U, &UART_0_rx_pin_config);
 80016ea:	481d      	ldr	r0, [pc, #116]	; (8001760 <UART_0_init+0x80>)
 80016ec:	2104      	movs	r1, #4
 80016ee:	4a1d      	ldr	r2, [pc, #116]	; (8001764 <UART_0_init+0x84>)
 80016f0:	f7fe fe4e 	bl	8000390 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART0_CH0, &UART_0_channel_config);
 80016f4:	481c      	ldr	r0, [pc, #112]	; (8001768 <UART_0_init+0x88>)
 80016f6:	491d      	ldr	r1, [pc, #116]	; (800176c <UART_0_init+0x8c>)
 80016f8:	f7ff ffd2 	bl	80016a0 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART0_CH0, XMC_USIC_CH_INPUT_DX0, 1U);
 80016fc:	481a      	ldr	r0, [pc, #104]	; (8001768 <UART_0_init+0x88>)
 80016fe:	2100      	movs	r1, #0
 8001700:	2201      	movs	r2, #1
 8001702:	f7ff ff8d 	bl	8001620 <XMC_USIC_CH_SetInputSource>
  /*Configure transmit FIFO*/
  XMC_USIC_CH_TXFIFO_Configure(XMC_UART0_CH0,
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <UART_0_init+0x88>)
 8001708:	2100      	movs	r1, #0
 800170a:	2204      	movs	r2, #4
 800170c:	2301      	movs	r3, #1
 800170e:	f7ff fdbd 	bl	800128c <XMC_USIC_CH_TXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_16WORDS,
        1U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART0_CH0);
 8001712:	4815      	ldr	r0, [pc, #84]	; (8001768 <UART_0_init+0x88>)
 8001714:	f7ff ffd2 	bl	80016bc <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, 5U, &UART_0_tx_pin_config);
 8001718:	4811      	ldr	r0, [pc, #68]	; (8001760 <UART_0_init+0x80>)
 800171a:	2105      	movs	r1, #5
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <UART_0_init+0x90>)
 800171e:	f7fe fe37 	bl	8000390 <XMC_GPIO_Init>

  /*Set service request for receive interrupt*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
 8001722:	4811      	ldr	r0, [pc, #68]	; (8001768 <UART_0_init+0x88>)
 8001724:	2108      	movs	r1, #8
 8001726:	2203      	movs	r2, #3
 8001728:	f7ff fdd8 	bl	80012dc <XMC_USIC_CH_SetInterruptNodePointer>
     3U);
  /*Enable UART standard receive event*/
  XMC_USIC_CH_EnableEvent(XMC_UART0_CH0, XMC_USIC_CH_EVENT_STANDARD_RECEIVE);
 800172c:	480e      	ldr	r0, [pc, #56]	; (8001768 <UART_0_init+0x88>)
 800172e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001732:	f7ff ff93 	bl	800165c <XMC_USIC_CH_EnableEvent>
  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8001736:	480c      	ldr	r0, [pc, #48]	; (8001768 <UART_0_init+0x88>)
 8001738:	2110      	movs	r1, #16
 800173a:	2200      	movs	r2, #0
 800173c:	f7ff fdce 	bl	80012dc <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  /*Set service request for tx FIFO transmit interrupt*/
  XMC_USIC_CH_TXFIFO_SetInterruptNodePointer(XMC_UART0_CH0, XMC_USIC_CH_TXFIFO_INTERRUPT_NODE_POINTER_STANDARD,
 8001740:	4809      	ldr	r0, [pc, #36]	; (8001768 <UART_0_init+0x88>)
 8001742:	2110      	movs	r1, #16
 8001744:	2205      	movs	r2, #5
 8001746:	f7ff fde5 	bl	8001314 <XMC_USIC_CH_TXFIFO_SetInterruptNodePointer>
      5U);
  /*Enable UART transmit event*/
  XMC_USIC_CH_TXFIFO_EnableEvent(XMC_UART0_CH0,(uint32_t)XMC_USIC_CH_TXFIFO_EVENT_CONF_STANDARD);
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <UART_0_init+0x88>)
 800174c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001750:	f7ff ff94 	bl	800167c <XMC_USIC_CH_TXFIFO_EnableEvent>
  return status;
 8001754:	79fb      	ldrb	r3, [r7, #7]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	48028100 	.word	0x48028100
 8001764:	08006978 	.word	0x08006978
 8001768:	40030000 	.word	0x40030000
 800176c:	0800692c 	.word	0x0800692c
 8001770:	08006938 	.word	0x08006938

08001774 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001778:	4b04      	ldr	r3, [pc, #16]	; (800178c <__NVIC_GetPriorityGrouping+0x18>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001780:	0a1b      	lsrs	r3, r3, #8
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	490d      	ldr	r1, [pc, #52]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	b2d2      	uxtb	r2, r2
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	4909      	ldr	r1, [pc, #36]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	f003 030f 	and.w	r3, r3, #15
 80017c2:	3b04      	subs	r3, #4
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	b2d2      	uxtb	r2, r2
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
  }
}
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b06      	cmp	r3, #6
 8001800:	bf28      	it	cs
 8001802:	2306      	movcs	r3, #6
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3306      	adds	r3, #6
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b01      	subs	r3, #1
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2201      	movs	r2, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	401a      	ands	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2101      	movs	r1, #1
 800182e:	fa01 f303 	lsl.w	r3, r1, r3
 8001832:	1e59      	subs	r1, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001838:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800183a:	4618      	mov	r0, r3
 800183c:	3724      	adds	r7, #36	; 0x24
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop

08001848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3b01      	subs	r3, #1
 8001854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001858:	d301      	bcc.n	800185e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185a:	2301      	movs	r3, #1
 800185c:	e00f      	b.n	800187e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <SysTick_Config+0x40>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3b01      	subs	r3, #1
 8001864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001866:	f04f 30ff 	mov.w	r0, #4294967295
 800186a:	213f      	movs	r1, #63	; 0x3f
 800186c:	f7ff ff90 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001870:	4b05      	ldr	r3, [pc, #20]	; (8001888 <SysTick_Config+0x40>)
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001876:	4b04      	ldr	r3, [pc, #16]	; (8001888 <SysTick_Config+0x40>)
 8001878:	2207      	movs	r2, #7
 800187a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	e000e010 	.word	0xe000e010

0800188c <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 800188c:	b490      	push	{r4, r7}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8001898:	496b      	ldr	r1, [pc, #428]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	4613      	mov	r3, r2
 800189e:	00db      	lsls	r3, r3, #3
 80018a0:	4413      	add	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	440b      	add	r3, r1
 80018a6:	3318      	adds	r3, #24
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 80018ac:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <SYSTIMER_lInsertTimerList+0x1c0>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d109      	bne.n	80018c8 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	4413      	add	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4a62      	ldr	r2, [pc, #392]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 80018c0:	4413      	add	r3, r2
 80018c2:	4a62      	ldr	r2, [pc, #392]	; (8001a4c <SYSTIMER_lInsertTimerList+0x1c0>)
 80018c4:	6013      	str	r3, [r2, #0]
 80018c6:	e0bb      	b.n	8001a40 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 80018c8:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <SYSTIMER_lInsertTimerList+0x1c0>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80018d2:	e0ab      	b.n	8001a2c <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	461a      	mov	r2, r3
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1a9b      	subs	r3, r3, r2
 80018de:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	dc7a      	bgt.n	80019dc <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d026      	beq.n	800193c <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	6859      	ldr	r1, [r3, #4]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	4613      	mov	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 80018fe:	4413      	add	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	6859      	ldr	r1, [r3, #4]
 8001906:	4850      	ldr	r0, [pc, #320]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8001916:	494c      	ldr	r1, [pc, #304]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	4613      	mov	r3, r2
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	440b      	add	r3, r1
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	4413      	add	r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001934:	441a      	add	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	e01c      	b.n	8001976 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 800193c:	4b43      	ldr	r3, [pc, #268]	; (8001a4c <SYSTIMER_lInsertTimerList+0x1c0>)
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4841      	ldr	r0, [pc, #260]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4403      	add	r3, r0
 800194e:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8001952:	6819      	ldr	r1, [r3, #0]
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4a3a      	ldr	r2, [pc, #232]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001960:	4413      	add	r3, r2
 8001962:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	00db      	lsls	r3, r3, #3
 800196a:	4413      	add	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4a36      	ldr	r2, [pc, #216]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001970:	4413      	add	r3, r2
 8001972:	4a36      	ldr	r2, [pc, #216]	; (8001a4c <SYSTIMER_lInsertTimerList+0x1c0>)
 8001974:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8001976:	4934      	ldr	r1, [pc, #208]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	00db      	lsls	r3, r3, #3
 800197e:	4413      	add	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	440b      	add	r3, r1
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699a      	ldr	r2, [r3, #24]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	18d1      	adds	r1, r2, r3
 800198c:	482e      	ldr	r0, [pc, #184]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	4613      	mov	r3, r2
 8001992:	00db      	lsls	r3, r3, #3
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4403      	add	r3, r0
 800199a:	3318      	adds	r3, #24
 800199c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 800199e:	492a      	ldr	r1, [pc, #168]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	4613      	mov	r3, r2
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4413      	add	r3, r2
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	440b      	add	r3, r1
 80019ac:	6819      	ldr	r1, [r3, #0]
 80019ae:	4826      	ldr	r0, [pc, #152]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4403      	add	r3, r0
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6998      	ldr	r0, [r3, #24]
 80019c0:	4c21      	ldr	r4, [pc, #132]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	4413      	add	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4423      	add	r3, r4
 80019ce:	3318      	adds	r3, #24
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1ac3      	subs	r3, r0, r3
 80019d4:	618b      	str	r3, [r1, #24]
        found_flag = true;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e024      	b.n	8001a26 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	dd21      	ble.n	8001a26 <SYSTIMER_lInsertTimerList+0x19a>
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d11d      	bne.n	8001a26 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 80019ea:	4917      	ldr	r1, [pc, #92]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	4613      	mov	r3, r2
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4413      	add	r3, r2
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a08:	441a      	add	r2, r3
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8001a0e:	6939      	ldr	r1, [r7, #16]
 8001a10:	480d      	ldr	r0, [pc, #52]	; (8001a48 <SYSTIMER_lInsertTimerList+0x1bc>)
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	4613      	mov	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4403      	add	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8001a22:	2301      	movs	r3, #1
 8001a24:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <SYSTIMER_lInsertTimerList+0x1b4>
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	f083 0301 	eor.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f47f af4a 	bne.w	80018d4 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc90      	pop	{r4, r7}
 8001a46:	4770      	bx	lr
 8001a48:	1ffe8954 	.word	0x1ffe8954
 8001a4c:	1ffe88c8 	.word	0x1ffe88c8

08001a50 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	00db      	lsls	r3, r3, #3
 8001a5e:	4413      	add	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4a29      	ldr	r2, [pc, #164]	; (8001b08 <SYSTIMER_lRemoveTimerList+0xb8>)
 8001a64:	4413      	add	r3, r2
 8001a66:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d107      	bne.n	8001a80 <SYSTIMER_lRemoveTimerList+0x30>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8001a78:	4b24      	ldr	r3, [pc, #144]	; (8001b0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	e03d      	b.n	8001afc <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d114      	bne.n	8001ab2 <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	; (8001b0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8001a8e:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8001a90:	4b1e      	ldr	r3, [pc, #120]	; (8001b0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1b      	ldr	r2, [pc, #108]	; (8001b0c <SYSTIMER_lRemoveTimerList+0xbc>)
 8001a9e:	6812      	ldr	r2, [r2, #0]
 8001aa0:	6991      	ldr	r1, [r2, #24]
 8001aa2:	68fa      	ldr	r2, [r7, #12]
 8001aa4:	6992      	ldr	r2, [r2, #24]
 8001aa6:	440a      	add	r2, r1
 8001aa8:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e024      	b.n	8001afc <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d107      	bne.n	8001aca <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	e018      	b.n	8001afc <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	6812      	ldr	r2, [r2, #0]
 8001ad2:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	6852      	ldr	r2, [r2, #4]
 8001adc:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	6812      	ldr	r2, [r2, #0]
 8001ae6:	6991      	ldr	r1, [r2, #24]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6992      	ldr	r2, [r2, #24]
 8001aec:	440a      	add	r2, r1
 8001aee:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	605a      	str	r2, [r3, #4]
  }
}
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	1ffe8954 	.word	0x1ffe8954
 8001b0c:	1ffe88c8 	.word	0x1ffe88c8

08001b10 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <SYSTIMER_lTimerHandler+0xc4>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001b1c:	e050      	b.n	8001bc0 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d013      	beq.n	8001b50 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	695b      	ldr	r3, [r3, #20]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff ff8f 	bl	8001a50 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4093      	lsls	r3, r2
 8001b42:	43da      	mvns	r2, r3
 8001b44:	4b24      	ldr	r3, [pc, #144]	; (8001bd8 <SYSTIMER_lTimerHandler+0xc8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	4a23      	ldr	r2, [pc, #140]	; (8001bd8 <SYSTIMER_lTimerHandler+0xc8>)
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	e034      	b.n	8001bba <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7b1b      	ldrb	r3, [r3, #12]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d112      	bne.n	8001b7e <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7b5b      	ldrb	r3, [r3, #13]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d12c      	bne.n	8001bba <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff73 	bl	8001a50 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	6912      	ldr	r2, [r2, #16]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4798      	blx	r3
 8001b7c:	e01d      	b.n	8001bba <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7b1b      	ldrb	r3, [r3, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d118      	bne.n	8001bb8 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	7b5b      	ldrb	r3, [r3, #13]
 8001b8a:	2b01      	cmp	r3, #1
 8001b8c:	d115      	bne.n	8001bba <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff5c 	bl	8001a50 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69da      	ldr	r2, [r3, #28]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fe71 	bl	800188c <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6912      	ldr	r2, [r2, #16]
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4798      	blx	r3
 8001bb6:	e000      	b.n	8001bba <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8001bb8:	e009      	b.n	8001bce <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <SYSTIMER_lTimerHandler+0xc4>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <SYSTIMER_lTimerHandler+0xbe>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0a7      	beq.n	8001b1e <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	1ffe88c8 	.word	0x1ffe88c8
 8001bd8:	1ffe88cc 	.word	0x1ffe88cc

08001bdc <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <SysTick_Handler+0x40>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8001be8:	4b0d      	ldr	r3, [pc, #52]	; (8001c20 <SysTick_Handler+0x44>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	4a0c      	ldr	r2, [pc, #48]	; (8001c20 <SysTick_Handler+0x44>)
 8001bf0:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d00e      	beq.n	8001c16 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d905      	bls.n	8001c0c <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	1e5a      	subs	r2, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	619a      	str	r2, [r3, #24]
 8001c0a:	e004      	b.n	8001c16 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8001c12:	f7ff ff7d 	bl	8001b10 <SYSTIMER_lTimerHandler>
    }
  }
}
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	1ffe88c8 	.word	0x1ffe88c8
 8001c20:	1ffe88d0 	.word	0x1ffe88d0

08001c24 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f083 0301 	eor.w	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d020      	beq.n	8001c80 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8001c3e:	4b13      	ldr	r3, [pc, #76]	; (8001c8c <SYSTIMER_Init+0x68>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8001c44:	4812      	ldr	r0, [pc, #72]	; (8001c90 <SYSTIMER_Init+0x6c>)
 8001c46:	f7ff fdff 	bl	8001848 <SysTick_Config>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d015      	beq.n	8001c80 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8001c54:	f7ff fd8e 	bl	8001774 <__NVIC_GetPriorityGrouping>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	213f      	movs	r1, #63	; 0x3f
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f7ff fdc0 	bl	80017e4 <NVIC_EncodePriority>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7ff fd90 	bl	8001790 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <SYSTIMER_Init+0x70>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8001c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	1ffe88c8 	.word	0x1ffe88c8
 8001c90:	00023280 	.word	0x00023280
 8001c94:	1ffe88cc 	.word	0x1ffe88cc

08001c98 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b089      	sub	sp, #36	; 0x24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cba:	d202      	bcs.n	8001cc2 <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
 8001cc0:	e07b      	b.n	8001dba <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
 8001cc6:	e075      	b.n	8001db4 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	409a      	lsls	r2, r3
 8001cce:	4b3e      	ldr	r3, [pc, #248]	; (8001dc8 <SYSTIMER_CreateTimer+0x130>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d16a      	bne.n	8001dae <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	409a      	lsls	r2, r3
 8001cde:	4b3a      	ldr	r3, [pc, #232]	; (8001dc8 <SYSTIMER_CreateTimer+0x130>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	4a38      	ldr	r2, [pc, #224]	; (8001dc8 <SYSTIMER_CreateTimer+0x130>)
 8001ce6:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8001ce8:	4938      	ldr	r1, [pc, #224]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4613      	mov	r3, r2
 8001cee:	00db      	lsls	r3, r3, #3
 8001cf0:	4413      	add	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	440b      	add	r3, r1
 8001cf6:	3310      	adds	r3, #16
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8001cfc:	4933      	ldr	r1, [pc, #204]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4613      	mov	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	3308      	adds	r3, #8
 8001d0c:	7afa      	ldrb	r2, [r7, #11]
 8001d0e:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8001d10:	492e      	ldr	r1, [pc, #184]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4613      	mov	r3, r2
 8001d16:	00db      	lsls	r3, r3, #3
 8001d18:	4413      	add	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3308      	adds	r3, #8
 8001d20:	2202      	movs	r2, #2
 8001d22:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a2a      	ldr	r2, [pc, #168]	; (8001dd0 <SYSTIMER_CreateTimer+0x138>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	1c59      	adds	r1, r3, #1
 8001d34:	4825      	ldr	r0, [pc, #148]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4403      	add	r3, r0
 8001d42:	3318      	adds	r3, #24
 8001d44:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8001d46:	4921      	ldr	r1, [pc, #132]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	440b      	add	r3, r1
 8001d54:	3318      	adds	r3, #24
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8001d5a:	491c      	ldr	r1, [pc, #112]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	4413      	add	r3, r2
 8001d64:	009b      	lsls	r3, r3, #2
 8001d66:	440b      	add	r3, r1
 8001d68:	3308      	adds	r3, #8
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8001d6e:	4917      	ldr	r1, [pc, #92]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3310      	adds	r3, #16
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8001d82:	4912      	ldr	r1, [pc, #72]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4613      	mov	r3, r2
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	440b      	add	r3, r1
 8001d90:	2200      	movs	r2, #0
 8001d92:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8001d94:	490d      	ldr	r1, [pc, #52]	; (8001dcc <SYSTIMER_CreateTimer+0x134>)
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	3301      	adds	r3, #1
 8001daa:	61fb      	str	r3, [r7, #28]
        break;
 8001dac:	e005      	b.n	8001dba <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	3301      	adds	r3, #1
 8001db2:	61bb      	str	r3, [r7, #24]
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	2b07      	cmp	r3, #7
 8001db8:	d986      	bls.n	8001cc8 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8001dba:	69fb      	ldr	r3, [r7, #28]
}  
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3724      	adds	r7, #36	; 0x24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	1ffe88cc 	.word	0x1ffe88cc
 8001dcc:	1ffe8954 	.word	0x1ffe8954
 8001dd0:	10624dd3 	.word	0x10624dd3

08001dd4 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	491a      	ldr	r1, [pc, #104]	; (8001e50 <SYSTIMER_StartTimer+0x7c>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	00db      	lsls	r3, r3, #3
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	3308      	adds	r3, #8
 8001df2:	795b      	ldrb	r3, [r3, #5]
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d126      	bne.n	8001e46 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1e59      	subs	r1, r3, #1
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <SYSTIMER_StartTimer+0x7c>)
 8001e02:	460b      	mov	r3, r1
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	440b      	add	r3, r1
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4403      	add	r3, r0
 8001e0c:	3318      	adds	r3, #24
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	1c59      	adds	r1, r3, #1
 8001e12:	480f      	ldr	r0, [pc, #60]	; (8001e50 <SYSTIMER_StartTimer+0x7c>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	4413      	add	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4403      	add	r3, r0
 8001e1e:	3318      	adds	r3, #24
 8001e20:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	1e5a      	subs	r2, r3, #1
 8001e26:	490a      	ldr	r1, [pc, #40]	; (8001e50 <SYSTIMER_StartTimer+0x7c>)
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	3308      	adds	r3, #8
 8001e34:	2201      	movs	r2, #1
 8001e36:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fd25 	bl	800188c <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8001e42:	2300      	movs	r3, #0
 8001e44:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	1ffe8954 	.word	0x1ffe8954

08001e54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <__NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001e60:	0a1b      	lsrs	r3, r3, #8
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	db0b      	blt.n	8001e9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e82:	4908      	ldr	r1, [pc, #32]	; (8001ea4 <__NVIC_EnableIRQ+0x34>)
 8001e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e88:	095b      	lsrs	r3, r3, #5
 8001e8a:	79fa      	ldrb	r2, [r7, #7]
 8001e8c:	f002 021f 	and.w	r2, r2, #31
 8001e90:	2001      	movs	r0, #1
 8001e92:	fa00 f202 	lsl.w	r2, r0, r2
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	490d      	ldr	r1, [pc, #52]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	0092      	lsls	r2, r2, #2
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	4909      	ldr	r1, [pc, #36]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	0092      	lsls	r2, r2, #2
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
  }
}
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	bf28      	it	cs
 8001f1a:	2306      	movcs	r3, #6
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3306      	adds	r3, #6
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2201      	movs	r2, #1
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2101      	movs	r1, #1
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001f50:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop

08001f60 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	b25b      	sxtb	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff ff7e 	bl	8001e70 <__NVIC_EnableIRQ>
}
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop

08001f7c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	781c      	ldrb	r4, [r3, #0]
 8001f88:	f7ff ff64 	bl	8001e54 <__NVIC_GetPriorityGrouping>
 8001f8c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001f92:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f7ff ffad 	bl	8001efc <NVIC_EncodePriority>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	b263      	sxtb	r3, r4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4611      	mov	r1, r2
 8001faa:	f7ff ff7d 	bl	8001ea8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	78db      	ldrb	r3, [r3, #3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f7ff ffd2 	bl	8001f60 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd90      	pop	{r4, r7, pc}
 8001fc6:	bf00      	nop

08001fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fd8:	4b0c      	ldr	r3, [pc, #48]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fde:	68ba      	ldr	r2, [r7, #8]
 8001fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001ff0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff8:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8001ffa:	4a04      	ldr	r2, [pc, #16]	; (800200c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	60d3      	str	r3, [r2, #12]
}
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff ffd6 	bl	8001fc8 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800201c:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <SystemCoreSetup+0x94>)
 8002020:	4a21      	ldr	r2, [pc, #132]	; (80020a8 <SystemCoreSetup+0x98>)
 8002022:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002024:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8002028:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800202a:	4a1e      	ldr	r2, [pc, #120]	; (80020a4 <SystemCoreSetup+0x94>)
 800202c:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <SystemCoreSetup+0x94>)
 800202e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002032:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002036:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800203a:	4b1c      	ldr	r3, [pc, #112]	; (80020ac <SystemCoreSetup+0x9c>)
 800203c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002040:	3314      	adds	r3, #20
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f023 030f 	bic.w	r3, r3, #15
 800204c:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8002056:	4b15      	ldr	r3, [pc, #84]	; (80020ac <SystemCoreSetup+0x9c>)
 8002058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800205c:	3314      	adds	r3, #20
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8002062:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <SystemCoreSetup+0x94>)
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <SystemCoreSetup+0x94>)
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	f023 0310 	bic.w	r3, r3, #16
 800206c:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 800206e:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <SystemCoreSetup+0x94>)
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <SystemCoreSetup+0x94>)
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	f023 0308 	bic.w	r3, r3, #8
 8002078:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800207a:	4a0a      	ldr	r2, [pc, #40]	; (80020a4 <SystemCoreSetup+0x94>)
 800207c:	4b09      	ldr	r3, [pc, #36]	; (80020a4 <SystemCoreSetup+0x94>)
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002084:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemCoreSetup+0x94>)
 8002088:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <SystemCoreSetup+0x94>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002090:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8002092:	4a04      	ldr	r2, [pc, #16]	; (80020a4 <SystemCoreSetup+0x94>)
 8002094:	4b03      	ldr	r3, [pc, #12]	; (80020a4 <SystemCoreSetup+0x94>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209c:	6253      	str	r3, [r2, #36]	; 0x24
}
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	08000000 	.word	0x08000000
 80020ac:	58001000 	.word	0x58001000

080020b0 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b085      	sub	sp, #20
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80020b8:	2300      	movs	r3, #0
 80020ba:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	701a      	strb	r2, [r3, #0]

  return (status);
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3714      	adds	r7, #20
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80020d4:	4b02      	ldr	r3, [pc, #8]	; (80020e0 <OSCHP_GetFrequency+0x10>)
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	00b71b00 	.word	0x00b71b00

080020e4 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80020e4:	b5b0      	push	{r4, r5, r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80020ea:	4b13      	ldr	r3, [pc, #76]	; (8002138 <SystemCoreClockSetup+0x54>)
 80020ec:	1d3c      	adds	r4, r7, #4
 80020ee:	461d      	mov	r5, r3
 80020f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f4:	682b      	ldr	r3, [r5, #0]
 80020f6:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7fe fa42 	bl	8000584 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8002100:	2000      	movs	r0, #0
 8002102:	f7fe fb67 	bl	80007d4 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8002106:	2000      	movs	r0, #0
 8002108:	f7fe fb1c 	bl	8000744 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 800210c:	2004      	movs	r0, #4
 800210e:	f7fe fbed 	bl	80008ec <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8002112:	f7fe fc67 	bl	80009e4 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8002116:	2001      	movs	r0, #1
 8002118:	2120      	movs	r1, #32
 800211a:	f7fe fc73 	bl	8000a04 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 800211e:	2000      	movs	r0, #0
 8002120:	f7fe fb24 	bl	800076c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe fc09 	bl	800093c <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800212a:	2001      	movs	r0, #1
 800212c:	f7fe fbf2 	bl	8000914 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bdb0      	pop	{r4, r5, r7, pc}
 8002136:	bf00      	nop
 8002138:	0800698c 	.word	0x0800698c

0800213c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8002142:	2300      	movs	r3, #0
 8002144:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8002146:	4815      	ldr	r0, [pc, #84]	; (800219c <DAVE_Init+0x60>)
 8002148:	f7ff ffb2 	bl	80020b0 <CLOCK_XMC4_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8002150:	79fb      	ldrb	r3, [r7, #7]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d104      	bne.n	8002160 <DAVE_Init+0x24>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8002156:	4812      	ldr	r0, [pc, #72]	; (80021a0 <DAVE_Init+0x64>)
 8002158:	f7ff f9ca 	bl	80014f0 <UART_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002160:	79fb      	ldrb	r3, [r7, #7]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d104      	bne.n	8002170 <DAVE_Init+0x34>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 8002166:	480f      	ldr	r0, [pc, #60]	; (80021a4 <DAVE_Init+0x68>)
 8002168:	f7ff fd5c 	bl	8001c24 <SYSTIMER_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d104      	bne.n	8002180 <DAVE_Init+0x44>
  {
	 /**  Initialization of INTERRUPT APP instance intUartReceive */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&intUartReceive); 
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <DAVE_Init+0x6c>)
 8002178:	f7ff ff00 	bl	8001f7c <INTERRUPT_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d104      	bne.n	8002190 <DAVE_Init+0x54>
  {
	 /**  Initialization of INTERRUPT APP instance intUartTransmit */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&intUartTransmit); 
 8002186:	4809      	ldr	r0, [pc, #36]	; (80021ac <DAVE_Init+0x70>)
 8002188:	f7ff fef8 	bl	8001f7c <INTERRUPT_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8002190:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	1ffe88d8 	.word	0x1ffe88d8
 80021a0:	1ffe8800 	.word	0x1ffe8800
 80021a4:	1ffe88d4 	.word	0x1ffe88d4
 80021a8:	08006984 	.word	0x08006984
 80021ac:	08006988 	.word	0x08006988

080021b0 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop

080021cc <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe feff 	bl	8000fdc <XMC_UART_CH_GetReceivedData>
 80021de:	4603      	mov	r3, r0
 80021e0:	b2db      	uxtb	r3, r3
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop

080021ec <UART_ClearFlag>:
 * }
 * @endcode
 *
 * */
__STATIC_INLINE void UART_ClearFlag(const UART_t *const handle, const uint32_t protocol_status)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  XMC_UART_CH_ClearStatusFlag(handle->channel, protocol_status);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4618      	mov	r0, r3
 80021fc:	6839      	ldr	r1, [r7, #0]
 80021fe:	f7ff ffd7 	bl	80021b0 <XMC_UART_CH_ClearStatusFlag>
}
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <_write>:
int			UartRxBufferPp; // Put pointer, Write

bool TxEnd = false;

// printf 재정의
int _write(int file, char *p, int len) {
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
	UART_Transmit(&UART_0, p, len);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4805      	ldr	r0, [pc, #20]	; (800222c <_write+0x24>)
 8002218:	68b9      	ldr	r1, [r7, #8]
 800221a:	461a      	mov	r2, r3
 800221c:	f7ff f97a 	bl	8001514 <UART_Transmit>
	return len;
 8002220:	687b      	ldr	r3, [r7, #4]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3710      	adds	r7, #16
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	1ffe8800 	.word	0x1ffe8800

08002230 <USIC0_5_IRQHandler>:

void callbackTransmit() {
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
	TxEnd = true;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <USIC0_5_IRQHandler+0x14>)
 8002236:	2201      	movs	r2, #1
 8002238:	701a      	strb	r2, [r3, #0]
}
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	1ffe88dc 	.word	0x1ffe88dc

08002248 <USIC0_3_IRQHandler>:

void callbackReceive() {
 8002248:	b598      	push	{r3, r4, r7, lr}
 800224a:	af00      	add	r7, sp, #0
	UartRxBuffer[UartRxBufferPp++] = UART_GetReceivedWord(&UART_0);
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <USIC0_3_IRQHandler+0x48>)
 800224e:	681c      	ldr	r4, [r3, #0]
 8002250:	1c63      	adds	r3, r4, #1
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <USIC0_3_IRQHandler+0x48>)
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	480f      	ldr	r0, [pc, #60]	; (8002294 <USIC0_3_IRQHandler+0x4c>)
 8002258:	f7ff ffb8 	bl	80021cc <UART_GetReceivedWord>
 800225c:	4603      	mov	r3, r0
 800225e:	461a      	mov	r2, r3
 8002260:	4b0d      	ldr	r3, [pc, #52]	; (8002298 <USIC0_3_IRQHandler+0x50>)
 8002262:	551a      	strb	r2, [r3, r4]
	UartRxBufferPp %= UartRxBufferMax;
 8002264:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <USIC0_3_IRQHandler+0x48>)
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b0c      	ldr	r3, [pc, #48]	; (800229c <USIC0_3_IRQHandler+0x54>)
 800226a:	fb82 0103 	smull	r0, r1, r2, r3
 800226e:	1853      	adds	r3, r2, r1
 8002270:	11d9      	asrs	r1, r3, #7
 8002272:	17d3      	asrs	r3, r2, #31
 8002274:	1ac9      	subs	r1, r1, r3
 8002276:	460b      	mov	r3, r1
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	1a5b      	subs	r3, r3, r1
 800227c:	1ad1      	subs	r1, r2, r3
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <USIC0_3_IRQHandler+0x48>)
 8002280:	6019      	str	r1, [r3, #0]
	UART_ClearFlag(&UART_0, XMC_UART_CH_STATUS_FLAG_RECEIVE_INDICATION | XMC_UART_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8002282:	4804      	ldr	r0, [pc, #16]	; (8002294 <USIC0_3_IRQHandler+0x4c>)
 8002284:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8002288:	f7ff ffb0 	bl	80021ec <UART_ClearFlag>
}
 800228c:	bd98      	pop	{r3, r4, r7, pc}
 800228e:	bf00      	nop
 8002290:	1ffe8b80 	.word	0x1ffe8b80
 8002294:	1ffe8800 	.word	0x1ffe8800
 8002298:	1ffe8a7c 	.word	0x1ffe8a7c
 800229c:	80808081 	.word	0x80808081

080022a0 <getChar>:

uint16_t	getChar() {
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
	uint16_t result = -1;
 80022a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022aa:	80fb      	strh	r3, [r7, #6]
	if(UartRxBufferGp == UartRxBufferPp) return result;
 80022ac:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <getChar+0x58>)
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <getChar+0x5c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d101      	bne.n	80022bc <getChar+0x1c>
 80022b8:	88fb      	ldrh	r3, [r7, #6]
 80022ba:	e017      	b.n	80022ec <getChar+0x4c>
	result = UartRxBuffer[UartRxBufferGp++];
 80022bc:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <getChar+0x58>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	1c5a      	adds	r2, r3, #1
 80022c2:	490d      	ldr	r1, [pc, #52]	; (80022f8 <getChar+0x58>)
 80022c4:	600a      	str	r2, [r1, #0]
 80022c6:	4a0e      	ldr	r2, [pc, #56]	; (8002300 <getChar+0x60>)
 80022c8:	5cd3      	ldrb	r3, [r2, r3]
 80022ca:	80fb      	strh	r3, [r7, #6]
	UartRxBufferGp %= UartRxBufferMax;
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <getChar+0x58>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <getChar+0x64>)
 80022d2:	fb82 0103 	smull	r0, r1, r2, r3
 80022d6:	1853      	adds	r3, r2, r1
 80022d8:	11d9      	asrs	r1, r3, #7
 80022da:	17d3      	asrs	r3, r2, #31
 80022dc:	1ac9      	subs	r1, r1, r3
 80022de:	460b      	mov	r3, r1
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	1a5b      	subs	r3, r3, r1
 80022e4:	1ad1      	subs	r1, r2, r3
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <getChar+0x58>)
 80022e8:	6019      	str	r1, [r3, #0]
	return result;
 80022ea:	88fb      	ldrh	r3, [r7, #6]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	1ffe8a78 	.word	0x1ffe8a78
 80022fc:	1ffe8b80 	.word	0x1ffe8b80
 8002300:	1ffe8a7c 	.word	0x1ffe8a7c
 8002304:	80808081 	.word	0x80808081

08002308 <getMessage>:

char *getMessage() {
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
	static char result[100];
	static int pos = 0;
	uint16_t ch = getChar();
 800230e:	f7ff ffc7 	bl	80022a0 <getChar>
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
	if(ch != -1) {
		if(ch == '\n') {
 8002316:	88fb      	ldrh	r3, [r7, #6]
 8002318:	2b0a      	cmp	r3, #10
 800231a:	d108      	bne.n	800232e <getMessage+0x26>
			memset(result, 0, 100);
 800231c:	480b      	ldr	r0, [pc, #44]	; (800234c <getMessage+0x44>)
 800231e:	2100      	movs	r1, #0
 8002320:	2264      	movs	r2, #100	; 0x64
 8002322:	f001 ffa6 	bl	8004272 <memset>
			pos = 0;
 8002326:	4b0a      	ldr	r3, [pc, #40]	; (8002350 <getMessage+0x48>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	e008      	b.n	8002340 <getMessage+0x38>
		}
		else {
			result[pos++] = ch;
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <getMessage+0x48>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	4906      	ldr	r1, [pc, #24]	; (8002350 <getMessage+0x48>)
 8002336:	600a      	str	r2, [r1, #0]
 8002338:	88fa      	ldrh	r2, [r7, #6]
 800233a:	b2d1      	uxtb	r1, r2
 800233c:	4a03      	ldr	r2, [pc, #12]	; (800234c <getMessage+0x44>)
 800233e:	54d1      	strb	r1, [r2, r3]
		}
	}
	return result;
 8002340:	4b02      	ldr	r3, [pc, #8]	; (800234c <getMessage+0x44>)
}
 8002342:	4618      	mov	r0, r3
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	1ffe88e4 	.word	0x1ffe88e4
 8002350:	1ffe8948 	.word	0x1ffe8948

08002354 <callback>:

int delay1000;

// 1ms
void callback() {
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
	if(delay1000 > 0)
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <callback+0x20>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	dd04      	ble.n	800236a <callback+0x16>
		delay1000--;
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <callback+0x20>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	3b01      	subs	r3, #1
 8002366:	4a03      	ldr	r2, [pc, #12]	; (8002374 <callback+0x20>)
 8002368:	6013      	str	r3, [r2, #0]

}
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	1ffe8b88 	.word	0x1ffe8b88

08002378 <delay>:

void delay(int d) {
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
	delay1000 = d;
 8002380:	4a06      	ldr	r2, [pc, #24]	; (800239c <delay+0x24>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6013      	str	r3, [r2, #0]
	while(delay1000 > 0)
 8002386:	bf00      	nop
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <delay+0x24>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	dcfb      	bgt.n	8002388 <delay+0x10>
		;
}
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	1ffe8b88 	.word	0x1ffe8b88

080023a0 <main>:
float sinValue;
float cosValue;
char *msg;

int main(void)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af02      	add	r7, sp, #8
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80023a6:	f7ff fec9 	bl	800213c <DAVE_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]

  if (status != DAVE_STATUS_SUCCESS)
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d000      	beq.n	80023b6 <main+0x16>
    XMC_DEBUG("DAVE APPs initialization failed\n");

    while(1U)
    {

    }
 80023b4:	e7fe      	b.n	80023b4 <main+0x14>
  }

  int id = SYSTIMER_CreateTimer(1000, SYSTIMER_MODE_PERIODIC, callback, NULL);
 80023b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ba:	2101      	movs	r1, #1
 80023bc:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <main+0x188>)
 80023be:	2300      	movs	r3, #0
 80023c0:	f7ff fc6a 	bl	8001c98 <SYSTIMER_CreateTimer>
 80023c4:	4603      	mov	r3, r0
 80023c6:	603b      	str	r3, [r7, #0]
  SYSTIMER_StartTimer(id);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fd02 	bl	8001dd4 <SYSTIMER_StartTimer>

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */
  while(1U)
  {
  	if(isFlag) angle++;
 80023d0:	4b56      	ldr	r3, [pc, #344]	; (800252c <main+0x18c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <main+0x42>
 80023d8:	4b55      	ldr	r3, [pc, #340]	; (8002530 <main+0x190>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	4a54      	ldr	r2, [pc, #336]	; (8002530 <main+0x190>)
 80023e0:	6013      	str	r3, [r2, #0]
  	if(angle >= 360) angle = 0;
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <main+0x190>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80023ea:	db02      	blt.n	80023f2 <main+0x52>
 80023ec:	4b50      	ldr	r3, [pc, #320]	; (8002530 <main+0x190>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
  	sinValue = sin(angle * 3.14 / 180);
 80023f2:	4b4f      	ldr	r3, [pc, #316]	; (8002530 <main+0x190>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f001 fb8c 	bl	8003b14 <__aeabi_i2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	a346      	add	r3, pc, #280	; (adr r3, 8002520 <main+0x180>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f001 fbe9 	bl	8003be0 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 0200 	mov.w	r2, #0
 800241a:	4b46      	ldr	r3, [pc, #280]	; (8002534 <main+0x194>)
 800241c:	f001 fd0a 	bl	8003e34 <__aeabi_ddiv>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f000 f8d4 	bl	80025d4 <sin>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f001 fe96 	bl	8004164 <__aeabi_d2f>
 8002438:	4602      	mov	r2, r0
 800243a:	4b3f      	ldr	r3, [pc, #252]	; (8002538 <main+0x198>)
 800243c:	601a      	str	r2, [r3, #0]
  	cosValue = cos(angle * 3.14 / 180);
 800243e:	4b3c      	ldr	r3, [pc, #240]	; (8002530 <main+0x190>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f001 fb66 	bl	8003b14 <__aeabi_i2d>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	a333      	add	r3, pc, #204	; (adr r3, 8002520 <main+0x180>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f001 fbc3 	bl	8003be0 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	4b33      	ldr	r3, [pc, #204]	; (8002534 <main+0x194>)
 8002468:	f001 fce4 	bl	8003e34 <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f000 f86c 	bl	8002550 <cos>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4610      	mov	r0, r2
 800247e:	4619      	mov	r1, r3
 8002480:	f001 fe70 	bl	8004164 <__aeabi_d2f>
 8002484:	4602      	mov	r2, r0
 8002486:	4b2d      	ldr	r3, [pc, #180]	; (800253c <main+0x19c>)
 8002488:	601a      	str	r2, [r3, #0]
  	printf("%f, %f\n", sinValue, cosValue);
 800248a:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <main+0x198>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4618      	mov	r0, r3
 8002490:	f001 fb52 	bl	8003b38 <__aeabi_f2d>
 8002494:	4604      	mov	r4, r0
 8002496:	460d      	mov	r5, r1
 8002498:	4b28      	ldr	r3, [pc, #160]	; (800253c <main+0x19c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f001 fb4b 	bl	8003b38 <__aeabi_f2d>
 80024a2:	4602      	mov	r2, r0
 80024a4:	460b      	mov	r3, r1
 80024a6:	e9cd 2300 	strd	r2, r3, [sp]
 80024aa:	4825      	ldr	r0, [pc, #148]	; (8002540 <main+0x1a0>)
 80024ac:	4622      	mov	r2, r4
 80024ae:	462b      	mov	r3, r5
 80024b0:	f002 fb4c 	bl	8004b4c <iprintf>
  	msg = getMessage();
 80024b4:	f7ff ff28 	bl	8002308 <getMessage>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <main+0x1a4>)
 80024bc:	601a      	str	r2, [r3, #0]
  	if(strlen(msg) >= 5)
 80024be:	4b21      	ldr	r3, [pc, #132]	; (8002544 <main+0x1a4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 fb84 	bl	8004bd0 <strlen>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d90c      	bls.n	80024e8 <main+0x148>
			if(strncmp(msg, "START", 5) == 0) {
 80024ce:	4b1d      	ldr	r3, [pc, #116]	; (8002544 <main+0x1a4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	491c      	ldr	r1, [pc, #112]	; (8002548 <main+0x1a8>)
 80024d6:	2205      	movs	r2, #5
 80024d8:	f002 fb82 	bl	8004be0 <strncmp>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d102      	bne.n	80024e8 <main+0x148>
				isFlag = true;
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <main+0x18c>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
			}
  	if(strlen(msg) >= 4)
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <main+0x1a4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fb6f 	bl	8004bd0 <strlen>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d90c      	bls.n	8002512 <main+0x172>
  	if(strncmp(msg, "STOP", 4) == 0) {
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <main+0x1a4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	4913      	ldr	r1, [pc, #76]	; (800254c <main+0x1ac>)
 8002500:	2204      	movs	r2, #4
 8002502:	f002 fb6d 	bl	8004be0 <strncmp>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d102      	bne.n	8002512 <main+0x172>
  		isFlag = false;
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <main+0x18c>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]
  	}
  	delay(10);
 8002512:	200a      	movs	r0, #10
 8002514:	f7ff ff30 	bl	8002378 <delay>
  }
 8002518:	e75a      	b.n	80023d0 <main+0x30>
 800251a:	bf00      	nop
 800251c:	f3af 8000 	nop.w
 8002520:	51eb851f 	.word	0x51eb851f
 8002524:	40091eb8 	.word	0x40091eb8
 8002528:	08002355 	.word	0x08002355
 800252c:	1ffe88dd 	.word	0x1ffe88dd
 8002530:	1ffe88e0 	.word	0x1ffe88e0
 8002534:	40668000 	.word	0x40668000
 8002538:	1ffe8a74 	.word	0x1ffe8a74
 800253c:	1ffe8b84 	.word	0x1ffe8b84
 8002540:	080069a0 	.word	0x080069a0
 8002544:	1ffe8b7c 	.word	0x1ffe8b7c
 8002548:	080069a8 	.word	0x080069a8
 800254c:	080069b0 	.word	0x080069b0

08002550 <cos>:
 8002550:	b530      	push	{r4, r5, lr}
 8002552:	4a1e      	ldr	r2, [pc, #120]	; (80025cc <cos+0x7c>)
 8002554:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002558:	4293      	cmp	r3, r2
 800255a:	b087      	sub	sp, #28
 800255c:	dd1b      	ble.n	8002596 <cos+0x46>
 800255e:	4a1c      	ldr	r2, [pc, #112]	; (80025d0 <cos+0x80>)
 8002560:	4293      	cmp	r3, r2
 8002562:	dd05      	ble.n	8002570 <cos+0x20>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	f001 f986 	bl	8003878 <__aeabi_dsub>
 800256c:	b007      	add	sp, #28
 800256e:	bd30      	pop	{r4, r5, pc}
 8002570:	aa02      	add	r2, sp, #8
 8002572:	f000 f879 	bl	8002668 <__ieee754_rem_pio2>
 8002576:	f000 0303 	and.w	r3, r0, #3
 800257a:	2b01      	cmp	r3, #1
 800257c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002580:	d017      	beq.n	80025b2 <cos+0x62>
 8002582:	2b02      	cmp	r3, #2
 8002584:	d00d      	beq.n	80025a2 <cos+0x52>
 8002586:	b1e3      	cbz	r3, 80025c2 <cos+0x72>
 8002588:	2401      	movs	r4, #1
 800258a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800258e:	9400      	str	r4, [sp, #0]
 8002590:	f000 ff9e 	bl	80034d0 <__kernel_sin>
 8002594:	e7ea      	b.n	800256c <cos+0x1c>
 8002596:	2200      	movs	r2, #0
 8002598:	2300      	movs	r3, #0
 800259a:	f000 fa85 	bl	8002aa8 <__kernel_cos>
 800259e:	b007      	add	sp, #28
 80025a0:	bd30      	pop	{r4, r5, pc}
 80025a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025a6:	f000 fa7f 	bl	8002aa8 <__kernel_cos>
 80025aa:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80025ae:	b007      	add	sp, #28
 80025b0:	bd30      	pop	{r4, r5, pc}
 80025b2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80025b6:	9300      	str	r3, [sp, #0]
 80025b8:	4622      	mov	r2, r4
 80025ba:	462b      	mov	r3, r5
 80025bc:	f000 ff88 	bl	80034d0 <__kernel_sin>
 80025c0:	e7f3      	b.n	80025aa <cos+0x5a>
 80025c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80025c6:	f000 fa6f 	bl	8002aa8 <__kernel_cos>
 80025ca:	e7cf      	b.n	800256c <cos+0x1c>
 80025cc:	3fe921fb 	.word	0x3fe921fb
 80025d0:	7fefffff 	.word	0x7fefffff

080025d4 <sin>:
 80025d4:	b530      	push	{r4, r5, lr}
 80025d6:	4a22      	ldr	r2, [pc, #136]	; (8002660 <sin+0x8c>)
 80025d8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80025dc:	4293      	cmp	r3, r2
 80025de:	b087      	sub	sp, #28
 80025e0:	dd1c      	ble.n	800261c <sin+0x48>
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <sin+0x90>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	dd05      	ble.n	80025f4 <sin+0x20>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	f001 f944 	bl	8003878 <__aeabi_dsub>
 80025f0:	b007      	add	sp, #28
 80025f2:	bd30      	pop	{r4, r5, pc}
 80025f4:	aa02      	add	r2, sp, #8
 80025f6:	f000 f837 	bl	8002668 <__ieee754_rem_pio2>
 80025fa:	f000 0003 	and.w	r0, r0, #3
 80025fe:	2801      	cmp	r0, #1
 8002600:	d01d      	beq.n	800263e <sin+0x6a>
 8002602:	2802      	cmp	r0, #2
 8002604:	d012      	beq.n	800262c <sin+0x58>
 8002606:	b308      	cbz	r0, 800264c <sin+0x78>
 8002608:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800260c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002610:	f000 fa4a 	bl	8002aa8 <__kernel_cos>
 8002614:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8002618:	b007      	add	sp, #28
 800261a:	bd30      	pop	{r4, r5, pc}
 800261c:	2300      	movs	r3, #0
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	2300      	movs	r3, #0
 8002624:	f000 ff54 	bl	80034d0 <__kernel_sin>
 8002628:	b007      	add	sp, #28
 800262a:	bd30      	pop	{r4, r5, pc}
 800262c:	2401      	movs	r4, #1
 800262e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002632:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002636:	9400      	str	r4, [sp, #0]
 8002638:	f000 ff4a 	bl	80034d0 <__kernel_sin>
 800263c:	e7ea      	b.n	8002614 <sin+0x40>
 800263e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002646:	f000 fa2f 	bl	8002aa8 <__kernel_cos>
 800264a:	e7d1      	b.n	80025f0 <sin+0x1c>
 800264c:	2401      	movs	r4, #1
 800264e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002656:	9400      	str	r4, [sp, #0]
 8002658:	f000 ff3a 	bl	80034d0 <__kernel_sin>
 800265c:	e7c8      	b.n	80025f0 <sin+0x1c>
 800265e:	bf00      	nop
 8002660:	3fe921fb 	.word	0x3fe921fb
 8002664:	7fefffff 	.word	0x7fefffff

08002668 <__ieee754_rem_pio2>:
 8002668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800266c:	4b98      	ldr	r3, [pc, #608]	; (80028d0 <__ieee754_rem_pio2+0x268>)
 800266e:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8002672:	429c      	cmp	r4, r3
 8002674:	b08f      	sub	sp, #60	; 0x3c
 8002676:	4606      	mov	r6, r0
 8002678:	460f      	mov	r7, r1
 800267a:	468a      	mov	sl, r1
 800267c:	4615      	mov	r5, r2
 800267e:	f340 8082 	ble.w	8002786 <__ieee754_rem_pio2+0x11e>
 8002682:	4b94      	ldr	r3, [pc, #592]	; (80028d4 <__ieee754_rem_pio2+0x26c>)
 8002684:	429c      	cmp	r4, r3
 8002686:	dc27      	bgt.n	80026d8 <__ieee754_rem_pio2+0x70>
 8002688:	2900      	cmp	r1, #0
 800268a:	a387      	add	r3, pc, #540	; (adr r3, 80028a8 <__ieee754_rem_pio2+0x240>)
 800268c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002690:	f340 81a4 	ble.w	80029dc <__ieee754_rem_pio2+0x374>
 8002694:	f001 f8f0 	bl	8003878 <__aeabi_dsub>
 8002698:	4b8f      	ldr	r3, [pc, #572]	; (80028d8 <__ieee754_rem_pio2+0x270>)
 800269a:	429c      	cmp	r4, r3
 800269c:	4606      	mov	r6, r0
 800269e:	460f      	mov	r7, r1
 80026a0:	f000 8088 	beq.w	80027b4 <__ieee754_rem_pio2+0x14c>
 80026a4:	a382      	add	r3, pc, #520	; (adr r3, 80028b0 <__ieee754_rem_pio2+0x248>)
 80026a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026aa:	f001 f8e5 	bl	8003878 <__aeabi_dsub>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	e9c5 2300 	strd	r2, r3, [r5]
 80026b6:	4630      	mov	r0, r6
 80026b8:	4639      	mov	r1, r7
 80026ba:	f001 f8dd 	bl	8003878 <__aeabi_dsub>
 80026be:	a37c      	add	r3, pc, #496	; (adr r3, 80028b0 <__ieee754_rem_pio2+0x248>)
 80026c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c4:	f001 f8d8 	bl	8003878 <__aeabi_dsub>
 80026c8:	f04f 0b01 	mov.w	fp, #1
 80026cc:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80026d0:	4658      	mov	r0, fp
 80026d2:	b00f      	add	sp, #60	; 0x3c
 80026d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026d8:	4b80      	ldr	r3, [pc, #512]	; (80028dc <__ieee754_rem_pio2+0x274>)
 80026da:	429c      	cmp	r4, r3
 80026dc:	f340 8088 	ble.w	80027f0 <__ieee754_rem_pio2+0x188>
 80026e0:	4b7f      	ldr	r3, [pc, #508]	; (80028e0 <__ieee754_rem_pio2+0x278>)
 80026e2:	429c      	cmp	r4, r3
 80026e4:	dc5b      	bgt.n	800279e <__ieee754_rem_pio2+0x136>
 80026e6:	ea4f 5b24 	mov.w	fp, r4, asr #20
 80026ea:	f2ab 4b16 	subw	fp, fp, #1046	; 0x416
 80026ee:	eba4 510b 	sub.w	r1, r4, fp, lsl #20
 80026f2:	4689      	mov	r9, r1
 80026f4:	4680      	mov	r8, r0
 80026f6:	f001 fd0d 	bl	8004114 <__aeabi_d2iz>
 80026fa:	f001 fa0b 	bl	8003b14 <__aeabi_i2d>
 80026fe:	4606      	mov	r6, r0
 8002700:	460f      	mov	r7, r1
 8002702:	4632      	mov	r2, r6
 8002704:	463b      	mov	r3, r7
 8002706:	4640      	mov	r0, r8
 8002708:	4649      	mov	r1, r9
 800270a:	e9cd 6708 	strd	r6, r7, [sp, #32]
 800270e:	f001 f8b3 	bl	8003878 <__aeabi_dsub>
 8002712:	2200      	movs	r2, #0
 8002714:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <__ieee754_rem_pio2+0x27c>)
 8002716:	f001 fa63 	bl	8003be0 <__aeabi_dmul>
 800271a:	4689      	mov	r9, r1
 800271c:	4680      	mov	r8, r0
 800271e:	f001 fcf9 	bl	8004114 <__aeabi_d2iz>
 8002722:	f001 f9f7 	bl	8003b14 <__aeabi_i2d>
 8002726:	4606      	mov	r6, r0
 8002728:	460f      	mov	r7, r1
 800272a:	4632      	mov	r2, r6
 800272c:	463b      	mov	r3, r7
 800272e:	4640      	mov	r0, r8
 8002730:	4649      	mov	r1, r9
 8002732:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
 8002736:	f001 f89f 	bl	8003878 <__aeabi_dsub>
 800273a:	2200      	movs	r2, #0
 800273c:	4b69      	ldr	r3, [pc, #420]	; (80028e4 <__ieee754_rem_pio2+0x27c>)
 800273e:	f001 fa4f 	bl	8003be0 <__aeabi_dmul>
 8002742:	2200      	movs	r2, #0
 8002744:	2300      	movs	r3, #0
 8002746:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800274a:	f001 fcb1 	bl	80040b0 <__aeabi_dcmpeq>
 800274e:	2800      	cmp	r0, #0
 8002750:	f000 816d 	beq.w	8002a2e <__ieee754_rem_pio2+0x3c6>
 8002754:	2300      	movs	r3, #0
 8002756:	4630      	mov	r0, r6
 8002758:	4639      	mov	r1, r7
 800275a:	2200      	movs	r2, #0
 800275c:	f001 fca8 	bl	80040b0 <__aeabi_dcmpeq>
 8002760:	2800      	cmp	r0, #0
 8002762:	bf14      	ite	ne
 8002764:	2301      	movne	r3, #1
 8002766:	2302      	moveq	r3, #2
 8002768:	2202      	movs	r2, #2
 800276a:	495f      	ldr	r1, [pc, #380]	; (80028e8 <__ieee754_rem_pio2+0x280>)
 800276c:	9200      	str	r2, [sp, #0]
 800276e:	9101      	str	r1, [sp, #4]
 8002770:	465a      	mov	r2, fp
 8002772:	a808      	add	r0, sp, #32
 8002774:	4629      	mov	r1, r5
 8002776:	f000 fabf 	bl	8002cf8 <__kernel_rem_pio2>
 800277a:	f1ba 0f00 	cmp.w	sl, #0
 800277e:	f2c0 814b 	blt.w	8002a18 <__ieee754_rem_pio2+0x3b0>
 8002782:	4683      	mov	fp, r0
 8002784:	e007      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 8002786:	2200      	movs	r2, #0
 8002788:	2300      	movs	r3, #0
 800278a:	e9c5 6700 	strd	r6, r7, [r5]
 800278e:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8002792:	f04f 0b00 	mov.w	fp, #0
 8002796:	4658      	mov	r0, fp
 8002798:	b00f      	add	sp, #60	; 0x3c
 800279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	f001 f869 	bl	8003878 <__aeabi_dsub>
 80027a6:	f04f 0b00 	mov.w	fp, #0
 80027aa:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80027ae:	e9c5 0100 	strd	r0, r1, [r5]
 80027b2:	e7f0      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 80027b4:	a340      	add	r3, pc, #256	; (adr r3, 80028b8 <__ieee754_rem_pio2+0x250>)
 80027b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ba:	f001 f85d 	bl	8003878 <__aeabi_dsub>
 80027be:	a340      	add	r3, pc, #256	; (adr r3, 80028c0 <__ieee754_rem_pio2+0x258>)
 80027c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c4:	4606      	mov	r6, r0
 80027c6:	460f      	mov	r7, r1
 80027c8:	f001 f856 	bl	8003878 <__aeabi_dsub>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	e9c5 2300 	strd	r2, r3, [r5]
 80027d4:	4630      	mov	r0, r6
 80027d6:	4639      	mov	r1, r7
 80027d8:	f001 f84e 	bl	8003878 <__aeabi_dsub>
 80027dc:	a338      	add	r3, pc, #224	; (adr r3, 80028c0 <__ieee754_rem_pio2+0x258>)
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	f001 f849 	bl	8003878 <__aeabi_dsub>
 80027e6:	f04f 0b01 	mov.w	fp, #1
 80027ea:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80027ee:	e7d2      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 80027f0:	f000 ff26 	bl	8003640 <fabs>
 80027f4:	a334      	add	r3, pc, #208	; (adr r3, 80028c8 <__ieee754_rem_pio2+0x260>)
 80027f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fa:	4606      	mov	r6, r0
 80027fc:	460f      	mov	r7, r1
 80027fe:	f001 f9ef 	bl	8003be0 <__aeabi_dmul>
 8002802:	2200      	movs	r2, #0
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <__ieee754_rem_pio2+0x284>)
 8002806:	f001 f839 	bl	800387c <__adddf3>
 800280a:	f001 fc83 	bl	8004114 <__aeabi_d2iz>
 800280e:	4683      	mov	fp, r0
 8002810:	f001 f980 	bl	8003b14 <__aeabi_i2d>
 8002814:	a324      	add	r3, pc, #144	; (adr r3, 80028a8 <__ieee754_rem_pio2+0x240>)
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800281e:	f001 f9df 	bl	8003be0 <__aeabi_dmul>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4630      	mov	r0, r6
 8002828:	4639      	mov	r1, r7
 800282a:	f001 f825 	bl	8003878 <__aeabi_dsub>
 800282e:	a320      	add	r3, pc, #128	; (adr r3, 80028b0 <__ieee754_rem_pio2+0x248>)
 8002830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002834:	4606      	mov	r6, r0
 8002836:	460f      	mov	r7, r1
 8002838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800283c:	f001 f9d0 	bl	8003be0 <__aeabi_dmul>
 8002840:	f1bb 0f1f 	cmp.w	fp, #31
 8002844:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002848:	4630      	mov	r0, r6
 800284a:	4639      	mov	r1, r7
 800284c:	dc52      	bgt.n	80028f4 <__ieee754_rem_pio2+0x28c>
 800284e:	4b28      	ldr	r3, [pc, #160]	; (80028f0 <__ieee754_rem_pio2+0x288>)
 8002850:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002858:	42a3      	cmp	r3, r4
 800285a:	d04b      	beq.n	80028f4 <__ieee754_rem_pio2+0x28c>
 800285c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002860:	f001 f80a 	bl	8003878 <__aeabi_dsub>
 8002864:	4680      	mov	r8, r0
 8002866:	4689      	mov	r9, r1
 8002868:	e9c5 8900 	strd	r8, r9, [r5]
 800286c:	4642      	mov	r2, r8
 800286e:	464b      	mov	r3, r9
 8002870:	4630      	mov	r0, r6
 8002872:	4639      	mov	r1, r7
 8002874:	f001 f800 	bl	8003878 <__aeabi_dsub>
 8002878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800287c:	f000 fffc 	bl	8003878 <__aeabi_dsub>
 8002880:	f1ba 0f00 	cmp.w	sl, #0
 8002884:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002888:	da85      	bge.n	8002796 <__ieee754_rem_pio2+0x12e>
 800288a:	f109 4400 	add.w	r4, r9, #2147483648	; 0x80000000
 800288e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002892:	f1cb 0b00 	rsb	fp, fp, #0
 8002896:	f8c5 8000 	str.w	r8, [r5]
 800289a:	606c      	str	r4, [r5, #4]
 800289c:	60a8      	str	r0, [r5, #8]
 800289e:	60eb      	str	r3, [r5, #12]
 80028a0:	e779      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 80028a2:	bf00      	nop
 80028a4:	f3af 8000 	nop.w
 80028a8:	54400000 	.word	0x54400000
 80028ac:	3ff921fb 	.word	0x3ff921fb
 80028b0:	1a626331 	.word	0x1a626331
 80028b4:	3dd0b461 	.word	0x3dd0b461
 80028b8:	1a600000 	.word	0x1a600000
 80028bc:	3dd0b461 	.word	0x3dd0b461
 80028c0:	2e037073 	.word	0x2e037073
 80028c4:	3ba3198a 	.word	0x3ba3198a
 80028c8:	6dc9c883 	.word	0x6dc9c883
 80028cc:	3fe45f30 	.word	0x3fe45f30
 80028d0:	3fe921fb 	.word	0x3fe921fb
 80028d4:	4002d97b 	.word	0x4002d97b
 80028d8:	3ff921fb 	.word	0x3ff921fb
 80028dc:	413921fb 	.word	0x413921fb
 80028e0:	7fefffff 	.word	0x7fefffff
 80028e4:	41700000 	.word	0x41700000
 80028e8:	08006a38 	.word	0x08006a38
 80028ec:	3fe00000 	.word	0x3fe00000
 80028f0:	080069b8 	.word	0x080069b8
 80028f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80028f8:	f000 ffbe 	bl	8003878 <__aeabi_dsub>
 80028fc:	1524      	asrs	r4, r4, #20
 80028fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002902:	1ae3      	subs	r3, r4, r3
 8002904:	4680      	mov	r8, r0
 8002906:	4689      	mov	r9, r1
 8002908:	2b10      	cmp	r3, #16
 800290a:	e9c5 8900 	strd	r8, r9, [r5]
 800290e:	ddad      	ble.n	800286c <__ieee754_rem_pio2+0x204>
 8002910:	a35b      	add	r3, pc, #364	; (adr r3, 8002a80 <__ieee754_rem_pio2+0x418>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800291a:	f001 f961 	bl	8003be0 <__aeabi_dmul>
 800291e:	4680      	mov	r8, r0
 8002920:	4689      	mov	r9, r1
 8002922:	4642      	mov	r2, r8
 8002924:	464b      	mov	r3, r9
 8002926:	4630      	mov	r0, r6
 8002928:	4639      	mov	r1, r7
 800292a:	f000 ffa5 	bl	8003878 <__aeabi_dsub>
 800292e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002936:	4630      	mov	r0, r6
 8002938:	4639      	mov	r1, r7
 800293a:	f000 ff9d 	bl	8003878 <__aeabi_dsub>
 800293e:	4642      	mov	r2, r8
 8002940:	464b      	mov	r3, r9
 8002942:	f000 ff99 	bl	8003878 <__aeabi_dsub>
 8002946:	a350      	add	r3, pc, #320	; (adr r3, 8002a88 <__ieee754_rem_pio2+0x420>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	4606      	mov	r6, r0
 800294e:	460f      	mov	r7, r1
 8002950:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002954:	f001 f944 	bl	8003be0 <__aeabi_dmul>
 8002958:	4632      	mov	r2, r6
 800295a:	463b      	mov	r3, r7
 800295c:	f000 ff8c 	bl	8003878 <__aeabi_dsub>
 8002960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002968:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800296c:	f000 ff84 	bl	8003878 <__aeabi_dsub>
 8002970:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002974:	1ae4      	subs	r4, r4, r3
 8002976:	4680      	mov	r8, r0
 8002978:	4689      	mov	r9, r1
 800297a:	2c31      	cmp	r4, #49	; 0x31
 800297c:	e9c5 8900 	strd	r8, r9, [r5]
 8002980:	dd75      	ble.n	8002a6e <__ieee754_rem_pio2+0x406>
 8002982:	a344      	add	r3, pc, #272	; (adr r3, 8002a94 <__ieee754_rem_pio2+0x42c>)
 8002984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800298c:	f001 f928 	bl	8003be0 <__aeabi_dmul>
 8002990:	4680      	mov	r8, r0
 8002992:	4689      	mov	r9, r1
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800299c:	f000 ff6c 	bl	8003878 <__aeabi_dsub>
 80029a0:	4606      	mov	r6, r0
 80029a2:	460f      	mov	r7, r1
 80029a4:	4632      	mov	r2, r6
 80029a6:	463b      	mov	r3, r7
 80029a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80029ac:	f000 ff64 	bl	8003878 <__aeabi_dsub>
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	f000 ff60 	bl	8003878 <__aeabi_dsub>
 80029b8:	a338      	add	r3, pc, #224	; (adr r3, 8002a9c <__ieee754_rem_pio2+0x434>)
 80029ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029be:	4680      	mov	r8, r0
 80029c0:	4689      	mov	r9, r1
 80029c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80029c6:	f001 f90b 	bl	8003be0 <__aeabi_dmul>
 80029ca:	4642      	mov	r2, r8
 80029cc:	464b      	mov	r3, r9
 80029ce:	f000 ff53 	bl	8003878 <__aeabi_dsub>
 80029d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80029d6:	4630      	mov	r0, r6
 80029d8:	4639      	mov	r1, r7
 80029da:	e73f      	b.n	800285c <__ieee754_rem_pio2+0x1f4>
 80029dc:	f000 ff4e 	bl	800387c <__adddf3>
 80029e0:	4b2b      	ldr	r3, [pc, #172]	; (8002a90 <__ieee754_rem_pio2+0x428>)
 80029e2:	429c      	cmp	r4, r3
 80029e4:	4606      	mov	r6, r0
 80029e6:	460f      	mov	r7, r1
 80029e8:	d023      	beq.n	8002a32 <__ieee754_rem_pio2+0x3ca>
 80029ea:	a323      	add	r3, pc, #140	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x410>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f000 ff44 	bl	800387c <__adddf3>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	e9c5 2300 	strd	r2, r3, [r5]
 80029fc:	4630      	mov	r0, r6
 80029fe:	4639      	mov	r1, r7
 8002a00:	f000 ff3a 	bl	8003878 <__aeabi_dsub>
 8002a04:	a31c      	add	r3, pc, #112	; (adr r3, 8002a78 <__ieee754_rem_pio2+0x410>)
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f000 ff37 	bl	800387c <__adddf3>
 8002a0e:	f04f 3bff 	mov.w	fp, #4294967295
 8002a12:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002a16:	e6be      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 8002a18:	686a      	ldr	r2, [r5, #4]
 8002a1a:	68eb      	ldr	r3, [r5, #12]
 8002a1c:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8002a20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002a24:	f1c0 0b00 	rsb	fp, r0, #0
 8002a28:	606a      	str	r2, [r5, #4]
 8002a2a:	60eb      	str	r3, [r5, #12]
 8002a2c:	e6b3      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e69a      	b.n	8002768 <__ieee754_rem_pio2+0x100>
 8002a32:	a313      	add	r3, pc, #76	; (adr r3, 8002a80 <__ieee754_rem_pio2+0x418>)
 8002a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a38:	f000 ff20 	bl	800387c <__adddf3>
 8002a3c:	a312      	add	r3, pc, #72	; (adr r3, 8002a88 <__ieee754_rem_pio2+0x420>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	4606      	mov	r6, r0
 8002a44:	460f      	mov	r7, r1
 8002a46:	f000 ff19 	bl	800387c <__adddf3>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	e9c5 2300 	strd	r2, r3, [r5]
 8002a52:	4630      	mov	r0, r6
 8002a54:	4639      	mov	r1, r7
 8002a56:	f000 ff0f 	bl	8003878 <__aeabi_dsub>
 8002a5a:	a30b      	add	r3, pc, #44	; (adr r3, 8002a88 <__ieee754_rem_pio2+0x420>)
 8002a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a60:	f000 ff0c 	bl	800387c <__adddf3>
 8002a64:	f04f 3bff 	mov.w	fp, #4294967295
 8002a68:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8002a6c:	e693      	b.n	8002796 <__ieee754_rem_pio2+0x12e>
 8002a6e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002a72:	e6fb      	b.n	800286c <__ieee754_rem_pio2+0x204>
 8002a74:	f3af 8000 	nop.w
 8002a78:	1a626331 	.word	0x1a626331
 8002a7c:	3dd0b461 	.word	0x3dd0b461
 8002a80:	1a600000 	.word	0x1a600000
 8002a84:	3dd0b461 	.word	0x3dd0b461
 8002a88:	2e037073 	.word	0x2e037073
 8002a8c:	3ba3198a 	.word	0x3ba3198a
 8002a90:	3ff921fb 	.word	0x3ff921fb
 8002a94:	2e000000 	.word	0x2e000000
 8002a98:	3ba3198a 	.word	0x3ba3198a
 8002a9c:	252049c1 	.word	0x252049c1
 8002aa0:	397b839a 	.word	0x397b839a
 8002aa4:	f3af 8000 	nop.w

08002aa8 <__kernel_cos>:
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	f021 4900 	bic.w	r9, r1, #2147483648	; 0x80000000
 8002ab0:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	4606      	mov	r6, r0
 8002ab8:	460f      	mov	r7, r1
 8002aba:	4692      	mov	sl, r2
 8002abc:	469b      	mov	fp, r3
 8002abe:	da6b      	bge.n	8002b98 <__kernel_cos+0xf0>
 8002ac0:	f001 fb28 	bl	8004114 <__aeabi_d2iz>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	f000 80ea 	beq.w	8002c9e <__kernel_cos+0x1f6>
 8002aca:	4632      	mov	r2, r6
 8002acc:	463b      	mov	r3, r7
 8002ace:	4630      	mov	r0, r6
 8002ad0:	4639      	mov	r1, r7
 8002ad2:	f001 f885 	bl	8003be0 <__aeabi_dmul>
 8002ad6:	a374      	add	r3, pc, #464	; (adr r3, 8002ca8 <__kernel_cos+0x200>)
 8002ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002adc:	4604      	mov	r4, r0
 8002ade:	460d      	mov	r5, r1
 8002ae0:	f001 f87e 	bl	8003be0 <__aeabi_dmul>
 8002ae4:	a372      	add	r3, pc, #456	; (adr r3, 8002cb0 <__kernel_cos+0x208>)
 8002ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aea:	f000 fec7 	bl	800387c <__adddf3>
 8002aee:	4622      	mov	r2, r4
 8002af0:	462b      	mov	r3, r5
 8002af2:	f001 f875 	bl	8003be0 <__aeabi_dmul>
 8002af6:	a370      	add	r3, pc, #448	; (adr r3, 8002cb8 <__kernel_cos+0x210>)
 8002af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afc:	f000 febc 	bl	8003878 <__aeabi_dsub>
 8002b00:	4622      	mov	r2, r4
 8002b02:	462b      	mov	r3, r5
 8002b04:	f001 f86c 	bl	8003be0 <__aeabi_dmul>
 8002b08:	a36d      	add	r3, pc, #436	; (adr r3, 8002cc0 <__kernel_cos+0x218>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f000 feb5 	bl	800387c <__adddf3>
 8002b12:	4622      	mov	r2, r4
 8002b14:	462b      	mov	r3, r5
 8002b16:	f001 f863 	bl	8003be0 <__aeabi_dmul>
 8002b1a:	a36b      	add	r3, pc, #428	; (adr r3, 8002cc8 <__kernel_cos+0x220>)
 8002b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b20:	f000 feaa 	bl	8003878 <__aeabi_dsub>
 8002b24:	4622      	mov	r2, r4
 8002b26:	462b      	mov	r3, r5
 8002b28:	f001 f85a 	bl	8003be0 <__aeabi_dmul>
 8002b2c:	a368      	add	r3, pc, #416	; (adr r3, 8002cd0 <__kernel_cos+0x228>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f000 fea3 	bl	800387c <__adddf3>
 8002b36:	4622      	mov	r2, r4
 8002b38:	462b      	mov	r3, r5
 8002b3a:	f001 f851 	bl	8003be0 <__aeabi_dmul>
 8002b3e:	e9cd 0100 	strd	r0, r1, [sp]
 8002b42:	4620      	mov	r0, r4
 8002b44:	4629      	mov	r1, r5
 8002b46:	2200      	movs	r2, #0
 8002b48:	4b65      	ldr	r3, [pc, #404]	; (8002ce0 <__kernel_cos+0x238>)
 8002b4a:	f001 f849 	bl	8003be0 <__aeabi_dmul>
 8002b4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002b52:	4680      	mov	r8, r0
 8002b54:	4689      	mov	r9, r1
 8002b56:	4620      	mov	r0, r4
 8002b58:	4629      	mov	r1, r5
 8002b5a:	f001 f841 	bl	8003be0 <__aeabi_dmul>
 8002b5e:	4652      	mov	r2, sl
 8002b60:	4604      	mov	r4, r0
 8002b62:	460d      	mov	r5, r1
 8002b64:	465b      	mov	r3, fp
 8002b66:	4630      	mov	r0, r6
 8002b68:	4639      	mov	r1, r7
 8002b6a:	f001 f839 	bl	8003be0 <__aeabi_dmul>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4620      	mov	r0, r4
 8002b74:	4629      	mov	r1, r5
 8002b76:	f000 fe7f 	bl	8003878 <__aeabi_dsub>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4640      	mov	r0, r8
 8002b80:	4649      	mov	r1, r9
 8002b82:	f000 fe79 	bl	8003878 <__aeabi_dsub>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	4955      	ldr	r1, [pc, #340]	; (8002ce4 <__kernel_cos+0x23c>)
 8002b8e:	f000 fe73 	bl	8003878 <__aeabi_dsub>
 8002b92:	b005      	add	sp, #20
 8002b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	f001 f820 	bl	8003be0 <__aeabi_dmul>
 8002ba0:	a341      	add	r3, pc, #260	; (adr r3, 8002ca8 <__kernel_cos+0x200>)
 8002ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	460d      	mov	r5, r1
 8002baa:	f001 f819 	bl	8003be0 <__aeabi_dmul>
 8002bae:	a340      	add	r3, pc, #256	; (adr r3, 8002cb0 <__kernel_cos+0x208>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f000 fe62 	bl	800387c <__adddf3>
 8002bb8:	4622      	mov	r2, r4
 8002bba:	462b      	mov	r3, r5
 8002bbc:	f001 f810 	bl	8003be0 <__aeabi_dmul>
 8002bc0:	a33d      	add	r3, pc, #244	; (adr r3, 8002cb8 <__kernel_cos+0x210>)
 8002bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc6:	f000 fe57 	bl	8003878 <__aeabi_dsub>
 8002bca:	4622      	mov	r2, r4
 8002bcc:	462b      	mov	r3, r5
 8002bce:	f001 f807 	bl	8003be0 <__aeabi_dmul>
 8002bd2:	a33b      	add	r3, pc, #236	; (adr r3, 8002cc0 <__kernel_cos+0x218>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f000 fe50 	bl	800387c <__adddf3>
 8002bdc:	4622      	mov	r2, r4
 8002bde:	462b      	mov	r3, r5
 8002be0:	f000 fffe 	bl	8003be0 <__aeabi_dmul>
 8002be4:	a338      	add	r3, pc, #224	; (adr r3, 8002cc8 <__kernel_cos+0x220>)
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f000 fe45 	bl	8003878 <__aeabi_dsub>
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	f000 fff5 	bl	8003be0 <__aeabi_dmul>
 8002bf6:	a336      	add	r3, pc, #216	; (adr r3, 8002cd0 <__kernel_cos+0x228>)
 8002bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfc:	f000 fe3e 	bl	800387c <__adddf3>
 8002c00:	462b      	mov	r3, r5
 8002c02:	4622      	mov	r2, r4
 8002c04:	f000 ffec 	bl	8003be0 <__aeabi_dmul>
 8002c08:	4b37      	ldr	r3, [pc, #220]	; (8002ce8 <__kernel_cos+0x240>)
 8002c0a:	4599      	cmp	r9, r3
 8002c0c:	e9cd 0100 	strd	r0, r1, [sp]
 8002c10:	dd97      	ble.n	8002b42 <__kernel_cos+0x9a>
 8002c12:	4b36      	ldr	r3, [pc, #216]	; (8002cec <__kernel_cos+0x244>)
 8002c14:	4599      	cmp	r9, r3
 8002c16:	dc39      	bgt.n	8002c8c <__kernel_cos+0x1e4>
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 8002c1e:	2000      	movs	r0, #0
 8002c20:	4930      	ldr	r1, [pc, #192]	; (8002ce4 <__kernel_cos+0x23c>)
 8002c22:	4690      	mov	r8, r2
 8002c24:	4699      	mov	r9, r3
 8002c26:	f000 fe27 	bl	8003878 <__aeabi_dsub>
 8002c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c2e:	4620      	mov	r0, r4
 8002c30:	4629      	mov	r1, r5
 8002c32:	2200      	movs	r2, #0
 8002c34:	4b2a      	ldr	r3, [pc, #168]	; (8002ce0 <__kernel_cos+0x238>)
 8002c36:	f000 ffd3 	bl	8003be0 <__aeabi_dmul>
 8002c3a:	4642      	mov	r2, r8
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	f000 fe1b 	bl	8003878 <__aeabi_dsub>
 8002c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c46:	4680      	mov	r8, r0
 8002c48:	4689      	mov	r9, r1
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	4629      	mov	r1, r5
 8002c4e:	f000 ffc7 	bl	8003be0 <__aeabi_dmul>
 8002c52:	4652      	mov	r2, sl
 8002c54:	4604      	mov	r4, r0
 8002c56:	460d      	mov	r5, r1
 8002c58:	465b      	mov	r3, fp
 8002c5a:	4630      	mov	r0, r6
 8002c5c:	4639      	mov	r1, r7
 8002c5e:	f000 ffbf 	bl	8003be0 <__aeabi_dmul>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4620      	mov	r0, r4
 8002c68:	4629      	mov	r1, r5
 8002c6a:	f000 fe05 	bl	8003878 <__aeabi_dsub>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4640      	mov	r0, r8
 8002c74:	4649      	mov	r1, r9
 8002c76:	f000 fdff 	bl	8003878 <__aeabi_dsub>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002c82:	f000 fdf9 	bl	8003878 <__aeabi_dsub>
 8002c86:	b005      	add	sp, #20
 8002c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c8c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8002cd8 <__kernel_cos+0x230>
 8002c90:	f04f 0800 	mov.w	r8, #0
 8002c94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c98:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8002cf0 <__kernel_cos+0x248>
 8002c9c:	e7c7      	b.n	8002c2e <__kernel_cos+0x186>
 8002c9e:	4911      	ldr	r1, [pc, #68]	; (8002ce4 <__kernel_cos+0x23c>)
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	b005      	add	sp, #20
 8002ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca8:	be8838d4 	.word	0xbe8838d4
 8002cac:	bda8fae9 	.word	0xbda8fae9
 8002cb0:	bdb4b1c4 	.word	0xbdb4b1c4
 8002cb4:	3e21ee9e 	.word	0x3e21ee9e
 8002cb8:	809c52ad 	.word	0x809c52ad
 8002cbc:	3e927e4f 	.word	0x3e927e4f
 8002cc0:	19cb1590 	.word	0x19cb1590
 8002cc4:	3efa01a0 	.word	0x3efa01a0
 8002cc8:	16c15177 	.word	0x16c15177
 8002ccc:	3f56c16c 	.word	0x3f56c16c
 8002cd0:	5555554c 	.word	0x5555554c
 8002cd4:	3fa55555 	.word	0x3fa55555
 8002cd8:	00000000 	.word	0x00000000
 8002cdc:	3fe70000 	.word	0x3fe70000
 8002ce0:	3fe00000 	.word	0x3fe00000
 8002ce4:	3ff00000 	.word	0x3ff00000
 8002ce8:	3fd33332 	.word	0x3fd33332
 8002cec:	3fe90000 	.word	0x3fe90000
 8002cf0:	3fd20000 	.word	0x3fd20000
 8002cf4:	f3af 8000 	nop.w

08002cf8 <__kernel_rem_pio2>:
 8002cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cfc:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8002d00:	4cc6      	ldr	r4, [pc, #792]	; (800301c <__kernel_rem_pio2+0x324>)
 8002d02:	9ea4      	ldr	r6, [sp, #656]	; 0x290
 8002d04:	4dc6      	ldr	r5, [pc, #792]	; (8003020 <__kernel_rem_pio2+0x328>)
 8002d06:	f854 4026 	ldr.w	r4, [r4, r6, lsl #2]
 8002d0a:	9407      	str	r4, [sp, #28]
 8002d0c:	4626      	mov	r6, r4
 8002d0e:	1ed4      	subs	r4, r2, #3
 8002d10:	fb85 7504 	smull	r7, r5, r5, r4
 8002d14:	17e4      	asrs	r4, r4, #31
 8002d16:	ebc4 04a5 	rsb	r4, r4, r5, asr #2
 8002d1a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002d1e:	461d      	mov	r5, r3
 8002d20:	930a      	str	r3, [sp, #40]	; 0x28
 8002d22:	43e3      	mvns	r3, r4
 8002d24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002d28:	3d01      	subs	r5, #1
 8002d2a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002d2e:	9306      	str	r3, [sp, #24]
 8002d30:	462b      	mov	r3, r5
 8002d32:	940b      	str	r4, [sp, #44]	; 0x2c
 8002d34:	9500      	str	r5, [sp, #0]
 8002d36:	1b65      	subs	r5, r4, r5
 8002d38:	199c      	adds	r4, r3, r6
 8002d3a:	9003      	str	r0, [sp, #12]
 8002d3c:	9108      	str	r1, [sp, #32]
 8002d3e:	d416      	bmi.n	8002d6e <__kernel_rem_pio2+0x76>
 8002d40:	442c      	add	r4, r5
 8002d42:	3401      	adds	r4, #1
 8002d44:	ae22      	add	r6, sp, #136	; 0x88
 8002d46:	9fa5      	ldr	r7, [sp, #660]	; 0x294
 8002d48:	e008      	b.n	8002d5c <__kernel_rem_pio2+0x64>
 8002d4a:	f857 0025 	ldr.w	r0, [r7, r5, lsl #2]
 8002d4e:	f000 fee1 	bl	8003b14 <__aeabi_i2d>
 8002d52:	3501      	adds	r5, #1
 8002d54:	42a5      	cmp	r5, r4
 8002d56:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d5a:	d008      	beq.n	8002d6e <__kernel_rem_pio2+0x76>
 8002d5c:	2d00      	cmp	r5, #0
 8002d5e:	daf4      	bge.n	8002d4a <__kernel_rem_pio2+0x52>
 8002d60:	3501      	adds	r5, #1
 8002d62:	2000      	movs	r0, #0
 8002d64:	2100      	movs	r1, #0
 8002d66:	42a5      	cmp	r5, r4
 8002d68:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d6c:	d1f6      	bne.n	8002d5c <__kernel_rem_pio2+0x64>
 8002d6e:	9b07      	ldr	r3, [sp, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	db2a      	blt.n	8002dca <__kernel_rem_pio2+0xd2>
 8002d74:	9b07      	ldr	r3, [sp, #28]
 8002d76:	f103 0a01 	add.w	sl, r3, #1
 8002d7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d7c:	af22      	add	r7, sp, #136	; 0x88
 8002d7e:	eb07 0aca 	add.w	sl, r7, sl, lsl #3
 8002d82:	f50d 78e4 	add.w	r8, sp, #456	; 0x1c8
 8002d86:	ea4f 0bc3 	mov.w	fp, r3, lsl #3
 8002d8a:	463d      	mov	r5, r7
 8002d8c:	9b00      	ldr	r3, [sp, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f2c0 8180 	blt.w	8003094 <__kernel_rem_pio2+0x39c>
 8002d94:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8002d98:	eb05 040b 	add.w	r4, r5, fp
 8002d9c:	2600      	movs	r6, #0
 8002d9e:	2700      	movs	r7, #0
 8002da0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002da4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002da8:	f000 ff1a 	bl	8003be0 <__aeabi_dmul>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4630      	mov	r0, r6
 8002db2:	4639      	mov	r1, r7
 8002db4:	f000 fd62 	bl	800387c <__adddf3>
 8002db8:	42a5      	cmp	r5, r4
 8002dba:	4606      	mov	r6, r0
 8002dbc:	460f      	mov	r7, r1
 8002dbe:	d1ef      	bne.n	8002da0 <__kernel_rem_pio2+0xa8>
 8002dc0:	3508      	adds	r5, #8
 8002dc2:	4555      	cmp	r5, sl
 8002dc4:	e8e8 6702 	strd	r6, r7, [r8], #8
 8002dc8:	d1e0      	bne.n	8002d8c <__kernel_rem_pio2+0x94>
 8002dca:	9d07      	ldr	r5, [sp, #28]
 8002dcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002dce:	f105 4380 	add.w	r3, r5, #1073741824	; 0x40000000
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	a80e      	add	r0, sp, #56	; 0x38
 8002dd8:	1d19      	adds	r1, r3, #4
 8002dda:	ebc2 7242 	rsb	r2, r2, r2, lsl #29
 8002dde:	4403      	add	r3, r0
 8002de0:	4401      	add	r1, r0
 8002de2:	930c      	str	r3, [sp, #48]	; 0x30
 8002de4:	00d3      	lsls	r3, r2, #3
 8002de6:	910d      	str	r1, [sp, #52]	; 0x34
 8002de8:	9305      	str	r3, [sp, #20]
 8002dea:	00ec      	lsls	r4, r5, #3
 8002dec:	ab9a      	add	r3, sp, #616	; 0x268
 8002dee:	4423      	add	r3, r4
 8002df0:	2d00      	cmp	r5, #0
 8002df2:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002df6:	dd28      	ble.n	8002e4a <__kernel_rem_pio2+0x152>
 8002df8:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8002dfc:	445c      	add	r4, fp
 8002dfe:	f10d 0a34 	add.w	sl, sp, #52	; 0x34
 8002e02:	2200      	movs	r2, #0
 8002e04:	4b87      	ldr	r3, [pc, #540]	; (8003024 <__kernel_rem_pio2+0x32c>)
 8002e06:	4630      	mov	r0, r6
 8002e08:	4639      	mov	r1, r7
 8002e0a:	f000 fee9 	bl	8003be0 <__aeabi_dmul>
 8002e0e:	f001 f981 	bl	8004114 <__aeabi_d2iz>
 8002e12:	f000 fe7f 	bl	8003b14 <__aeabi_i2d>
 8002e16:	2200      	movs	r2, #0
 8002e18:	4b83      	ldr	r3, [pc, #524]	; (8003028 <__kernel_rem_pio2+0x330>)
 8002e1a:	4680      	mov	r8, r0
 8002e1c:	4689      	mov	r9, r1
 8002e1e:	f000 fedf 	bl	8003be0 <__aeabi_dmul>
 8002e22:	4602      	mov	r2, r0
 8002e24:	460b      	mov	r3, r1
 8002e26:	4630      	mov	r0, r6
 8002e28:	4639      	mov	r1, r7
 8002e2a:	f000 fd25 	bl	8003878 <__aeabi_dsub>
 8002e2e:	f001 f971 	bl	8004114 <__aeabi_d2iz>
 8002e32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002e36:	f84a 0f04 	str.w	r0, [sl, #4]!
 8002e3a:	4649      	mov	r1, r9
 8002e3c:	4640      	mov	r0, r8
 8002e3e:	f000 fd1d 	bl	800387c <__adddf3>
 8002e42:	455c      	cmp	r4, fp
 8002e44:	4606      	mov	r6, r0
 8002e46:	460f      	mov	r7, r1
 8002e48:	d1db      	bne.n	8002e02 <__kernel_rem_pio2+0x10a>
 8002e4a:	9c06      	ldr	r4, [sp, #24]
 8002e4c:	4630      	mov	r0, r6
 8002e4e:	4639      	mov	r1, r7
 8002e50:	4622      	mov	r2, r4
 8002e52:	f000 fc81 	bl	8003758 <scalbn>
 8002e56:	2200      	movs	r2, #0
 8002e58:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	460f      	mov	r7, r1
 8002e60:	f000 febe 	bl	8003be0 <__aeabi_dmul>
 8002e64:	f000 fbf0 	bl	8003648 <floor>
 8002e68:	2200      	movs	r2, #0
 8002e6a:	4b70      	ldr	r3, [pc, #448]	; (800302c <__kernel_rem_pio2+0x334>)
 8002e6c:	f000 feb8 	bl	8003be0 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4630      	mov	r0, r6
 8002e76:	4639      	mov	r1, r7
 8002e78:	f000 fcfe 	bl	8003878 <__aeabi_dsub>
 8002e7c:	460f      	mov	r7, r1
 8002e7e:	4606      	mov	r6, r0
 8002e80:	f001 f948 	bl	8004114 <__aeabi_d2iz>
 8002e84:	4680      	mov	r8, r0
 8002e86:	f000 fe45 	bl	8003b14 <__aeabi_i2d>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4630      	mov	r0, r6
 8002e90:	4639      	mov	r1, r7
 8002e92:	f000 fcf1 	bl	8003878 <__aeabi_dsub>
 8002e96:	2c00      	cmp	r4, #0
 8002e98:	4606      	mov	r6, r0
 8002e9a:	460f      	mov	r7, r1
 8002e9c:	f340 80e1 	ble.w	8003062 <__kernel_rem_pio2+0x36a>
 8002ea0:	1e69      	subs	r1, r5, #1
 8002ea2:	ab0e      	add	r3, sp, #56	; 0x38
 8002ea4:	f1c4 0218 	rsb	r2, r4, #24
 8002ea8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002eac:	fa43 f002 	asr.w	r0, r3, r2
 8002eb0:	fa00 f902 	lsl.w	r9, r0, r2
 8002eb4:	f1c4 0217 	rsb	r2, r4, #23
 8002eb8:	ac0e      	add	r4, sp, #56	; 0x38
 8002eba:	ebc9 0303 	rsb	r3, r9, r3
 8002ebe:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
 8002ec2:	4480      	add	r8, r0
 8002ec4:	fa43 f902 	asr.w	r9, r3, r2
 8002ec8:	f1b9 0f00 	cmp.w	r9, #0
 8002ecc:	dd32      	ble.n	8002f34 <__kernel_rem_pio2+0x23c>
 8002ece:	2d00      	cmp	r5, #0
 8002ed0:	f108 0801 	add.w	r8, r8, #1
 8002ed4:	f340 8271 	ble.w	80033ba <__kernel_rem_pio2+0x6c2>
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4614      	mov	r4, r2
 8002edc:	a90d      	add	r1, sp, #52	; 0x34
 8002ede:	e007      	b.n	8002ef0 <__kernel_rem_pio2+0x1f8>
 8002ee0:	f1c3 7080 	rsb	r0, r3, #16777216	; 0x1000000
 8002ee4:	b10b      	cbz	r3, 8002eea <__kernel_rem_pio2+0x1f2>
 8002ee6:	6008      	str	r0, [r1, #0]
 8002ee8:	2401      	movs	r4, #1
 8002eea:	3201      	adds	r2, #1
 8002eec:	4295      	cmp	r5, r2
 8002eee:	dd0d      	ble.n	8002f0c <__kernel_rem_pio2+0x214>
 8002ef0:	f851 3f04 	ldr.w	r3, [r1, #4]!
 8002ef4:	2c00      	cmp	r4, #0
 8002ef6:	d0f3      	beq.n	8002ee0 <__kernel_rem_pio2+0x1e8>
 8002ef8:	f1c3 13ff 	rsb	r3, r3, #16711935	; 0xff00ff
 8002efc:	3201      	adds	r2, #1
 8002efe:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002f02:	4295      	cmp	r5, r2
 8002f04:	600b      	str	r3, [r1, #0]
 8002f06:	f04f 0401 	mov.w	r4, #1
 8002f0a:	dcf1      	bgt.n	8002ef0 <__kernel_rem_pio2+0x1f8>
 8002f0c:	9b06      	ldr	r3, [sp, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	dd0d      	ble.n	8002f2e <__kernel_rem_pio2+0x236>
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	f000 80ad 	beq.w	8003072 <__kernel_rem_pio2+0x37a>
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d108      	bne.n	8002f2e <__kernel_rem_pio2+0x236>
 8002f1c:	1e6a      	subs	r2, r5, #1
 8002f1e:	ab0e      	add	r3, sp, #56	; 0x38
 8002f20:	a90e      	add	r1, sp, #56	; 0x38
 8002f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f26:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002f2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002f2e:	f1b9 0f02 	cmp.w	r9, #2
 8002f32:	d07d      	beq.n	8003030 <__kernel_rem_pio2+0x338>
 8002f34:	4630      	mov	r0, r6
 8002f36:	4639      	mov	r1, r7
 8002f38:	2200      	movs	r2, #0
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f001 f8b8 	bl	80040b0 <__aeabi_dcmpeq>
 8002f40:	2800      	cmp	r0, #0
 8002f42:	f000 80c3 	beq.w	80030cc <__kernel_rem_pio2+0x3d4>
 8002f46:	9b07      	ldr	r3, [sp, #28]
 8002f48:	f105 3aff 	add.w	sl, r5, #4294967295
 8002f4c:	4553      	cmp	r3, sl
 8002f4e:	dc0d      	bgt.n	8002f6c <__kernel_rem_pio2+0x274>
 8002f50:	ab0e      	add	r3, sp, #56	; 0x38
 8002f52:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f54:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8002f5e:	4283      	cmp	r3, r0
 8002f60:	ea42 0201 	orr.w	r2, r2, r1
 8002f64:	d1f9      	bne.n	8002f5a <__kernel_rem_pio2+0x262>
 8002f66:	2a00      	cmp	r2, #0
 8002f68:	f040 820c 	bne.w	8003384 <__kernel_rem_pio2+0x68c>
 8002f6c:	9b07      	ldr	r3, [sp, #28]
 8002f6e:	aa0e      	add	r2, sp, #56	; 0x38
 8002f70:	3b01      	subs	r3, #1
 8002f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	f040 821d 	bne.w	80033b6 <__kernel_rem_pio2+0x6be>
 8002f7c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002f7e:	2301      	movs	r3, #1
 8002f80:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8002f84:	3301      	adds	r3, #1
 8002f86:	2900      	cmp	r1, #0
 8002f88:	d0fa      	beq.n	8002f80 <__kernel_rem_pio2+0x288>
 8002f8a:	18eb      	adds	r3, r5, r3
 8002f8c:	f105 0a01 	add.w	sl, r5, #1
 8002f90:	459a      	cmp	sl, r3
 8002f92:	9309      	str	r3, [sp, #36]	; 0x24
 8002f94:	dc40      	bgt.n	8003018 <__kernel_rem_pio2+0x320>
 8002f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002f98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f9a:	eb0a 0903 	add.w	r9, sl, r3
 8002f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fa0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002fa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8002fac:	4415      	add	r5, r2
 8002fae:	eb01 0b02 	add.w	fp, r1, r2
 8002fb2:	eb03 0989 	add.w	r9, r3, r9, lsl #2
 8002fb6:	ab22      	add	r3, sp, #136	; 0x88
 8002fb8:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8002fbc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8002fc0:	9304      	str	r3, [sp, #16]
 8002fc2:	ab72      	add	r3, sp, #456	; 0x1c8
 8002fc4:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8002fc8:	f859 0f04 	ldr.w	r0, [r9, #4]!
 8002fcc:	f000 fda2 	bl	8003b14 <__aeabi_i2d>
 8002fd0:	9b00      	ldr	r3, [sp, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	e8e8 0102 	strd	r0, r1, [r8], #8
 8002fd8:	f04f 0600 	mov.w	r6, #0
 8002fdc:	f04f 0700 	mov.w	r7, #0
 8002fe0:	db15      	blt.n	800300e <__kernel_rem_pio2+0x316>
 8002fe2:	9b05      	ldr	r3, [sp, #20]
 8002fe4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8002fe8:	eb08 0503 	add.w	r5, r8, r3
 8002fec:	4644      	mov	r4, r8
 8002fee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8002ff2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8002ff6:	f000 fdf3 	bl	8003be0 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4630      	mov	r0, r6
 8003000:	4639      	mov	r1, r7
 8003002:	f000 fc3b 	bl	800387c <__adddf3>
 8003006:	42ac      	cmp	r4, r5
 8003008:	4606      	mov	r6, r0
 800300a:	460f      	mov	r7, r1
 800300c:	d1ef      	bne.n	8002fee <__kernel_rem_pio2+0x2f6>
 800300e:	9b04      	ldr	r3, [sp, #16]
 8003010:	4598      	cmp	r8, r3
 8003012:	e8ea 6702 	strd	r6, r7, [sl], #8
 8003016:	d1d7      	bne.n	8002fc8 <__kernel_rem_pio2+0x2d0>
 8003018:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800301a:	e6e6      	b.n	8002dea <__kernel_rem_pio2+0xf2>
 800301c:	08006b40 	.word	0x08006b40
 8003020:	2aaaaaab 	.word	0x2aaaaaab
 8003024:	3e700000 	.word	0x3e700000
 8003028:	41700000 	.word	0x41700000
 800302c:	40200000 	.word	0x40200000
 8003030:	4632      	mov	r2, r6
 8003032:	463b      	mov	r3, r7
 8003034:	2000      	movs	r0, #0
 8003036:	49bb      	ldr	r1, [pc, #748]	; (8003324 <__kernel_rem_pio2+0x62c>)
 8003038:	f000 fc1e 	bl	8003878 <__aeabi_dsub>
 800303c:	4606      	mov	r6, r0
 800303e:	460f      	mov	r7, r1
 8003040:	2c00      	cmp	r4, #0
 8003042:	f43f af77 	beq.w	8002f34 <__kernel_rem_pio2+0x23c>
 8003046:	9a06      	ldr	r2, [sp, #24]
 8003048:	49b6      	ldr	r1, [pc, #728]	; (8003324 <__kernel_rem_pio2+0x62c>)
 800304a:	2000      	movs	r0, #0
 800304c:	f000 fb84 	bl	8003758 <scalbn>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4630      	mov	r0, r6
 8003056:	4639      	mov	r1, r7
 8003058:	f000 fc0e 	bl	8003878 <__aeabi_dsub>
 800305c:	4606      	mov	r6, r0
 800305e:	460f      	mov	r7, r1
 8003060:	e768      	b.n	8002f34 <__kernel_rem_pio2+0x23c>
 8003062:	d110      	bne.n	8003086 <__kernel_rem_pio2+0x38e>
 8003064:	1e6b      	subs	r3, r5, #1
 8003066:	aa0e      	add	r2, sp, #56	; 0x38
 8003068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800306c:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8003070:	e72a      	b.n	8002ec8 <__kernel_rem_pio2+0x1d0>
 8003072:	1e6a      	subs	r2, r5, #1
 8003074:	ab0e      	add	r3, sp, #56	; 0x38
 8003076:	a90e      	add	r1, sp, #56	; 0x38
 8003078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800307c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8003080:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8003084:	e753      	b.n	8002f2e <__kernel_rem_pio2+0x236>
 8003086:	2200      	movs	r2, #0
 8003088:	4ba7      	ldr	r3, [pc, #668]	; (8003328 <__kernel_rem_pio2+0x630>)
 800308a:	f001 f82f 	bl	80040ec <__aeabi_dcmpge>
 800308e:	b950      	cbnz	r0, 80030a6 <__kernel_rem_pio2+0x3ae>
 8003090:	4681      	mov	r9, r0
 8003092:	e74f      	b.n	8002f34 <__kernel_rem_pio2+0x23c>
 8003094:	3508      	adds	r5, #8
 8003096:	2600      	movs	r6, #0
 8003098:	2700      	movs	r7, #0
 800309a:	4555      	cmp	r5, sl
 800309c:	e8e8 6702 	strd	r6, r7, [r8], #8
 80030a0:	f47f ae74 	bne.w	8002d8c <__kernel_rem_pio2+0x94>
 80030a4:	e691      	b.n	8002dca <__kernel_rem_pio2+0xd2>
 80030a6:	2d00      	cmp	r5, #0
 80030a8:	f108 0801 	add.w	r8, r8, #1
 80030ac:	bfc8      	it	gt
 80030ae:	f04f 0902 	movgt.w	r9, #2
 80030b2:	f73f af11 	bgt.w	8002ed8 <__kernel_rem_pio2+0x1e0>
 80030b6:	4632      	mov	r2, r6
 80030b8:	463b      	mov	r3, r7
 80030ba:	2000      	movs	r0, #0
 80030bc:	4999      	ldr	r1, [pc, #612]	; (8003324 <__kernel_rem_pio2+0x62c>)
 80030be:	f000 fbdb 	bl	8003878 <__aeabi_dsub>
 80030c2:	f04f 0902 	mov.w	r9, #2
 80030c6:	4606      	mov	r6, r0
 80030c8:	460f      	mov	r7, r1
 80030ca:	e733      	b.n	8002f34 <__kernel_rem_pio2+0x23c>
 80030cc:	9b06      	ldr	r3, [sp, #24]
 80030ce:	f8cd 900c 	str.w	r9, [sp, #12]
 80030d2:	425a      	negs	r2, r3
 80030d4:	4630      	mov	r0, r6
 80030d6:	4639      	mov	r1, r7
 80030d8:	f8cd 8014 	str.w	r8, [sp, #20]
 80030dc:	f000 fb3c 	bl	8003758 <scalbn>
 80030e0:	2200      	movs	r2, #0
 80030e2:	4b92      	ldr	r3, [pc, #584]	; (800332c <__kernel_rem_pio2+0x634>)
 80030e4:	4606      	mov	r6, r0
 80030e6:	460f      	mov	r7, r1
 80030e8:	f001 f800 	bl	80040ec <__aeabi_dcmpge>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	f000 81e6 	beq.w	80034be <__kernel_rem_pio2+0x7c6>
 80030f2:	2200      	movs	r2, #0
 80030f4:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <__kernel_rem_pio2+0x638>)
 80030f6:	4630      	mov	r0, r6
 80030f8:	4639      	mov	r1, r7
 80030fa:	f000 fd71 	bl	8003be0 <__aeabi_dmul>
 80030fe:	f001 f809 	bl	8004114 <__aeabi_d2iz>
 8003102:	4604      	mov	r4, r0
 8003104:	f000 fd06 	bl	8003b14 <__aeabi_i2d>
 8003108:	2200      	movs	r2, #0
 800310a:	4b88      	ldr	r3, [pc, #544]	; (800332c <__kernel_rem_pio2+0x634>)
 800310c:	f000 fd68 	bl	8003be0 <__aeabi_dmul>
 8003110:	460b      	mov	r3, r1
 8003112:	4602      	mov	r2, r0
 8003114:	4639      	mov	r1, r7
 8003116:	4630      	mov	r0, r6
 8003118:	f000 fbae 	bl	8003878 <__aeabi_dsub>
 800311c:	f000 fffa 	bl	8004114 <__aeabi_d2iz>
 8003120:	9b06      	ldr	r3, [sp, #24]
 8003122:	3318      	adds	r3, #24
 8003124:	f105 0a01 	add.w	sl, r5, #1
 8003128:	9306      	str	r3, [sp, #24]
 800312a:	ab0e      	add	r3, sp, #56	; 0x38
 800312c:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8003130:	f843 402a 	str.w	r4, [r3, sl, lsl #2]
 8003134:	9a06      	ldr	r2, [sp, #24]
 8003136:	497b      	ldr	r1, [pc, #492]	; (8003324 <__kernel_rem_pio2+0x62c>)
 8003138:	2000      	movs	r0, #0
 800313a:	f000 fb0d 	bl	8003758 <scalbn>
 800313e:	f1ba 0f00 	cmp.w	sl, #0
 8003142:	4604      	mov	r4, r0
 8003144:	460d      	mov	r5, r1
 8003146:	f2c0 80c1 	blt.w	80032cc <__kernel_rem_pio2+0x5d4>
 800314a:	f10a 0301 	add.w	r3, sl, #1
 800314e:	ea4f 08c3 	mov.w	r8, r3, lsl #3
 8003152:	af72      	add	r7, sp, #456	; 0x1c8
 8003154:	aa0e      	add	r2, sp, #56	; 0x38
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 800315c:	eb07 0608 	add.w	r6, r7, r8
 8003160:	f859 0d04 	ldr.w	r0, [r9, #-4]!
 8003164:	f000 fcd6 	bl	8003b14 <__aeabi_i2d>
 8003168:	4622      	mov	r2, r4
 800316a:	462b      	mov	r3, r5
 800316c:	f000 fd38 	bl	8003be0 <__aeabi_dmul>
 8003170:	2200      	movs	r2, #0
 8003172:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003176:	4b6e      	ldr	r3, [pc, #440]	; (8003330 <__kernel_rem_pio2+0x638>)
 8003178:	4620      	mov	r0, r4
 800317a:	4629      	mov	r1, r5
 800317c:	f000 fd30 	bl	8003be0 <__aeabi_dmul>
 8003180:	42be      	cmp	r6, r7
 8003182:	4604      	mov	r4, r0
 8003184:	460d      	mov	r5, r1
 8003186:	d1eb      	bne.n	8003160 <__kernel_rem_pio2+0x468>
 8003188:	f1a8 0808 	sub.w	r8, r8, #8
 800318c:	eb06 0308 	add.w	r3, r6, r8
 8003190:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8003194:	f8cd a018 	str.w	sl, [sp, #24]
 8003198:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800319c:	f8cd 9010 	str.w	r9, [sp, #16]
 80031a0:	f04f 0800 	mov.w	r8, #0
 80031a4:	469b      	mov	fp, r3
 80031a6:	f1ba 0f00 	cmp.w	sl, #0
 80031aa:	f2c0 808c 	blt.w	80032c6 <__kernel_rem_pio2+0x5ce>
 80031ae:	f1b8 0f00 	cmp.w	r8, #0
 80031b2:	f2c0 8088 	blt.w	80032c6 <__kernel_rem_pio2+0x5ce>
 80031b6:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8003334 <__kernel_rem_pio2+0x63c>
 80031ba:	465d      	mov	r5, fp
 80031bc:	2600      	movs	r6, #0
 80031be:	2700      	movs	r7, #0
 80031c0:	2400      	movs	r4, #0
 80031c2:	e001      	b.n	80031c8 <__kernel_rem_pio2+0x4d0>
 80031c4:	4544      	cmp	r4, r8
 80031c6:	dc10      	bgt.n	80031ea <__kernel_rem_pio2+0x4f2>
 80031c8:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80031cc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80031d0:	f000 fd06 	bl	8003be0 <__aeabi_dmul>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4630      	mov	r0, r6
 80031da:	4639      	mov	r1, r7
 80031dc:	f000 fb4e 	bl	800387c <__adddf3>
 80031e0:	3401      	adds	r4, #1
 80031e2:	45a2      	cmp	sl, r4
 80031e4:	4606      	mov	r6, r0
 80031e6:	460f      	mov	r7, r1
 80031e8:	daec      	bge.n	80031c4 <__kernel_rem_pio2+0x4cc>
 80031ea:	9b04      	ldr	r3, [sp, #16]
 80031ec:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80031f0:	e9c3 6700 	strd	r6, r7, [r3]
 80031f4:	9b00      	ldr	r3, [sp, #0]
 80031f6:	f108 0801 	add.w	r8, r8, #1
 80031fa:	4598      	cmp	r8, r3
 80031fc:	f1ab 0b08 	sub.w	fp, fp, #8
 8003200:	d1d1      	bne.n	80031a6 <__kernel_rem_pio2+0x4ae>
 8003202:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003204:	f8dd a018 	ldr.w	sl, [sp, #24]
 8003208:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800320c:	2b03      	cmp	r3, #3
 800320e:	d835      	bhi.n	800327c <__kernel_rem_pio2+0x584>
 8003210:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003214:	0004003b 	.word	0x0004003b
 8003218:	00d50004 	.word	0x00d50004
 800321c:	9b00      	ldr	r3, [sp, #0]
 800321e:	2000      	movs	r0, #0
 8003220:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
 8003224:	2100      	movs	r1, #0
 8003226:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800322a:	f000 fb27 	bl	800387c <__adddf3>
 800322e:	454c      	cmp	r4, r9
 8003230:	d1f9      	bne.n	8003226 <__kernel_rem_pio2+0x52e>
 8003232:	9b03      	ldr	r3, [sp, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8087 	beq.w	8003348 <__kernel_rem_pio2+0x650>
 800323a:	9d08      	ldr	r5, [sp, #32]
 800323c:	4602      	mov	r2, r0
 800323e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003242:	e885 000c 	stmia.w	r5, {r2, r3}
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800324e:	f000 fb13 	bl	8003878 <__aeabi_dsub>
 8003252:	f1ba 0f00 	cmp.w	sl, #0
 8003256:	dd0b      	ble.n	8003270 <__kernel_rem_pio2+0x578>
 8003258:	ad4c      	add	r5, sp, #304	; 0x130
 800325a:	2401      	movs	r4, #1
 800325c:	3401      	adds	r4, #1
 800325e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8003262:	f000 fb0b 	bl	800387c <__adddf3>
 8003266:	45a2      	cmp	sl, r4
 8003268:	daf8      	bge.n	800325c <__kernel_rem_pio2+0x564>
 800326a:	9b03      	ldr	r3, [sp, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d078      	beq.n	8003362 <__kernel_rem_pio2+0x66a>
 8003270:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003274:	9908      	ldr	r1, [sp, #32]
 8003276:	4602      	mov	r2, r0
 8003278:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800327c:	9b05      	ldr	r3, [sp, #20]
 800327e:	f003 0007 	and.w	r0, r3, #7
 8003282:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8003286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800328a:	9b00      	ldr	r3, [sp, #0]
 800328c:	2000      	movs	r0, #0
 800328e:	2100      	movs	r1, #0
 8003290:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8003294:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003298:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 800329c:	f000 faee 	bl	800387c <__adddf3>
 80032a0:	f1ba 3fff 	cmp.w	sl, #4294967295
 80032a4:	d1f6      	bne.n	8003294 <__kernel_rem_pio2+0x59c>
 80032a6:	9b03      	ldr	r3, [sp, #12]
 80032a8:	4602      	mov	r2, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d065      	beq.n	800337a <__kernel_rem_pio2+0x682>
 80032ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80032b2:	9908      	ldr	r1, [sp, #32]
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
 80032b8:	9b05      	ldr	r3, [sp, #20]
 80032ba:	f003 0007 	and.w	r0, r3, #7
 80032be:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80032c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032c6:	2600      	movs	r6, #0
 80032c8:	2700      	movs	r7, #0
 80032ca:	e78e      	b.n	80031ea <__kernel_rem_pio2+0x4f2>
 80032cc:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d8d4      	bhi.n	800327c <__kernel_rem_pio2+0x584>
 80032d2:	e8df f003 	tbb	[pc, r3]
 80032d6:	314c      	.short	0x314c
 80032d8:	0231      	.short	0x0231
 80032da:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 80032de:	9b03      	ldr	r3, [sp, #12]
 80032e0:	2000      	movs	r0, #0
 80032e2:	2100      	movs	r1, #0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80d8 	beq.w	800349a <__kernel_rem_pio2+0x7a2>
 80032ea:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80032ee:	9f08      	ldr	r7, [sp, #32]
 80032f0:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80032f4:	f8d9 5000 	ldr.w	r5, [r9]
 80032f8:	f8d9 4008 	ldr.w	r4, [r9, #8]
 80032fc:	6138      	str	r0, [r7, #16]
 80032fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	9b05      	ldr	r3, [sp, #20]
 8003306:	603d      	str	r5, [r7, #0]
 8003308:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800330c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8003310:	f003 0007 	and.w	r0, r3, #7
 8003314:	607a      	str	r2, [r7, #4]
 8003316:	60bc      	str	r4, [r7, #8]
 8003318:	6179      	str	r1, [r7, #20]
 800331a:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800331e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003322:	bf00      	nop
 8003324:	3ff00000 	.word	0x3ff00000
 8003328:	3fe00000 	.word	0x3fe00000
 800332c:	41700000 	.word	0x41700000
 8003330:	3e700000 	.word	0x3e700000
 8003334:	08006b50 	.word	0x08006b50
 8003338:	9b03      	ldr	r3, [sp, #12]
 800333a:	2000      	movs	r0, #0
 800333c:	2100      	movs	r1, #0
 800333e:	f50d 7994 	add.w	r9, sp, #296	; 0x128
 8003342:	2b00      	cmp	r3, #0
 8003344:	f47f af79 	bne.w	800323a <__kernel_rem_pio2+0x542>
 8003348:	9b08      	ldr	r3, [sp, #32]
 800334a:	4602      	mov	r2, r0
 800334c:	e9c3 0100 	strd	r0, r1, [r3]
 8003350:	460b      	mov	r3, r1
 8003352:	e9d9 0100 	ldrd	r0, r1, [r9]
 8003356:	f000 fa8f 	bl	8003878 <__aeabi_dsub>
 800335a:	f1ba 0f00 	cmp.w	sl, #0
 800335e:	f73f af7b 	bgt.w	8003258 <__kernel_rem_pio2+0x560>
 8003362:	460b      	mov	r3, r1
 8003364:	9908      	ldr	r1, [sp, #32]
 8003366:	4602      	mov	r2, r0
 8003368:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800336c:	e786      	b.n	800327c <__kernel_rem_pio2+0x584>
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	2000      	movs	r0, #0
 8003372:	2100      	movs	r1, #0
 8003374:	4602      	mov	r2, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d199      	bne.n	80032ae <__kernel_rem_pio2+0x5b6>
 800337a:	460b      	mov	r3, r1
 800337c:	9908      	ldr	r1, [sp, #32]
 800337e:	e9c1 2300 	strd	r2, r3, [r1]
 8003382:	e799      	b.n	80032b8 <__kernel_rem_pio2+0x5c0>
 8003384:	ab0e      	add	r3, sp, #56	; 0x38
 8003386:	9a06      	ldr	r2, [sp, #24]
 8003388:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800338c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003390:	3a18      	subs	r2, #24
 8003392:	f8cd 8014 	str.w	r8, [sp, #20]
 8003396:	9206      	str	r2, [sp, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	f47f aecb 	bne.w	8003134 <__kernel_rem_pio2+0x43c>
 800339e:	ab0e      	add	r3, sp, #56	; 0x38
 80033a0:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80033a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80033a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80033ac:	3a18      	subs	r2, #24
 80033ae:	2900      	cmp	r1, #0
 80033b0:	d0f8      	beq.n	80033a4 <__kernel_rem_pio2+0x6ac>
 80033b2:	9206      	str	r2, [sp, #24]
 80033b4:	e6be      	b.n	8003134 <__kernel_rem_pio2+0x43c>
 80033b6:	2301      	movs	r3, #1
 80033b8:	e5e7      	b.n	8002f8a <__kernel_rem_pio2+0x292>
 80033ba:	2400      	movs	r4, #0
 80033bc:	e5a6      	b.n	8002f0c <__kernel_rem_pio2+0x214>
 80033be:	f1ba 0f00 	cmp.w	sl, #0
 80033c2:	dd8c      	ble.n	80032de <__kernel_rem_pio2+0x5e6>
 80033c4:	ea4f 08ca 	mov.w	r8, sl, lsl #3
 80033c8:	eb09 0b08 	add.w	fp, r9, r8
 80033cc:	f108 0c08 	add.w	ip, r8, #8
 80033d0:	e9db 6700 	ldrd	r6, r7, [fp]
 80033d4:	44cc      	add	ip, r9
 80033d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80033da:	46e0      	mov	r8, ip
 80033dc:	ed3b 7b02 	vldmdb	fp!, {d7}
 80033e0:	4630      	mov	r0, r6
 80033e2:	ec53 2b17 	vmov	r2, r3, d7
 80033e6:	4639      	mov	r1, r7
 80033e8:	ed8d 7b00 	vstr	d7, [sp]
 80033ec:	f000 fa46 	bl	800387c <__adddf3>
 80033f0:	4604      	mov	r4, r0
 80033f2:	460d      	mov	r5, r1
 80033f4:	4622      	mov	r2, r4
 80033f6:	462b      	mov	r3, r5
 80033f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033fc:	f000 fa3c 	bl	8003878 <__aeabi_dsub>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4630      	mov	r0, r6
 8003406:	4639      	mov	r1, r7
 8003408:	f000 fa38 	bl	800387c <__adddf3>
 800340c:	45cb      	cmp	fp, r9
 800340e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003412:	4626      	mov	r6, r4
 8003414:	462f      	mov	r7, r5
 8003416:	e9cb 4500 	strd	r4, r5, [fp]
 800341a:	d1df      	bne.n	80033dc <__kernel_rem_pio2+0x6e4>
 800341c:	f1ba 0f01 	cmp.w	sl, #1
 8003420:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8003424:	f77f af5b 	ble.w	80032de <__kernel_rem_pio2+0x5e6>
 8003428:	eb09 0508 	add.w	r5, r9, r8
 800342c:	f108 0408 	add.w	r4, r8, #8
 8003430:	e9d5 ab00 	ldrd	sl, fp, [r5]
 8003434:	444c      	add	r4, r9
 8003436:	46a0      	mov	r8, r4
 8003438:	f50d 7c98 	add.w	ip, sp, #304	; 0x130
 800343c:	ed35 7b02 	vldmdb	r5!, {d7}
 8003440:	4652      	mov	r2, sl
 8003442:	465b      	mov	r3, fp
 8003444:	ec51 0b17 	vmov	r0, r1, d7
 8003448:	f8cd c010 	str.w	ip, [sp, #16]
 800344c:	ed8d 7b00 	vstr	d7, [sp]
 8003450:	f000 fa14 	bl	800387c <__adddf3>
 8003454:	4606      	mov	r6, r0
 8003456:	460f      	mov	r7, r1
 8003458:	4632      	mov	r2, r6
 800345a:	463b      	mov	r3, r7
 800345c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003460:	f000 fa0a 	bl	8003878 <__aeabi_dsub>
 8003464:	4652      	mov	r2, sl
 8003466:	465b      	mov	r3, fp
 8003468:	f000 fa08 	bl	800387c <__adddf3>
 800346c:	f8dd c010 	ldr.w	ip, [sp, #16]
 8003470:	4565      	cmp	r5, ip
 8003472:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8003476:	46b2      	mov	sl, r6
 8003478:	46bb      	mov	fp, r7
 800347a:	e9c5 6700 	strd	r6, r7, [r5]
 800347e:	d1dd      	bne.n	800343c <__kernel_rem_pio2+0x744>
 8003480:	2000      	movs	r0, #0
 8003482:	2100      	movs	r1, #0
 8003484:	ad4e      	add	r5, sp, #312	; 0x138
 8003486:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800348a:	f000 f9f7 	bl	800387c <__adddf3>
 800348e:	42ac      	cmp	r4, r5
 8003490:	d1f9      	bne.n	8003486 <__kernel_rem_pio2+0x78e>
 8003492:	9b03      	ldr	r3, [sp, #12]
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f af28 	bne.w	80032ea <__kernel_rem_pio2+0x5f2>
 800349a:	e9d9 2302 	ldrd	r2, r3, [r9, #8]
 800349e:	9f08      	ldr	r7, [sp, #32]
 80034a0:	e9d9 4500 	ldrd	r4, r5, [r9]
 80034a4:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80034a8:	9b05      	ldr	r3, [sp, #20]
 80034aa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80034ae:	f003 0007 	and.w	r0, r3, #7
 80034b2:	e9c7 4500 	strd	r4, r5, [r7]
 80034b6:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80034ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034be:	4630      	mov	r0, r6
 80034c0:	4639      	mov	r1, r7
 80034c2:	f000 fe27 	bl	8004114 <__aeabi_d2iz>
 80034c6:	ab0e      	add	r3, sp, #56	; 0x38
 80034c8:	46aa      	mov	sl, r5
 80034ca:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80034ce:	e631      	b.n	8003134 <__kernel_rem_pio2+0x43c>

080034d0 <__kernel_sin>:
 80034d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034d4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80034d8:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80034dc:	b085      	sub	sp, #20
 80034de:	4604      	mov	r4, r0
 80034e0:	460d      	mov	r5, r1
 80034e2:	4690      	mov	r8, r2
 80034e4:	4699      	mov	r9, r3
 80034e6:	da04      	bge.n	80034f2 <__kernel_sin+0x22>
 80034e8:	f000 fe14 	bl	8004114 <__aeabi_d2iz>
 80034ec:	2800      	cmp	r0, #0
 80034ee:	f000 8083 	beq.w	80035f8 <__kernel_sin+0x128>
 80034f2:	4622      	mov	r2, r4
 80034f4:	462b      	mov	r3, r5
 80034f6:	4620      	mov	r0, r4
 80034f8:	4629      	mov	r1, r5
 80034fa:	f000 fb71 	bl	8003be0 <__aeabi_dmul>
 80034fe:	4622      	mov	r2, r4
 8003500:	462b      	mov	r3, r5
 8003502:	4606      	mov	r6, r0
 8003504:	460f      	mov	r7, r1
 8003506:	f000 fb6b 	bl	8003be0 <__aeabi_dmul>
 800350a:	a342      	add	r3, pc, #264	; (adr r3, 8003614 <__kernel_sin+0x144>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	4682      	mov	sl, r0
 8003512:	468b      	mov	fp, r1
 8003514:	4630      	mov	r0, r6
 8003516:	4639      	mov	r1, r7
 8003518:	f000 fb62 	bl	8003be0 <__aeabi_dmul>
 800351c:	a33f      	add	r3, pc, #252	; (adr r3, 800361c <__kernel_sin+0x14c>)
 800351e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003522:	f000 f9a9 	bl	8003878 <__aeabi_dsub>
 8003526:	4632      	mov	r2, r6
 8003528:	463b      	mov	r3, r7
 800352a:	f000 fb59 	bl	8003be0 <__aeabi_dmul>
 800352e:	a33d      	add	r3, pc, #244	; (adr r3, 8003624 <__kernel_sin+0x154>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f000 f9a2 	bl	800387c <__adddf3>
 8003538:	4632      	mov	r2, r6
 800353a:	463b      	mov	r3, r7
 800353c:	f000 fb50 	bl	8003be0 <__aeabi_dmul>
 8003540:	a33a      	add	r3, pc, #232	; (adr r3, 800362c <__kernel_sin+0x15c>)
 8003542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003546:	f000 f997 	bl	8003878 <__aeabi_dsub>
 800354a:	4632      	mov	r2, r6
 800354c:	463b      	mov	r3, r7
 800354e:	f000 fb47 	bl	8003be0 <__aeabi_dmul>
 8003552:	a338      	add	r3, pc, #224	; (adr r3, 8003634 <__kernel_sin+0x164>)
 8003554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003558:	f000 f990 	bl	800387c <__adddf3>
 800355c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800355e:	e9cd 0100 	strd	r0, r1, [sp]
 8003562:	b39b      	cbz	r3, 80035cc <__kernel_sin+0xfc>
 8003564:	4640      	mov	r0, r8
 8003566:	4649      	mov	r1, r9
 8003568:	2200      	movs	r2, #0
 800356a:	4b29      	ldr	r3, [pc, #164]	; (8003610 <__kernel_sin+0x140>)
 800356c:	f000 fb38 	bl	8003be0 <__aeabi_dmul>
 8003570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003578:	4650      	mov	r0, sl
 800357a:	4659      	mov	r1, fp
 800357c:	f000 fb30 	bl	8003be0 <__aeabi_dmul>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003588:	f000 f976 	bl	8003878 <__aeabi_dsub>
 800358c:	4632      	mov	r2, r6
 800358e:	463b      	mov	r3, r7
 8003590:	f000 fb26 	bl	8003be0 <__aeabi_dmul>
 8003594:	4642      	mov	r2, r8
 8003596:	464b      	mov	r3, r9
 8003598:	f000 f96e 	bl	8003878 <__aeabi_dsub>
 800359c:	a31a      	add	r3, pc, #104	; (adr r3, 8003608 <__kernel_sin+0x138>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	4606      	mov	r6, r0
 80035a4:	460f      	mov	r7, r1
 80035a6:	4650      	mov	r0, sl
 80035a8:	4659      	mov	r1, fp
 80035aa:	f000 fb19 	bl	8003be0 <__aeabi_dmul>
 80035ae:	4602      	mov	r2, r0
 80035b0:	460b      	mov	r3, r1
 80035b2:	4630      	mov	r0, r6
 80035b4:	4639      	mov	r1, r7
 80035b6:	f000 f961 	bl	800387c <__adddf3>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	4620      	mov	r0, r4
 80035c0:	4629      	mov	r1, r5
 80035c2:	f000 f959 	bl	8003878 <__aeabi_dsub>
 80035c6:	b005      	add	sp, #20
 80035c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80035d0:	4630      	mov	r0, r6
 80035d2:	4639      	mov	r1, r7
 80035d4:	f000 fb04 	bl	8003be0 <__aeabi_dmul>
 80035d8:	a30b      	add	r3, pc, #44	; (adr r3, 8003608 <__kernel_sin+0x138>)
 80035da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035de:	f000 f94b 	bl	8003878 <__aeabi_dsub>
 80035e2:	4652      	mov	r2, sl
 80035e4:	465b      	mov	r3, fp
 80035e6:	f000 fafb 	bl	8003be0 <__aeabi_dmul>
 80035ea:	4622      	mov	r2, r4
 80035ec:	462b      	mov	r3, r5
 80035ee:	f000 f945 	bl	800387c <__adddf3>
 80035f2:	b005      	add	sp, #20
 80035f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f8:	4620      	mov	r0, r4
 80035fa:	4629      	mov	r1, r5
 80035fc:	b005      	add	sp, #20
 80035fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003602:	bf00      	nop
 8003604:	f3af 8000 	nop.w
 8003608:	55555549 	.word	0x55555549
 800360c:	3fc55555 	.word	0x3fc55555
 8003610:	3fe00000 	.word	0x3fe00000
 8003614:	5acfd57c 	.word	0x5acfd57c
 8003618:	3de5d93a 	.word	0x3de5d93a
 800361c:	8a2b9ceb 	.word	0x8a2b9ceb
 8003620:	3e5ae5e6 	.word	0x3e5ae5e6
 8003624:	57b1fe7d 	.word	0x57b1fe7d
 8003628:	3ec71de3 	.word	0x3ec71de3
 800362c:	19c161d5 	.word	0x19c161d5
 8003630:	3f2a01a0 	.word	0x3f2a01a0
 8003634:	1110f8a6 	.word	0x1110f8a6
 8003638:	3f811111 	.word	0x3f811111
 800363c:	f3af 8000 	nop.w

08003640 <fabs>:
 8003640:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <floor>:
 8003648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800364c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8003650:	f2a8 35ff 	subw	r5, r8, #1023	; 0x3ff
 8003654:	2d13      	cmp	r5, #19
 8003656:	4602      	mov	r2, r0
 8003658:	460b      	mov	r3, r1
 800365a:	460c      	mov	r4, r1
 800365c:	4607      	mov	r7, r0
 800365e:	4689      	mov	r9, r1
 8003660:	4606      	mov	r6, r0
 8003662:	dc1d      	bgt.n	80036a0 <floor+0x58>
 8003664:	2d00      	cmp	r5, #0
 8003666:	db40      	blt.n	80036ea <floor+0xa2>
 8003668:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8003754 <floor+0x10c>
 800366c:	fa48 f805 	asr.w	r8, r8, r5
 8003670:	ea08 0e01 	and.w	lr, r8, r1
 8003674:	ea5e 0707 	orrs.w	r7, lr, r7
 8003678:	d017      	beq.n	80036aa <floor+0x62>
 800367a:	a334      	add	r3, pc, #208	; (adr r3, 800374c <floor+0x104>)
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f000 f8fc 	bl	800387c <__adddf3>
 8003684:	2200      	movs	r2, #0
 8003686:	2300      	movs	r3, #0
 8003688:	f000 fd3a 	bl	8004100 <__aeabi_dcmpgt>
 800368c:	b120      	cbz	r0, 8003698 <floor+0x50>
 800368e:	2c00      	cmp	r4, #0
 8003690:	db3f      	blt.n	8003712 <floor+0xca>
 8003692:	ea29 0408 	bic.w	r4, r9, r8
 8003696:	2600      	movs	r6, #0
 8003698:	4621      	mov	r1, r4
 800369a:	4630      	mov	r0, r6
 800369c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a0:	2d33      	cmp	r5, #51	; 0x33
 80036a2:	dd06      	ble.n	80036b2 <floor+0x6a>
 80036a4:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80036a8:	d02f      	beq.n	800370a <floor+0xc2>
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036b2:	f2a8 4e13 	subw	lr, r8, #1043	; 0x413
 80036b6:	f04f 37ff 	mov.w	r7, #4294967295
 80036ba:	fa27 f70e 	lsr.w	r7, r7, lr
 80036be:	4207      	tst	r7, r0
 80036c0:	d0f3      	beq.n	80036aa <floor+0x62>
 80036c2:	a322      	add	r3, pc, #136	; (adr r3, 800374c <floor+0x104>)
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f000 f8d8 	bl	800387c <__adddf3>
 80036cc:	2200      	movs	r2, #0
 80036ce:	2300      	movs	r3, #0
 80036d0:	f000 fd16 	bl	8004100 <__aeabi_dcmpgt>
 80036d4:	2800      	cmp	r0, #0
 80036d6:	d0df      	beq.n	8003698 <floor+0x50>
 80036d8:	2c00      	cmp	r4, #0
 80036da:	db1f      	blt.n	800371c <floor+0xd4>
 80036dc:	464c      	mov	r4, r9
 80036de:	ea26 0607 	bic.w	r6, r6, r7
 80036e2:	4621      	mov	r1, r4
 80036e4:	4630      	mov	r0, r6
 80036e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ea:	a318      	add	r3, pc, #96	; (adr r3, 800374c <floor+0x104>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f000 f8c4 	bl	800387c <__adddf3>
 80036f4:	2200      	movs	r2, #0
 80036f6:	2300      	movs	r3, #0
 80036f8:	f000 fd02 	bl	8004100 <__aeabi_dcmpgt>
 80036fc:	2800      	cmp	r0, #0
 80036fe:	d0cb      	beq.n	8003698 <floor+0x50>
 8003700:	2c00      	cmp	r4, #0
 8003702:	db19      	blt.n	8003738 <floor+0xf0>
 8003704:	2600      	movs	r6, #0
 8003706:	4634      	mov	r4, r6
 8003708:	e7c6      	b.n	8003698 <floor+0x50>
 800370a:	f000 f8b7 	bl	800387c <__adddf3>
 800370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003712:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003716:	412b      	asrs	r3, r5
 8003718:	4499      	add	r9, r3
 800371a:	e7ba      	b.n	8003692 <floor+0x4a>
 800371c:	2d14      	cmp	r5, #20
 800371e:	d008      	beq.n	8003732 <floor+0xea>
 8003720:	f5c8 6886 	rsb	r8, r8, #1072	; 0x430
 8003724:	f108 0803 	add.w	r8, r8, #3
 8003728:	2301      	movs	r3, #1
 800372a:	fa03 f308 	lsl.w	r3, r3, r8
 800372e:	199e      	adds	r6, r3, r6
 8003730:	d3d4      	bcc.n	80036dc <floor+0x94>
 8003732:	f109 0901 	add.w	r9, r9, #1
 8003736:	e7d1      	b.n	80036dc <floor+0x94>
 8003738:	f024 4200 	bic.w	r2, r4, #2147483648	; 0x80000000
 800373c:	4b02      	ldr	r3, [pc, #8]	; (8003748 <floor+0x100>)
 800373e:	433a      	orrs	r2, r7
 8003740:	bf18      	it	ne
 8003742:	461c      	movne	r4, r3
 8003744:	2600      	movs	r6, #0
 8003746:	e7a7      	b.n	8003698 <floor+0x50>
 8003748:	bff00000 	.word	0xbff00000
 800374c:	8800759c 	.word	0x8800759c
 8003750:	7e37e43c 	.word	0x7e37e43c
 8003754:	000fffff 	.word	0x000fffff

08003758 <scalbn>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	f3c1 560a 	ubfx	r6, r1, #20, #11
 800375e:	4604      	mov	r4, r0
 8003760:	460d      	mov	r5, r1
 8003762:	460b      	mov	r3, r1
 8003764:	4617      	mov	r7, r2
 8003766:	bb16      	cbnz	r6, 80037ae <scalbn+0x56>
 8003768:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800376c:	4303      	orrs	r3, r0
 800376e:	d032      	beq.n	80037d6 <scalbn+0x7e>
 8003770:	2200      	movs	r2, #0
 8003772:	4b37      	ldr	r3, [pc, #220]	; (8003850 <scalbn+0xf8>)
 8003774:	f000 fa34 	bl	8003be0 <__aeabi_dmul>
 8003778:	4a36      	ldr	r2, [pc, #216]	; (8003854 <scalbn+0xfc>)
 800377a:	4297      	cmp	r7, r2
 800377c:	4604      	mov	r4, r0
 800377e:	460d      	mov	r5, r1
 8003780:	460b      	mov	r3, r1
 8003782:	db37      	blt.n	80037f4 <scalbn+0x9c>
 8003784:	f3c1 560a 	ubfx	r6, r1, #20, #11
 8003788:	3e36      	subs	r6, #54	; 0x36
 800378a:	443e      	add	r6, r7
 800378c:	f240 72fe 	movw	r2, #2046	; 0x7fe
 8003790:	4296      	cmp	r6, r2
 8003792:	dd15      	ble.n	80037c0 <scalbn+0x68>
 8003794:	4622      	mov	r2, r4
 8003796:	462b      	mov	r3, r5
 8003798:	a129      	add	r1, pc, #164	; (adr r1, 8003840 <scalbn+0xe8>)
 800379a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800379e:	f000 f85f 	bl	8003860 <copysign>
 80037a2:	a327      	add	r3, pc, #156	; (adr r3, 8003840 <scalbn+0xe8>)
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f000 fa1a 	bl	8003be0 <__aeabi_dmul>
 80037ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037b2:	4296      	cmp	r6, r2
 80037b4:	d024      	beq.n	8003800 <scalbn+0xa8>
 80037b6:	443e      	add	r6, r7
 80037b8:	f240 72fe 	movw	r2, #2046	; 0x7fe
 80037bc:	4296      	cmp	r6, r2
 80037be:	dce9      	bgt.n	8003794 <scalbn+0x3c>
 80037c0:	2e00      	cmp	r6, #0
 80037c2:	dd09      	ble.n	80037d8 <scalbn+0x80>
 80037c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80037c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80037cc:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 80037d0:	4620      	mov	r0, r4
 80037d2:	4629      	mov	r1, r5
 80037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d8:	f116 0f35 	cmn.w	r6, #53	; 0x35
 80037dc:	da15      	bge.n	800380a <scalbn+0xb2>
 80037de:	f24c 3350 	movw	r3, #50000	; 0xc350
 80037e2:	429f      	cmp	r7, r3
 80037e4:	4622      	mov	r2, r4
 80037e6:	462b      	mov	r3, r5
 80037e8:	dc1d      	bgt.n	8003826 <scalbn+0xce>
 80037ea:	a117      	add	r1, pc, #92	; (adr r1, 8003848 <scalbn+0xf0>)
 80037ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037f0:	f000 f836 	bl	8003860 <copysign>
 80037f4:	a314      	add	r3, pc, #80	; (adr r3, 8003848 <scalbn+0xf0>)
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	f000 f9f1 	bl	8003be0 <__aeabi_dmul>
 80037fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003800:	4602      	mov	r2, r0
 8003802:	460b      	mov	r3, r1
 8003804:	f000 f83a 	bl	800387c <__adddf3>
 8003808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800380a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800380e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003812:	3636      	adds	r6, #54	; 0x36
 8003814:	ea43 5506 	orr.w	r5, r3, r6, lsl #20
 8003818:	4620      	mov	r0, r4
 800381a:	4629      	mov	r1, r5
 800381c:	2200      	movs	r2, #0
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <scalbn+0x100>)
 8003820:	f000 f9de 	bl	8003be0 <__aeabi_dmul>
 8003824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003826:	a106      	add	r1, pc, #24	; (adr r1, 8003840 <scalbn+0xe8>)
 8003828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800382c:	f000 f818 	bl	8003860 <copysign>
 8003830:	a303      	add	r3, pc, #12	; (adr r3, 8003840 <scalbn+0xe8>)
 8003832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003836:	f000 f9d3 	bl	8003be0 <__aeabi_dmul>
 800383a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800383c:	f3af 8000 	nop.w
 8003840:	8800759c 	.word	0x8800759c
 8003844:	7e37e43c 	.word	0x7e37e43c
 8003848:	c2f8f359 	.word	0xc2f8f359
 800384c:	01a56e1f 	.word	0x01a56e1f
 8003850:	43500000 	.word	0x43500000
 8003854:	ffff3cb0 	.word	0xffff3cb0
 8003858:	3c900000 	.word	0x3c900000
 800385c:	f3af 8000 	nop.w

08003860 <copysign>:
 8003860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003864:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8003868:	ea43 0102 	orr.w	r1, r3, r2
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <__aeabi_drsub>:
 8003870:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003874:	e002      	b.n	800387c <__adddf3>
 8003876:	bf00      	nop

08003878 <__aeabi_dsub>:
 8003878:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800387c <__adddf3>:
 800387c:	b530      	push	{r4, r5, lr}
 800387e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003882:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003886:	ea94 0f05 	teq	r4, r5
 800388a:	bf08      	it	eq
 800388c:	ea90 0f02 	teqeq	r0, r2
 8003890:	bf1f      	itttt	ne
 8003892:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003896:	ea55 0c02 	orrsne.w	ip, r5, r2
 800389a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800389e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80038a2:	f000 80e2 	beq.w	8003a6a <__adddf3+0x1ee>
 80038a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80038aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80038ae:	bfb8      	it	lt
 80038b0:	426d      	neglt	r5, r5
 80038b2:	dd0c      	ble.n	80038ce <__adddf3+0x52>
 80038b4:	442c      	add	r4, r5
 80038b6:	ea80 0202 	eor.w	r2, r0, r2
 80038ba:	ea81 0303 	eor.w	r3, r1, r3
 80038be:	ea82 0000 	eor.w	r0, r2, r0
 80038c2:	ea83 0101 	eor.w	r1, r3, r1
 80038c6:	ea80 0202 	eor.w	r2, r0, r2
 80038ca:	ea81 0303 	eor.w	r3, r1, r3
 80038ce:	2d36      	cmp	r5, #54	; 0x36
 80038d0:	bf88      	it	hi
 80038d2:	bd30      	pophi	{r4, r5, pc}
 80038d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80038d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80038dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80038e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80038e4:	d002      	beq.n	80038ec <__adddf3+0x70>
 80038e6:	4240      	negs	r0, r0
 80038e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80038ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80038f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80038f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80038f8:	d002      	beq.n	8003900 <__adddf3+0x84>
 80038fa:	4252      	negs	r2, r2
 80038fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003900:	ea94 0f05 	teq	r4, r5
 8003904:	f000 80a7 	beq.w	8003a56 <__adddf3+0x1da>
 8003908:	f1a4 0401 	sub.w	r4, r4, #1
 800390c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003910:	db0d      	blt.n	800392e <__adddf3+0xb2>
 8003912:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003916:	fa22 f205 	lsr.w	r2, r2, r5
 800391a:	1880      	adds	r0, r0, r2
 800391c:	f141 0100 	adc.w	r1, r1, #0
 8003920:	fa03 f20e 	lsl.w	r2, r3, lr
 8003924:	1880      	adds	r0, r0, r2
 8003926:	fa43 f305 	asr.w	r3, r3, r5
 800392a:	4159      	adcs	r1, r3
 800392c:	e00e      	b.n	800394c <__adddf3+0xd0>
 800392e:	f1a5 0520 	sub.w	r5, r5, #32
 8003932:	f10e 0e20 	add.w	lr, lr, #32
 8003936:	2a01      	cmp	r2, #1
 8003938:	fa03 fc0e 	lsl.w	ip, r3, lr
 800393c:	bf28      	it	cs
 800393e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003942:	fa43 f305 	asr.w	r3, r3, r5
 8003946:	18c0      	adds	r0, r0, r3
 8003948:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800394c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003950:	d507      	bpl.n	8003962 <__adddf3+0xe6>
 8003952:	f04f 0e00 	mov.w	lr, #0
 8003956:	f1dc 0c00 	rsbs	ip, ip, #0
 800395a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800395e:	eb6e 0101 	sbc.w	r1, lr, r1
 8003962:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003966:	d31b      	bcc.n	80039a0 <__adddf3+0x124>
 8003968:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800396c:	d30c      	bcc.n	8003988 <__adddf3+0x10c>
 800396e:	0849      	lsrs	r1, r1, #1
 8003970:	ea5f 0030 	movs.w	r0, r0, rrx
 8003974:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003978:	f104 0401 	add.w	r4, r4, #1
 800397c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003980:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003984:	f080 809a 	bcs.w	8003abc <__adddf3+0x240>
 8003988:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800398c:	bf08      	it	eq
 800398e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003992:	f150 0000 	adcs.w	r0, r0, #0
 8003996:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800399a:	ea41 0105 	orr.w	r1, r1, r5
 800399e:	bd30      	pop	{r4, r5, pc}
 80039a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80039a4:	4140      	adcs	r0, r0
 80039a6:	eb41 0101 	adc.w	r1, r1, r1
 80039aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80039ae:	f1a4 0401 	sub.w	r4, r4, #1
 80039b2:	d1e9      	bne.n	8003988 <__adddf3+0x10c>
 80039b4:	f091 0f00 	teq	r1, #0
 80039b8:	bf04      	itt	eq
 80039ba:	4601      	moveq	r1, r0
 80039bc:	2000      	moveq	r0, #0
 80039be:	fab1 f381 	clz	r3, r1
 80039c2:	bf08      	it	eq
 80039c4:	3320      	addeq	r3, #32
 80039c6:	f1a3 030b 	sub.w	r3, r3, #11
 80039ca:	f1b3 0220 	subs.w	r2, r3, #32
 80039ce:	da0c      	bge.n	80039ea <__adddf3+0x16e>
 80039d0:	320c      	adds	r2, #12
 80039d2:	dd08      	ble.n	80039e6 <__adddf3+0x16a>
 80039d4:	f102 0c14 	add.w	ip, r2, #20
 80039d8:	f1c2 020c 	rsb	r2, r2, #12
 80039dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80039e0:	fa21 f102 	lsr.w	r1, r1, r2
 80039e4:	e00c      	b.n	8003a00 <__adddf3+0x184>
 80039e6:	f102 0214 	add.w	r2, r2, #20
 80039ea:	bfd8      	it	le
 80039ec:	f1c2 0c20 	rsble	ip, r2, #32
 80039f0:	fa01 f102 	lsl.w	r1, r1, r2
 80039f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80039f8:	bfdc      	itt	le
 80039fa:	ea41 010c 	orrle.w	r1, r1, ip
 80039fe:	4090      	lslle	r0, r2
 8003a00:	1ae4      	subs	r4, r4, r3
 8003a02:	bfa2      	ittt	ge
 8003a04:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003a08:	4329      	orrge	r1, r5
 8003a0a:	bd30      	popge	{r4, r5, pc}
 8003a0c:	ea6f 0404 	mvn.w	r4, r4
 8003a10:	3c1f      	subs	r4, #31
 8003a12:	da1c      	bge.n	8003a4e <__adddf3+0x1d2>
 8003a14:	340c      	adds	r4, #12
 8003a16:	dc0e      	bgt.n	8003a36 <__adddf3+0x1ba>
 8003a18:	f104 0414 	add.w	r4, r4, #20
 8003a1c:	f1c4 0220 	rsb	r2, r4, #32
 8003a20:	fa20 f004 	lsr.w	r0, r0, r4
 8003a24:	fa01 f302 	lsl.w	r3, r1, r2
 8003a28:	ea40 0003 	orr.w	r0, r0, r3
 8003a2c:	fa21 f304 	lsr.w	r3, r1, r4
 8003a30:	ea45 0103 	orr.w	r1, r5, r3
 8003a34:	bd30      	pop	{r4, r5, pc}
 8003a36:	f1c4 040c 	rsb	r4, r4, #12
 8003a3a:	f1c4 0220 	rsb	r2, r4, #32
 8003a3e:	fa20 f002 	lsr.w	r0, r0, r2
 8003a42:	fa01 f304 	lsl.w	r3, r1, r4
 8003a46:	ea40 0003 	orr.w	r0, r0, r3
 8003a4a:	4629      	mov	r1, r5
 8003a4c:	bd30      	pop	{r4, r5, pc}
 8003a4e:	fa21 f004 	lsr.w	r0, r1, r4
 8003a52:	4629      	mov	r1, r5
 8003a54:	bd30      	pop	{r4, r5, pc}
 8003a56:	f094 0f00 	teq	r4, #0
 8003a5a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003a5e:	bf06      	itte	eq
 8003a60:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003a64:	3401      	addeq	r4, #1
 8003a66:	3d01      	subne	r5, #1
 8003a68:	e74e      	b.n	8003908 <__adddf3+0x8c>
 8003a6a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003a6e:	bf18      	it	ne
 8003a70:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003a74:	d029      	beq.n	8003aca <__adddf3+0x24e>
 8003a76:	ea94 0f05 	teq	r4, r5
 8003a7a:	bf08      	it	eq
 8003a7c:	ea90 0f02 	teqeq	r0, r2
 8003a80:	d005      	beq.n	8003a8e <__adddf3+0x212>
 8003a82:	ea54 0c00 	orrs.w	ip, r4, r0
 8003a86:	bf04      	itt	eq
 8003a88:	4619      	moveq	r1, r3
 8003a8a:	4610      	moveq	r0, r2
 8003a8c:	bd30      	pop	{r4, r5, pc}
 8003a8e:	ea91 0f03 	teq	r1, r3
 8003a92:	bf1e      	ittt	ne
 8003a94:	2100      	movne	r1, #0
 8003a96:	2000      	movne	r0, #0
 8003a98:	bd30      	popne	{r4, r5, pc}
 8003a9a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003a9e:	d105      	bne.n	8003aac <__adddf3+0x230>
 8003aa0:	0040      	lsls	r0, r0, #1
 8003aa2:	4149      	adcs	r1, r1
 8003aa4:	bf28      	it	cs
 8003aa6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003aaa:	bd30      	pop	{r4, r5, pc}
 8003aac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003ab0:	bf3c      	itt	cc
 8003ab2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003ab6:	bd30      	popcc	{r4, r5, pc}
 8003ab8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003abc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003ac0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ac4:	f04f 0000 	mov.w	r0, #0
 8003ac8:	bd30      	pop	{r4, r5, pc}
 8003aca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003ace:	bf1a      	itte	ne
 8003ad0:	4619      	movne	r1, r3
 8003ad2:	4610      	movne	r0, r2
 8003ad4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003ad8:	bf1c      	itt	ne
 8003ada:	460b      	movne	r3, r1
 8003adc:	4602      	movne	r2, r0
 8003ade:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003ae2:	bf06      	itte	eq
 8003ae4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003ae8:	ea91 0f03 	teqeq	r1, r3
 8003aec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003af0:	bd30      	pop	{r4, r5, pc}
 8003af2:	bf00      	nop

08003af4 <__aeabi_ui2d>:
 8003af4:	f090 0f00 	teq	r0, #0
 8003af8:	bf04      	itt	eq
 8003afa:	2100      	moveq	r1, #0
 8003afc:	4770      	bxeq	lr
 8003afe:	b530      	push	{r4, r5, lr}
 8003b00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003b08:	f04f 0500 	mov.w	r5, #0
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	e750      	b.n	80039b4 <__adddf3+0x138>
 8003b12:	bf00      	nop

08003b14 <__aeabi_i2d>:
 8003b14:	f090 0f00 	teq	r0, #0
 8003b18:	bf04      	itt	eq
 8003b1a:	2100      	moveq	r1, #0
 8003b1c:	4770      	bxeq	lr
 8003b1e:	b530      	push	{r4, r5, lr}
 8003b20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003b28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003b2c:	bf48      	it	mi
 8003b2e:	4240      	negmi	r0, r0
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	e73e      	b.n	80039b4 <__adddf3+0x138>
 8003b36:	bf00      	nop

08003b38 <__aeabi_f2d>:
 8003b38:	0042      	lsls	r2, r0, #1
 8003b3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003b3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8003b42:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003b46:	bf1f      	itttt	ne
 8003b48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003b4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003b50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003b54:	4770      	bxne	lr
 8003b56:	f092 0f00 	teq	r2, #0
 8003b5a:	bf14      	ite	ne
 8003b5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003b60:	4770      	bxeq	lr
 8003b62:	b530      	push	{r4, r5, lr}
 8003b64:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003b68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003b6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003b70:	e720      	b.n	80039b4 <__adddf3+0x138>
 8003b72:	bf00      	nop

08003b74 <__aeabi_ul2d>:
 8003b74:	ea50 0201 	orrs.w	r2, r0, r1
 8003b78:	bf08      	it	eq
 8003b7a:	4770      	bxeq	lr
 8003b7c:	b530      	push	{r4, r5, lr}
 8003b7e:	f04f 0500 	mov.w	r5, #0
 8003b82:	e00a      	b.n	8003b9a <__aeabi_l2d+0x16>

08003b84 <__aeabi_l2d>:
 8003b84:	ea50 0201 	orrs.w	r2, r0, r1
 8003b88:	bf08      	it	eq
 8003b8a:	4770      	bxeq	lr
 8003b8c:	b530      	push	{r4, r5, lr}
 8003b8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003b92:	d502      	bpl.n	8003b9a <__aeabi_l2d+0x16>
 8003b94:	4240      	negs	r0, r0
 8003b96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003b9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003b9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003ba2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003ba6:	f43f aedc 	beq.w	8003962 <__adddf3+0xe6>
 8003baa:	f04f 0203 	mov.w	r2, #3
 8003bae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003bb2:	bf18      	it	ne
 8003bb4:	3203      	addne	r2, #3
 8003bb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003bba:	bf18      	it	ne
 8003bbc:	3203      	addne	r2, #3
 8003bbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003bc2:	f1c2 0320 	rsb	r3, r2, #32
 8003bc6:	fa00 fc03 	lsl.w	ip, r0, r3
 8003bca:	fa20 f002 	lsr.w	r0, r0, r2
 8003bce:	fa01 fe03 	lsl.w	lr, r1, r3
 8003bd2:	ea40 000e 	orr.w	r0, r0, lr
 8003bd6:	fa21 f102 	lsr.w	r1, r1, r2
 8003bda:	4414      	add	r4, r2
 8003bdc:	e6c1      	b.n	8003962 <__adddf3+0xe6>
 8003bde:	bf00      	nop

08003be0 <__aeabi_dmul>:
 8003be0:	b570      	push	{r4, r5, r6, lr}
 8003be2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003be6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003bea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003bee:	bf1d      	ittte	ne
 8003bf0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003bf4:	ea94 0f0c 	teqne	r4, ip
 8003bf8:	ea95 0f0c 	teqne	r5, ip
 8003bfc:	f000 f8de 	bleq	8003dbc <__aeabi_dmul+0x1dc>
 8003c00:	442c      	add	r4, r5
 8003c02:	ea81 0603 	eor.w	r6, r1, r3
 8003c06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003c0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003c0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003c12:	bf18      	it	ne
 8003c14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003c18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003c1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c20:	d038      	beq.n	8003c94 <__aeabi_dmul+0xb4>
 8003c22:	fba0 ce02 	umull	ip, lr, r0, r2
 8003c26:	f04f 0500 	mov.w	r5, #0
 8003c2a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003c2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003c32:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003c36:	f04f 0600 	mov.w	r6, #0
 8003c3a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003c3e:	f09c 0f00 	teq	ip, #0
 8003c42:	bf18      	it	ne
 8003c44:	f04e 0e01 	orrne.w	lr, lr, #1
 8003c48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003c4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003c50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003c54:	d204      	bcs.n	8003c60 <__aeabi_dmul+0x80>
 8003c56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003c5a:	416d      	adcs	r5, r5
 8003c5c:	eb46 0606 	adc.w	r6, r6, r6
 8003c60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003c64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003c68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003c6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003c70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003c74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003c78:	bf88      	it	hi
 8003c7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003c7e:	d81e      	bhi.n	8003cbe <__aeabi_dmul+0xde>
 8003c80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003c84:	bf08      	it	eq
 8003c86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003c8a:	f150 0000 	adcs.w	r0, r0, #0
 8003c8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c92:	bd70      	pop	{r4, r5, r6, pc}
 8003c94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003c98:	ea46 0101 	orr.w	r1, r6, r1
 8003c9c:	ea40 0002 	orr.w	r0, r0, r2
 8003ca0:	ea81 0103 	eor.w	r1, r1, r3
 8003ca4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003ca8:	bfc2      	ittt	gt
 8003caa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003cae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003cb2:	bd70      	popgt	{r4, r5, r6, pc}
 8003cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003cb8:	f04f 0e00 	mov.w	lr, #0
 8003cbc:	3c01      	subs	r4, #1
 8003cbe:	f300 80ab 	bgt.w	8003e18 <__aeabi_dmul+0x238>
 8003cc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003cc6:	bfde      	ittt	le
 8003cc8:	2000      	movle	r0, #0
 8003cca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003cce:	bd70      	pople	{r4, r5, r6, pc}
 8003cd0:	f1c4 0400 	rsb	r4, r4, #0
 8003cd4:	3c20      	subs	r4, #32
 8003cd6:	da35      	bge.n	8003d44 <__aeabi_dmul+0x164>
 8003cd8:	340c      	adds	r4, #12
 8003cda:	dc1b      	bgt.n	8003d14 <__aeabi_dmul+0x134>
 8003cdc:	f104 0414 	add.w	r4, r4, #20
 8003ce0:	f1c4 0520 	rsb	r5, r4, #32
 8003ce4:	fa00 f305 	lsl.w	r3, r0, r5
 8003ce8:	fa20 f004 	lsr.w	r0, r0, r4
 8003cec:	fa01 f205 	lsl.w	r2, r1, r5
 8003cf0:	ea40 0002 	orr.w	r0, r0, r2
 8003cf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003cf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003cfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003d00:	fa21 f604 	lsr.w	r6, r1, r4
 8003d04:	eb42 0106 	adc.w	r1, r2, r6
 8003d08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d0c:	bf08      	it	eq
 8003d0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003d12:	bd70      	pop	{r4, r5, r6, pc}
 8003d14:	f1c4 040c 	rsb	r4, r4, #12
 8003d18:	f1c4 0520 	rsb	r5, r4, #32
 8003d1c:	fa00 f304 	lsl.w	r3, r0, r4
 8003d20:	fa20 f005 	lsr.w	r0, r0, r5
 8003d24:	fa01 f204 	lsl.w	r2, r1, r4
 8003d28:	ea40 0002 	orr.w	r0, r0, r2
 8003d2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003d34:	f141 0100 	adc.w	r1, r1, #0
 8003d38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d3c:	bf08      	it	eq
 8003d3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003d42:	bd70      	pop	{r4, r5, r6, pc}
 8003d44:	f1c4 0520 	rsb	r5, r4, #32
 8003d48:	fa00 f205 	lsl.w	r2, r0, r5
 8003d4c:	ea4e 0e02 	orr.w	lr, lr, r2
 8003d50:	fa20 f304 	lsr.w	r3, r0, r4
 8003d54:	fa01 f205 	lsl.w	r2, r1, r5
 8003d58:	ea43 0302 	orr.w	r3, r3, r2
 8003d5c:	fa21 f004 	lsr.w	r0, r1, r4
 8003d60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003d64:	fa21 f204 	lsr.w	r2, r1, r4
 8003d68:	ea20 0002 	bic.w	r0, r0, r2
 8003d6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003d70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003d74:	bf08      	it	eq
 8003d76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003d7a:	bd70      	pop	{r4, r5, r6, pc}
 8003d7c:	f094 0f00 	teq	r4, #0
 8003d80:	d10f      	bne.n	8003da2 <__aeabi_dmul+0x1c2>
 8003d82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003d86:	0040      	lsls	r0, r0, #1
 8003d88:	eb41 0101 	adc.w	r1, r1, r1
 8003d8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003d90:	bf08      	it	eq
 8003d92:	3c01      	subeq	r4, #1
 8003d94:	d0f7      	beq.n	8003d86 <__aeabi_dmul+0x1a6>
 8003d96:	ea41 0106 	orr.w	r1, r1, r6
 8003d9a:	f095 0f00 	teq	r5, #0
 8003d9e:	bf18      	it	ne
 8003da0:	4770      	bxne	lr
 8003da2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003da6:	0052      	lsls	r2, r2, #1
 8003da8:	eb43 0303 	adc.w	r3, r3, r3
 8003dac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003db0:	bf08      	it	eq
 8003db2:	3d01      	subeq	r5, #1
 8003db4:	d0f7      	beq.n	8003da6 <__aeabi_dmul+0x1c6>
 8003db6:	ea43 0306 	orr.w	r3, r3, r6
 8003dba:	4770      	bx	lr
 8003dbc:	ea94 0f0c 	teq	r4, ip
 8003dc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003dc4:	bf18      	it	ne
 8003dc6:	ea95 0f0c 	teqne	r5, ip
 8003dca:	d00c      	beq.n	8003de6 <__aeabi_dmul+0x206>
 8003dcc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003dd0:	bf18      	it	ne
 8003dd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003dd6:	d1d1      	bne.n	8003d7c <__aeabi_dmul+0x19c>
 8003dd8:	ea81 0103 	eor.w	r1, r1, r3
 8003ddc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003de0:	f04f 0000 	mov.w	r0, #0
 8003de4:	bd70      	pop	{r4, r5, r6, pc}
 8003de6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003dea:	bf06      	itte	eq
 8003dec:	4610      	moveq	r0, r2
 8003dee:	4619      	moveq	r1, r3
 8003df0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003df4:	d019      	beq.n	8003e2a <__aeabi_dmul+0x24a>
 8003df6:	ea94 0f0c 	teq	r4, ip
 8003dfa:	d102      	bne.n	8003e02 <__aeabi_dmul+0x222>
 8003dfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003e00:	d113      	bne.n	8003e2a <__aeabi_dmul+0x24a>
 8003e02:	ea95 0f0c 	teq	r5, ip
 8003e06:	d105      	bne.n	8003e14 <__aeabi_dmul+0x234>
 8003e08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003e0c:	bf1c      	itt	ne
 8003e0e:	4610      	movne	r0, r2
 8003e10:	4619      	movne	r1, r3
 8003e12:	d10a      	bne.n	8003e2a <__aeabi_dmul+0x24a>
 8003e14:	ea81 0103 	eor.w	r1, r1, r3
 8003e18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003e1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003e20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003e24:	f04f 0000 	mov.w	r0, #0
 8003e28:	bd70      	pop	{r4, r5, r6, pc}
 8003e2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003e2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003e32:	bd70      	pop	{r4, r5, r6, pc}

08003e34 <__aeabi_ddiv>:
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003e3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003e3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003e42:	bf1d      	ittte	ne
 8003e44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003e48:	ea94 0f0c 	teqne	r4, ip
 8003e4c:	ea95 0f0c 	teqne	r5, ip
 8003e50:	f000 f8a7 	bleq	8003fa2 <__aeabi_ddiv+0x16e>
 8003e54:	eba4 0405 	sub.w	r4, r4, r5
 8003e58:	ea81 0e03 	eor.w	lr, r1, r3
 8003e5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003e60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003e64:	f000 8088 	beq.w	8003f78 <__aeabi_ddiv+0x144>
 8003e68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003e6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003e70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8003e74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003e78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003e7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003e80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8003e84:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003e88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003e8c:	429d      	cmp	r5, r3
 8003e8e:	bf08      	it	eq
 8003e90:	4296      	cmpeq	r6, r2
 8003e92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8003e96:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003e9a:	d202      	bcs.n	8003ea2 <__aeabi_ddiv+0x6e>
 8003e9c:	085b      	lsrs	r3, r3, #1
 8003e9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8003ea2:	1ab6      	subs	r6, r6, r2
 8003ea4:	eb65 0503 	sbc.w	r5, r5, r3
 8003ea8:	085b      	lsrs	r3, r3, #1
 8003eaa:	ea4f 0232 	mov.w	r2, r2, rrx
 8003eae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003eb2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8003eb6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003eba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003ebe:	bf22      	ittt	cs
 8003ec0:	1ab6      	subcs	r6, r6, r2
 8003ec2:	4675      	movcs	r5, lr
 8003ec4:	ea40 000c 	orrcs.w	r0, r0, ip
 8003ec8:	085b      	lsrs	r3, r3, #1
 8003eca:	ea4f 0232 	mov.w	r2, r2, rrx
 8003ece:	ebb6 0e02 	subs.w	lr, r6, r2
 8003ed2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003ed6:	bf22      	ittt	cs
 8003ed8:	1ab6      	subcs	r6, r6, r2
 8003eda:	4675      	movcs	r5, lr
 8003edc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8003ee0:	085b      	lsrs	r3, r3, #1
 8003ee2:	ea4f 0232 	mov.w	r2, r2, rrx
 8003ee6:	ebb6 0e02 	subs.w	lr, r6, r2
 8003eea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003eee:	bf22      	ittt	cs
 8003ef0:	1ab6      	subcs	r6, r6, r2
 8003ef2:	4675      	movcs	r5, lr
 8003ef4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	ea4f 0232 	mov.w	r2, r2, rrx
 8003efe:	ebb6 0e02 	subs.w	lr, r6, r2
 8003f02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8003f06:	bf22      	ittt	cs
 8003f08:	1ab6      	subcs	r6, r6, r2
 8003f0a:	4675      	movcs	r5, lr
 8003f0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8003f10:	ea55 0e06 	orrs.w	lr, r5, r6
 8003f14:	d018      	beq.n	8003f48 <__aeabi_ddiv+0x114>
 8003f16:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003f1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003f1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8003f22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8003f26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003f2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003f2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8003f32:	d1c0      	bne.n	8003eb6 <__aeabi_ddiv+0x82>
 8003f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f38:	d10b      	bne.n	8003f52 <__aeabi_ddiv+0x11e>
 8003f3a:	ea41 0100 	orr.w	r1, r1, r0
 8003f3e:	f04f 0000 	mov.w	r0, #0
 8003f42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8003f46:	e7b6      	b.n	8003eb6 <__aeabi_ddiv+0x82>
 8003f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003f4c:	bf04      	itt	eq
 8003f4e:	4301      	orreq	r1, r0
 8003f50:	2000      	moveq	r0, #0
 8003f52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003f56:	bf88      	it	hi
 8003f58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003f5c:	f63f aeaf 	bhi.w	8003cbe <__aeabi_dmul+0xde>
 8003f60:	ebb5 0c03 	subs.w	ip, r5, r3
 8003f64:	bf04      	itt	eq
 8003f66:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003f6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003f6e:	f150 0000 	adcs.w	r0, r0, #0
 8003f72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003f7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003f80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8003f84:	bfc2      	ittt	gt
 8003f86:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003f8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003f8e:	bd70      	popgt	{r4, r5, r6, pc}
 8003f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f94:	f04f 0e00 	mov.w	lr, #0
 8003f98:	3c01      	subs	r4, #1
 8003f9a:	e690      	b.n	8003cbe <__aeabi_dmul+0xde>
 8003f9c:	ea45 0e06 	orr.w	lr, r5, r6
 8003fa0:	e68d      	b.n	8003cbe <__aeabi_dmul+0xde>
 8003fa2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003fa6:	ea94 0f0c 	teq	r4, ip
 8003faa:	bf08      	it	eq
 8003fac:	ea95 0f0c 	teqeq	r5, ip
 8003fb0:	f43f af3b 	beq.w	8003e2a <__aeabi_dmul+0x24a>
 8003fb4:	ea94 0f0c 	teq	r4, ip
 8003fb8:	d10a      	bne.n	8003fd0 <__aeabi_ddiv+0x19c>
 8003fba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003fbe:	f47f af34 	bne.w	8003e2a <__aeabi_dmul+0x24a>
 8003fc2:	ea95 0f0c 	teq	r5, ip
 8003fc6:	f47f af25 	bne.w	8003e14 <__aeabi_dmul+0x234>
 8003fca:	4610      	mov	r0, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	e72c      	b.n	8003e2a <__aeabi_dmul+0x24a>
 8003fd0:	ea95 0f0c 	teq	r5, ip
 8003fd4:	d106      	bne.n	8003fe4 <__aeabi_ddiv+0x1b0>
 8003fd6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003fda:	f43f aefd 	beq.w	8003dd8 <__aeabi_dmul+0x1f8>
 8003fde:	4610      	mov	r0, r2
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	e722      	b.n	8003e2a <__aeabi_dmul+0x24a>
 8003fe4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003fe8:	bf18      	it	ne
 8003fea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003fee:	f47f aec5 	bne.w	8003d7c <__aeabi_dmul+0x19c>
 8003ff2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8003ff6:	f47f af0d 	bne.w	8003e14 <__aeabi_dmul+0x234>
 8003ffa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8003ffe:	f47f aeeb 	bne.w	8003dd8 <__aeabi_dmul+0x1f8>
 8004002:	e712      	b.n	8003e2a <__aeabi_dmul+0x24a>

08004004 <__gedf2>:
 8004004:	f04f 3cff 	mov.w	ip, #4294967295
 8004008:	e006      	b.n	8004018 <__cmpdf2+0x4>
 800400a:	bf00      	nop

0800400c <__ledf2>:
 800400c:	f04f 0c01 	mov.w	ip, #1
 8004010:	e002      	b.n	8004018 <__cmpdf2+0x4>
 8004012:	bf00      	nop

08004014 <__cmpdf2>:
 8004014:	f04f 0c01 	mov.w	ip, #1
 8004018:	f84d cd04 	str.w	ip, [sp, #-4]!
 800401c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004020:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004024:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004028:	bf18      	it	ne
 800402a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800402e:	d01b      	beq.n	8004068 <__cmpdf2+0x54>
 8004030:	b001      	add	sp, #4
 8004032:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8004036:	bf0c      	ite	eq
 8004038:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800403c:	ea91 0f03 	teqne	r1, r3
 8004040:	bf02      	ittt	eq
 8004042:	ea90 0f02 	teqeq	r0, r2
 8004046:	2000      	moveq	r0, #0
 8004048:	4770      	bxeq	lr
 800404a:	f110 0f00 	cmn.w	r0, #0
 800404e:	ea91 0f03 	teq	r1, r3
 8004052:	bf58      	it	pl
 8004054:	4299      	cmppl	r1, r3
 8004056:	bf08      	it	eq
 8004058:	4290      	cmpeq	r0, r2
 800405a:	bf2c      	ite	cs
 800405c:	17d8      	asrcs	r0, r3, #31
 800405e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8004062:	f040 0001 	orr.w	r0, r0, #1
 8004066:	4770      	bx	lr
 8004068:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800406c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004070:	d102      	bne.n	8004078 <__cmpdf2+0x64>
 8004072:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004076:	d107      	bne.n	8004088 <__cmpdf2+0x74>
 8004078:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800407c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004080:	d1d6      	bne.n	8004030 <__cmpdf2+0x1c>
 8004082:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004086:	d0d3      	beq.n	8004030 <__cmpdf2+0x1c>
 8004088:	f85d 0b04 	ldr.w	r0, [sp], #4
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop

08004090 <__aeabi_cdrcmple>:
 8004090:	4684      	mov	ip, r0
 8004092:	4610      	mov	r0, r2
 8004094:	4662      	mov	r2, ip
 8004096:	468c      	mov	ip, r1
 8004098:	4619      	mov	r1, r3
 800409a:	4663      	mov	r3, ip
 800409c:	e000      	b.n	80040a0 <__aeabi_cdcmpeq>
 800409e:	bf00      	nop

080040a0 <__aeabi_cdcmpeq>:
 80040a0:	b501      	push	{r0, lr}
 80040a2:	f7ff ffb7 	bl	8004014 <__cmpdf2>
 80040a6:	2800      	cmp	r0, #0
 80040a8:	bf48      	it	mi
 80040aa:	f110 0f00 	cmnmi.w	r0, #0
 80040ae:	bd01      	pop	{r0, pc}

080040b0 <__aeabi_dcmpeq>:
 80040b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040b4:	f7ff fff4 	bl	80040a0 <__aeabi_cdcmpeq>
 80040b8:	bf0c      	ite	eq
 80040ba:	2001      	moveq	r0, #1
 80040bc:	2000      	movne	r0, #0
 80040be:	f85d fb08 	ldr.w	pc, [sp], #8
 80040c2:	bf00      	nop

080040c4 <__aeabi_dcmplt>:
 80040c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040c8:	f7ff ffea 	bl	80040a0 <__aeabi_cdcmpeq>
 80040cc:	bf34      	ite	cc
 80040ce:	2001      	movcc	r0, #1
 80040d0:	2000      	movcs	r0, #0
 80040d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80040d6:	bf00      	nop

080040d8 <__aeabi_dcmple>:
 80040d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040dc:	f7ff ffe0 	bl	80040a0 <__aeabi_cdcmpeq>
 80040e0:	bf94      	ite	ls
 80040e2:	2001      	movls	r0, #1
 80040e4:	2000      	movhi	r0, #0
 80040e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80040ea:	bf00      	nop

080040ec <__aeabi_dcmpge>:
 80040ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80040f0:	f7ff ffce 	bl	8004090 <__aeabi_cdrcmple>
 80040f4:	bf94      	ite	ls
 80040f6:	2001      	movls	r0, #1
 80040f8:	2000      	movhi	r0, #0
 80040fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80040fe:	bf00      	nop

08004100 <__aeabi_dcmpgt>:
 8004100:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004104:	f7ff ffc4 	bl	8004090 <__aeabi_cdrcmple>
 8004108:	bf34      	ite	cc
 800410a:	2001      	movcc	r0, #1
 800410c:	2000      	movcs	r0, #0
 800410e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004112:	bf00      	nop

08004114 <__aeabi_d2iz>:
 8004114:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004118:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800411c:	d215      	bcs.n	800414a <__aeabi_d2iz+0x36>
 800411e:	d511      	bpl.n	8004144 <__aeabi_d2iz+0x30>
 8004120:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004124:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004128:	d912      	bls.n	8004150 <__aeabi_d2iz+0x3c>
 800412a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800412e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004132:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004136:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800413a:	fa23 f002 	lsr.w	r0, r3, r2
 800413e:	bf18      	it	ne
 8004140:	4240      	negne	r0, r0
 8004142:	4770      	bx	lr
 8004144:	f04f 0000 	mov.w	r0, #0
 8004148:	4770      	bx	lr
 800414a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800414e:	d105      	bne.n	800415c <__aeabi_d2iz+0x48>
 8004150:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004154:	bf08      	it	eq
 8004156:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800415a:	4770      	bx	lr
 800415c:	f04f 0000 	mov.w	r0, #0
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop

08004164 <__aeabi_d2f>:
 8004164:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004168:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800416c:	bf24      	itt	cs
 800416e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004172:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8004176:	d90d      	bls.n	8004194 <__aeabi_d2f+0x30>
 8004178:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800417c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004180:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004184:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8004188:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800418c:	bf08      	it	eq
 800418e:	f020 0001 	biceq.w	r0, r0, #1
 8004192:	4770      	bx	lr
 8004194:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8004198:	d121      	bne.n	80041de <__aeabi_d2f+0x7a>
 800419a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800419e:	bfbc      	itt	lt
 80041a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80041a4:	4770      	bxlt	lr
 80041a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80041aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80041ae:	f1c2 0218 	rsb	r2, r2, #24
 80041b2:	f1c2 0c20 	rsb	ip, r2, #32
 80041b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80041ba:	fa20 f002 	lsr.w	r0, r0, r2
 80041be:	bf18      	it	ne
 80041c0:	f040 0001 	orrne.w	r0, r0, #1
 80041c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80041c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80041cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80041d0:	ea40 000c 	orr.w	r0, r0, ip
 80041d4:	fa23 f302 	lsr.w	r3, r3, r2
 80041d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80041dc:	e7cc      	b.n	8004178 <__aeabi_d2f+0x14>
 80041de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80041e2:	d107      	bne.n	80041f4 <__aeabi_d2f+0x90>
 80041e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80041e8:	bf1e      	ittt	ne
 80041ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80041ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80041f2:	4770      	bxne	lr
 80041f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80041f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80041fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004200:	4770      	bx	lr
 8004202:	bf00      	nop

08004204 <__errno>:
 8004204:	4b01      	ldr	r3, [pc, #4]	; (800420c <__errno+0x8>)
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	1ffe886c 	.word	0x1ffe886c

08004210 <__libc_init_array>:
 8004210:	b570      	push	{r4, r5, r6, lr}
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <__libc_init_array+0x3c>)
 8004214:	4c0e      	ldr	r4, [pc, #56]	; (8004250 <__libc_init_array+0x40>)
 8004216:	1ae4      	subs	r4, r4, r3
 8004218:	10a4      	asrs	r4, r4, #2
 800421a:	2500      	movs	r5, #0
 800421c:	461e      	mov	r6, r3
 800421e:	42a5      	cmp	r5, r4
 8004220:	d004      	beq.n	800422c <__libc_init_array+0x1c>
 8004222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004226:	4798      	blx	r3
 8004228:	3501      	adds	r5, #1
 800422a:	e7f8      	b.n	800421e <__libc_init_array+0xe>
 800422c:	f7fd f924 	bl	8001478 <_init>
 8004230:	4c08      	ldr	r4, [pc, #32]	; (8004254 <__libc_init_array+0x44>)
 8004232:	4b09      	ldr	r3, [pc, #36]	; (8004258 <__libc_init_array+0x48>)
 8004234:	1ae4      	subs	r4, r4, r3
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2500      	movs	r5, #0
 800423a:	461e      	mov	r6, r3
 800423c:	42a5      	cmp	r5, r4
 800423e:	d004      	beq.n	800424a <__libc_init_array+0x3a>
 8004240:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004244:	4798      	blx	r3
 8004246:	3501      	adds	r5, #1
 8004248:	e7f8      	b.n	800423c <__libc_init_array+0x2c>
 800424a:	bd70      	pop	{r4, r5, r6, pc}
 800424c:	1ffe88a8 	.word	0x1ffe88a8
 8004250:	1ffe88a8 	.word	0x1ffe88a8
 8004254:	1ffe88a8 	.word	0x1ffe88a8
 8004258:	1ffe88a8 	.word	0x1ffe88a8

0800425c <memcpy>:
 800425c:	b510      	push	{r4, lr}
 800425e:	1e43      	subs	r3, r0, #1
 8004260:	440a      	add	r2, r1
 8004262:	4291      	cmp	r1, r2
 8004264:	d004      	beq.n	8004270 <memcpy+0x14>
 8004266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800426a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800426e:	e7f8      	b.n	8004262 <memcpy+0x6>
 8004270:	bd10      	pop	{r4, pc}

08004272 <memset>:
 8004272:	4402      	add	r2, r0
 8004274:	4603      	mov	r3, r0
 8004276:	4293      	cmp	r3, r2
 8004278:	d002      	beq.n	8004280 <memset+0xe>
 800427a:	f803 1b01 	strb.w	r1, [r3], #1
 800427e:	e7fa      	b.n	8004276 <memset+0x4>
 8004280:	4770      	bx	lr

08004282 <__cvt>:
 8004282:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	2b00      	cmp	r3, #0
 800428a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800428c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800428e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8004290:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004294:	461d      	mov	r5, r3
 8004296:	bfb8      	it	lt
 8004298:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800429c:	f027 0720 	bic.w	r7, r7, #32
 80042a0:	bfb6      	itet	lt
 80042a2:	461d      	movlt	r5, r3
 80042a4:	2300      	movge	r3, #0
 80042a6:	232d      	movlt	r3, #45	; 0x2d
 80042a8:	4614      	mov	r4, r2
 80042aa:	bfb8      	it	lt
 80042ac:	4614      	movlt	r4, r2
 80042ae:	2f46      	cmp	r7, #70	; 0x46
 80042b0:	700b      	strb	r3, [r1, #0]
 80042b2:	d003      	beq.n	80042bc <__cvt+0x3a>
 80042b4:	2f45      	cmp	r7, #69	; 0x45
 80042b6:	d103      	bne.n	80042c0 <__cvt+0x3e>
 80042b8:	3601      	adds	r6, #1
 80042ba:	e001      	b.n	80042c0 <__cvt+0x3e>
 80042bc:	2303      	movs	r3, #3
 80042be:	e000      	b.n	80042c2 <__cvt+0x40>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e88d 0448 	stmia.w	sp, {r3, r6, sl}
 80042c6:	ab06      	add	r3, sp, #24
 80042c8:	9303      	str	r3, [sp, #12]
 80042ca:	ab07      	add	r3, sp, #28
 80042cc:	9304      	str	r3, [sp, #16]
 80042ce:	4622      	mov	r2, r4
 80042d0:	462b      	mov	r3, r5
 80042d2:	f000 fd2d 	bl	8004d30 <_dtoa_r>
 80042d6:	2f47      	cmp	r7, #71	; 0x47
 80042d8:	4680      	mov	r8, r0
 80042da:	d102      	bne.n	80042e2 <__cvt+0x60>
 80042dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042de:	07db      	lsls	r3, r3, #31
 80042e0:	d526      	bpl.n	8004330 <__cvt+0xae>
 80042e2:	2f46      	cmp	r7, #70	; 0x46
 80042e4:	eb08 0906 	add.w	r9, r8, r6
 80042e8:	d111      	bne.n	800430e <__cvt+0x8c>
 80042ea:	f898 3000 	ldrb.w	r3, [r8]
 80042ee:	2b30      	cmp	r3, #48	; 0x30
 80042f0:	d10a      	bne.n	8004308 <__cvt+0x86>
 80042f2:	4620      	mov	r0, r4
 80042f4:	4629      	mov	r1, r5
 80042f6:	2200      	movs	r2, #0
 80042f8:	2300      	movs	r3, #0
 80042fa:	f7ff fed9 	bl	80040b0 <__aeabi_dcmpeq>
 80042fe:	b918      	cbnz	r0, 8004308 <__cvt+0x86>
 8004300:	f1c6 0601 	rsb	r6, r6, #1
 8004304:	f8ca 6000 	str.w	r6, [sl]
 8004308:	f8da 3000 	ldr.w	r3, [sl]
 800430c:	4499      	add	r9, r3
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	2200      	movs	r2, #0
 8004314:	2300      	movs	r3, #0
 8004316:	f7ff fecb 	bl	80040b0 <__aeabi_dcmpeq>
 800431a:	b108      	cbz	r0, 8004320 <__cvt+0x9e>
 800431c:	f8cd 901c 	str.w	r9, [sp, #28]
 8004320:	9b07      	ldr	r3, [sp, #28]
 8004322:	454b      	cmp	r3, r9
 8004324:	d204      	bcs.n	8004330 <__cvt+0xae>
 8004326:	1c5a      	adds	r2, r3, #1
 8004328:	9207      	str	r2, [sp, #28]
 800432a:	2230      	movs	r2, #48	; 0x30
 800432c:	701a      	strb	r2, [r3, #0]
 800432e:	e7f7      	b.n	8004320 <__cvt+0x9e>
 8004330:	9b07      	ldr	r3, [sp, #28]
 8004332:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004334:	ebc8 0303 	rsb	r3, r8, r3
 8004338:	4640      	mov	r0, r8
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	b008      	add	sp, #32
 800433e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004342 <__exponent>:
 8004342:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004344:	4603      	mov	r3, r0
 8004346:	2900      	cmp	r1, #0
 8004348:	bfb8      	it	lt
 800434a:	4249      	neglt	r1, r1
 800434c:	f803 2b02 	strb.w	r2, [r3], #2
 8004350:	bfb4      	ite	lt
 8004352:	222d      	movlt	r2, #45	; 0x2d
 8004354:	222b      	movge	r2, #43	; 0x2b
 8004356:	2909      	cmp	r1, #9
 8004358:	7042      	strb	r2, [r0, #1]
 800435a:	dd19      	ble.n	8004390 <__exponent+0x4e>
 800435c:	f10d 0407 	add.w	r4, sp, #7
 8004360:	4626      	mov	r6, r4
 8004362:	220a      	movs	r2, #10
 8004364:	fb91 f5f2 	sdiv	r5, r1, r2
 8004368:	fb02 1115 	mls	r1, r2, r5, r1
 800436c:	3130      	adds	r1, #48	; 0x30
 800436e:	2d09      	cmp	r5, #9
 8004370:	f804 1d01 	strb.w	r1, [r4, #-1]!
 8004374:	4629      	mov	r1, r5
 8004376:	dcf4      	bgt.n	8004362 <__exponent+0x20>
 8004378:	3130      	adds	r1, #48	; 0x30
 800437a:	1e65      	subs	r5, r4, #1
 800437c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004380:	42b5      	cmp	r5, r6
 8004382:	461a      	mov	r2, r3
 8004384:	d20a      	bcs.n	800439c <__exponent+0x5a>
 8004386:	f815 2b01 	ldrb.w	r2, [r5], #1
 800438a:	f803 2b01 	strb.w	r2, [r3], #1
 800438e:	e7f7      	b.n	8004380 <__exponent+0x3e>
 8004390:	2430      	movs	r4, #48	; 0x30
 8004392:	461a      	mov	r2, r3
 8004394:	4421      	add	r1, r4
 8004396:	f802 4b02 	strb.w	r4, [r2], #2
 800439a:	7059      	strb	r1, [r3, #1]
 800439c:	1a10      	subs	r0, r2, r0
 800439e:	b002      	add	sp, #8
 80043a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080043a4 <_printf_float>:
 80043a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043a8:	b091      	sub	sp, #68	; 0x44
 80043aa:	468b      	mov	fp, r1
 80043ac:	4615      	mov	r5, r2
 80043ae:	461e      	mov	r6, r3
 80043b0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80043b2:	4604      	mov	r4, r0
 80043b4:	f001 fb48 	bl	8005a48 <_localeconv_r>
 80043b8:	f8d0 a000 	ldr.w	sl, [r0]
 80043bc:	4650      	mov	r0, sl
 80043be:	f000 fc07 	bl	8004bd0 <strlen>
 80043c2:	2300      	movs	r3, #0
 80043c4:	930e      	str	r3, [sp, #56]	; 0x38
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9009      	str	r0, [sp, #36]	; 0x24
 80043ca:	3307      	adds	r3, #7
 80043cc:	f023 0307 	bic.w	r3, r3, #7
 80043d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80043d4:	f103 0208 	add.w	r2, r3, #8
 80043d8:	f89b 8018 	ldrb.w	r8, [fp, #24]
 80043dc:	603a      	str	r2, [r7, #0]
 80043de:	e9cb 0112 	strd	r0, r1, [fp, #72]	; 0x48
 80043e2:	f000 fbcb 	bl	8004b7c <__fpclassifyd>
 80043e6:	2801      	cmp	r0, #1
 80043e8:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 80043ec:	d119      	bne.n	8004422 <_printf_float+0x7e>
 80043ee:	2200      	movs	r2, #0
 80043f0:	2300      	movs	r3, #0
 80043f2:	f7ff fe67 	bl	80040c4 <__aeabi_dcmplt>
 80043f6:	b110      	cbz	r0, 80043fe <_printf_float+0x5a>
 80043f8:	232d      	movs	r3, #45	; 0x2d
 80043fa:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 80043fe:	4ba0      	ldr	r3, [pc, #640]	; (8004680 <_printf_float+0x2dc>)
 8004400:	4fa0      	ldr	r7, [pc, #640]	; (8004684 <_printf_float+0x2e0>)
 8004402:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004406:	bf88      	it	hi
 8004408:	461f      	movhi	r7, r3
 800440a:	2303      	movs	r3, #3
 800440c:	f8cb 3010 	str.w	r3, [fp, #16]
 8004410:	f8db 3000 	ldr.w	r3, [fp]
 8004414:	f023 0304 	bic.w	r3, r3, #4
 8004418:	f8cb 3000 	str.w	r3, [fp]
 800441c:	f04f 0900 	mov.w	r9, #0
 8004420:	e0a1      	b.n	8004566 <_printf_float+0x1c2>
 8004422:	f000 fbab 	bl	8004b7c <__fpclassifyd>
 8004426:	f8db 3000 	ldr.w	r3, [fp]
 800442a:	b948      	cbnz	r0, 8004440 <_printf_float+0x9c>
 800442c:	4a96      	ldr	r2, [pc, #600]	; (8004688 <_printf_float+0x2e4>)
 800442e:	4f97      	ldr	r7, [pc, #604]	; (800468c <_printf_float+0x2e8>)
 8004430:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004434:	bf88      	it	hi
 8004436:	4617      	movhi	r7, r2
 8004438:	2203      	movs	r2, #3
 800443a:	f8cb 2010 	str.w	r2, [fp, #16]
 800443e:	e7e9      	b.n	8004414 <_printf_float+0x70>
 8004440:	f8db 2004 	ldr.w	r2, [fp, #4]
 8004444:	ed9b 7b12 	vldr	d7, [fp, #72]	; 0x48
 8004448:	1c57      	adds	r7, r2, #1
 800444a:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800444e:	d101      	bne.n	8004454 <_printf_float+0xb0>
 8004450:	2206      	movs	r2, #6
 8004452:	e009      	b.n	8004468 <_printf_float+0xc4>
 8004454:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004458:	d002      	beq.n	8004460 <_printf_float+0xbc>
 800445a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800445e:	d105      	bne.n	800446c <_printf_float+0xc8>
 8004460:	2a00      	cmp	r2, #0
 8004462:	f040 81c7 	bne.w	80047f4 <_printf_float+0x450>
 8004466:	2201      	movs	r2, #1
 8004468:	f8cb 2004 	str.w	r2, [fp, #4]
 800446c:	f8db 2004 	ldr.w	r2, [fp, #4]
 8004470:	f8cd 8010 	str.w	r8, [sp, #16]
 8004474:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004478:	e88d 000c 	stmia.w	sp, {r2, r3}
 800447c:	f8cb 3000 	str.w	r3, [fp]
 8004480:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004484:	9302      	str	r3, [sp, #8]
 8004486:	ab0d      	add	r3, sp, #52	; 0x34
 8004488:	9303      	str	r3, [sp, #12]
 800448a:	ab0e      	add	r3, sp, #56	; 0x38
 800448c:	9305      	str	r3, [sp, #20]
 800448e:	2300      	movs	r3, #0
 8004490:	9306      	str	r3, [sp, #24]
 8004492:	4620      	mov	r0, r4
 8004494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004498:	f7ff fef3 	bl	8004282 <__cvt>
 800449c:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80044a0:	2b47      	cmp	r3, #71	; 0x47
 80044a2:	4607      	mov	r7, r0
 80044a4:	d10a      	bne.n	80044bc <_printf_float+0x118>
 80044a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044a8:	1cd8      	adds	r0, r3, #3
 80044aa:	db03      	blt.n	80044b4 <_printf_float+0x110>
 80044ac:	f8db 2004 	ldr.w	r2, [fp, #4]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	dd37      	ble.n	8004524 <_printf_float+0x180>
 80044b4:	f1a8 0802 	sub.w	r8, r8, #2
 80044b8:	fa5f f888 	uxtb.w	r8, r8
 80044bc:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80044c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044c2:	d815      	bhi.n	80044f0 <_printf_float+0x14c>
 80044c4:	3901      	subs	r1, #1
 80044c6:	4642      	mov	r2, r8
 80044c8:	f10b 0050 	add.w	r0, fp, #80	; 0x50
 80044cc:	910d      	str	r1, [sp, #52]	; 0x34
 80044ce:	f7ff ff38 	bl	8004342 <__exponent>
 80044d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044d4:	1883      	adds	r3, r0, r2
 80044d6:	2a01      	cmp	r2, #1
 80044d8:	4681      	mov	r9, r0
 80044da:	f8cb 3010 	str.w	r3, [fp, #16]
 80044de:	dc03      	bgt.n	80044e8 <_printf_float+0x144>
 80044e0:	f8db 2000 	ldr.w	r2, [fp]
 80044e4:	07d1      	lsls	r1, r2, #31
 80044e6:	d538      	bpl.n	800455a <_printf_float+0x1b6>
 80044e8:	3301      	adds	r3, #1
 80044ea:	f8cb 3010 	str.w	r3, [fp, #16]
 80044ee:	e034      	b.n	800455a <_printf_float+0x1b6>
 80044f0:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80044f4:	d118      	bne.n	8004528 <_printf_float+0x184>
 80044f6:	2900      	cmp	r1, #0
 80044f8:	f8db 3004 	ldr.w	r3, [fp, #4]
 80044fc:	dd09      	ble.n	8004512 <_printf_float+0x16e>
 80044fe:	f8cb 1010 	str.w	r1, [fp, #16]
 8004502:	b91b      	cbnz	r3, 800450c <_printf_float+0x168>
 8004504:	f8db 2000 	ldr.w	r2, [fp]
 8004508:	07d2      	lsls	r2, r2, #31
 800450a:	d521      	bpl.n	8004550 <_printf_float+0x1ac>
 800450c:	3301      	adds	r3, #1
 800450e:	440b      	add	r3, r1
 8004510:	e01c      	b.n	800454c <_printf_float+0x1a8>
 8004512:	b91b      	cbnz	r3, 800451c <_printf_float+0x178>
 8004514:	f8db 2000 	ldr.w	r2, [fp]
 8004518:	07d0      	lsls	r0, r2, #31
 800451a:	d501      	bpl.n	8004520 <_printf_float+0x17c>
 800451c:	3302      	adds	r3, #2
 800451e:	e015      	b.n	800454c <_printf_float+0x1a8>
 8004520:	2301      	movs	r3, #1
 8004522:	e013      	b.n	800454c <_printf_float+0x1a8>
 8004524:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004528:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800452a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800452c:	4293      	cmp	r3, r2
 800452e:	db07      	blt.n	8004540 <_printf_float+0x19c>
 8004530:	f8db 2000 	ldr.w	r2, [fp]
 8004534:	f8cb 3010 	str.w	r3, [fp, #16]
 8004538:	07d1      	lsls	r1, r2, #31
 800453a:	d509      	bpl.n	8004550 <_printf_float+0x1ac>
 800453c:	3301      	adds	r3, #1
 800453e:	e005      	b.n	800454c <_printf_float+0x1a8>
 8004540:	2b00      	cmp	r3, #0
 8004542:	bfd4      	ite	le
 8004544:	f1c3 0302 	rsble	r3, r3, #2
 8004548:	2301      	movgt	r3, #1
 800454a:	4413      	add	r3, r2
 800454c:	f8cb 3010 	str.w	r3, [fp, #16]
 8004550:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004552:	f8cb 3058 	str.w	r3, [fp, #88]	; 0x58
 8004556:	f04f 0900 	mov.w	r9, #0
 800455a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800455e:	b113      	cbz	r3, 8004566 <_printf_float+0x1c2>
 8004560:	232d      	movs	r3, #45	; 0x2d
 8004562:	f88b 3043 	strb.w	r3, [fp, #67]	; 0x43
 8004566:	9600      	str	r6, [sp, #0]
 8004568:	4620      	mov	r0, r4
 800456a:	4659      	mov	r1, fp
 800456c:	aa0f      	add	r2, sp, #60	; 0x3c
 800456e:	462b      	mov	r3, r5
 8004570:	f000 f95c 	bl	800482c <_printf_common>
 8004574:	3001      	adds	r0, #1
 8004576:	d102      	bne.n	800457e <_printf_float+0x1da>
 8004578:	f04f 30ff 	mov.w	r0, #4294967295
 800457c:	e152      	b.n	8004824 <_printf_float+0x480>
 800457e:	f8db 3000 	ldr.w	r3, [fp]
 8004582:	055a      	lsls	r2, r3, #21
 8004584:	d405      	bmi.n	8004592 <_printf_float+0x1ee>
 8004586:	4620      	mov	r0, r4
 8004588:	4629      	mov	r1, r5
 800458a:	463a      	mov	r2, r7
 800458c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8004590:	e108      	b.n	80047a4 <_printf_float+0x400>
 8004592:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004596:	f240 80d0 	bls.w	800473a <_printf_float+0x396>
 800459a:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 800459e:	2200      	movs	r2, #0
 80045a0:	2300      	movs	r3, #0
 80045a2:	f7ff fd85 	bl	80040b0 <__aeabi_dcmpeq>
 80045a6:	b350      	cbz	r0, 80045fe <_printf_float+0x25a>
 80045a8:	4620      	mov	r0, r4
 80045aa:	4629      	mov	r1, r5
 80045ac:	4a38      	ldr	r2, [pc, #224]	; (8004690 <_printf_float+0x2ec>)
 80045ae:	2301      	movs	r3, #1
 80045b0:	47b0      	blx	r6
 80045b2:	3001      	adds	r0, #1
 80045b4:	d0e0      	beq.n	8004578 <_printf_float+0x1d4>
 80045b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80045ba:	429a      	cmp	r2, r3
 80045bc:	db09      	blt.n	80045d2 <_printf_float+0x22e>
 80045be:	f8db 3000 	ldr.w	r3, [fp]
 80045c2:	07d8      	lsls	r0, r3, #31
 80045c4:	d405      	bmi.n	80045d2 <_printf_float+0x22e>
 80045c6:	f8db 3000 	ldr.w	r3, [fp]
 80045ca:	079f      	lsls	r7, r3, #30
 80045cc:	f100 8110 	bmi.w	80047f0 <_printf_float+0x44c>
 80045d0:	e107      	b.n	80047e2 <_printf_float+0x43e>
 80045d2:	4620      	mov	r0, r4
 80045d4:	4629      	mov	r1, r5
 80045d6:	4652      	mov	r2, sl
 80045d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045da:	47b0      	blx	r6
 80045dc:	3001      	adds	r0, #1
 80045de:	d0cb      	beq.n	8004578 <_printf_float+0x1d4>
 80045e0:	2700      	movs	r7, #0
 80045e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e4:	3b01      	subs	r3, #1
 80045e6:	429f      	cmp	r7, r3
 80045e8:	daed      	bge.n	80045c6 <_printf_float+0x222>
 80045ea:	4620      	mov	r0, r4
 80045ec:	4629      	mov	r1, r5
 80045ee:	f10b 021a 	add.w	r2, fp, #26
 80045f2:	2301      	movs	r3, #1
 80045f4:	47b0      	blx	r6
 80045f6:	3001      	adds	r0, #1
 80045f8:	d0be      	beq.n	8004578 <_printf_float+0x1d4>
 80045fa:	3701      	adds	r7, #1
 80045fc:	e7f1      	b.n	80045e2 <_printf_float+0x23e>
 80045fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004600:	2b00      	cmp	r3, #0
 8004602:	dc29      	bgt.n	8004658 <_printf_float+0x2b4>
 8004604:	4620      	mov	r0, r4
 8004606:	4629      	mov	r1, r5
 8004608:	4a21      	ldr	r2, [pc, #132]	; (8004690 <_printf_float+0x2ec>)
 800460a:	2301      	movs	r3, #1
 800460c:	47b0      	blx	r6
 800460e:	3001      	adds	r0, #1
 8004610:	d0b2      	beq.n	8004578 <_printf_float+0x1d4>
 8004612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004614:	b92b      	cbnz	r3, 8004622 <_printf_float+0x27e>
 8004616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004618:	b91b      	cbnz	r3, 8004622 <_printf_float+0x27e>
 800461a:	f8db 3000 	ldr.w	r3, [fp]
 800461e:	07d9      	lsls	r1, r3, #31
 8004620:	d5d1      	bpl.n	80045c6 <_printf_float+0x222>
 8004622:	4620      	mov	r0, r4
 8004624:	4629      	mov	r1, r5
 8004626:	4652      	mov	r2, sl
 8004628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800462a:	47b0      	blx	r6
 800462c:	3001      	adds	r0, #1
 800462e:	d0a3      	beq.n	8004578 <_printf_float+0x1d4>
 8004630:	f04f 0800 	mov.w	r8, #0
 8004634:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004636:	425b      	negs	r3, r3
 8004638:	4598      	cmp	r8, r3
 800463a:	4620      	mov	r0, r4
 800463c:	4629      	mov	r1, r5
 800463e:	da08      	bge.n	8004652 <_printf_float+0x2ae>
 8004640:	f10b 021a 	add.w	r2, fp, #26
 8004644:	2301      	movs	r3, #1
 8004646:	47b0      	blx	r6
 8004648:	3001      	adds	r0, #1
 800464a:	d095      	beq.n	8004578 <_printf_float+0x1d4>
 800464c:	f108 0801 	add.w	r8, r8, #1
 8004650:	e7f0      	b.n	8004634 <_printf_float+0x290>
 8004652:	463a      	mov	r2, r7
 8004654:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004656:	e0a5      	b.n	80047a4 <_printf_float+0x400>
 8004658:	f8db 2058 	ldr.w	r2, [fp, #88]	; 0x58
 800465c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800465e:	429a      	cmp	r2, r3
 8004660:	bfa8      	it	ge
 8004662:	461a      	movge	r2, r3
 8004664:	2a00      	cmp	r2, #0
 8004666:	4691      	mov	r9, r2
 8004668:	dc02      	bgt.n	8004670 <_printf_float+0x2cc>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	e01c      	b.n	80046aa <_printf_float+0x306>
 8004670:	4620      	mov	r0, r4
 8004672:	4629      	mov	r1, r5
 8004674:	463a      	mov	r2, r7
 8004676:	464b      	mov	r3, r9
 8004678:	47b0      	blx	r6
 800467a:	3001      	adds	r0, #1
 800467c:	d1f5      	bne.n	800466a <_printf_float+0x2c6>
 800467e:	e77b      	b.n	8004578 <_printf_float+0x1d4>
 8004680:	08006b9c 	.word	0x08006b9c
 8004684:	08006b98 	.word	0x08006b98
 8004688:	08006ba4 	.word	0x08006ba4
 800468c:	08006ba0 	.word	0x08006ba0
 8004690:	08006ba8 	.word	0x08006ba8
 8004694:	4620      	mov	r0, r4
 8004696:	4629      	mov	r1, r5
 8004698:	f10b 021a 	add.w	r2, fp, #26
 800469c:	2301      	movs	r3, #1
 800469e:	47b0      	blx	r6
 80046a0:	3001      	adds	r0, #1
 80046a2:	f43f af69 	beq.w	8004578 <_printf_float+0x1d4>
 80046a6:	f108 0801 	add.w	r8, r8, #1
 80046aa:	f8db 3058 	ldr.w	r3, [fp, #88]	; 0x58
 80046ae:	f1b9 0f00 	cmp.w	r9, #0
 80046b2:	bfac      	ite	ge
 80046b4:	ebc9 0203 	rsbge	r2, r9, r3
 80046b8:	461a      	movlt	r2, r3
 80046ba:	4590      	cmp	r8, r2
 80046bc:	dbea      	blt.n	8004694 <_printf_float+0x2f0>
 80046be:	eb07 0803 	add.w	r8, r7, r3
 80046c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80046c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046c6:	429a      	cmp	r2, r3
 80046c8:	db10      	blt.n	80046ec <_printf_float+0x348>
 80046ca:	f8db 3000 	ldr.w	r3, [fp]
 80046ce:	07da      	lsls	r2, r3, #31
 80046d0:	d40c      	bmi.n	80046ec <_printf_float+0x348>
 80046d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80046d4:	4417      	add	r7, r2
 80046d6:	ebc8 0307 	rsb	r3, r8, r7
 80046da:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80046dc:	1bd2      	subs	r2, r2, r7
 80046de:	4293      	cmp	r3, r2
 80046e0:	bfa8      	it	ge
 80046e2:	4613      	movge	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	461f      	mov	r7, r3
 80046e8:	dc08      	bgt.n	80046fc <_printf_float+0x358>
 80046ea:	e00e      	b.n	800470a <_printf_float+0x366>
 80046ec:	4620      	mov	r0, r4
 80046ee:	4629      	mov	r1, r5
 80046f0:	4652      	mov	r2, sl
 80046f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046f4:	47b0      	blx	r6
 80046f6:	3001      	adds	r0, #1
 80046f8:	d1eb      	bne.n	80046d2 <_printf_float+0x32e>
 80046fa:	e73d      	b.n	8004578 <_printf_float+0x1d4>
 80046fc:	4620      	mov	r0, r4
 80046fe:	4629      	mov	r1, r5
 8004700:	4642      	mov	r2, r8
 8004702:	47b0      	blx	r6
 8004704:	3001      	adds	r0, #1
 8004706:	f43f af37 	beq.w	8004578 <_printf_float+0x1d4>
 800470a:	f04f 0800 	mov.w	r8, #0
 800470e:	e00a      	b.n	8004726 <_printf_float+0x382>
 8004710:	4620      	mov	r0, r4
 8004712:	4629      	mov	r1, r5
 8004714:	f10b 021a 	add.w	r2, fp, #26
 8004718:	2301      	movs	r3, #1
 800471a:	47b0      	blx	r6
 800471c:	3001      	adds	r0, #1
 800471e:	f43f af2b 	beq.w	8004578 <_printf_float+0x1d4>
 8004722:	f108 0801 	add.w	r8, r8, #1
 8004726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004728:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800472a:	2f00      	cmp	r7, #0
 800472c:	eba3 0302 	sub.w	r3, r3, r2
 8004730:	bfa8      	it	ge
 8004732:	1bdb      	subge	r3, r3, r7
 8004734:	4598      	cmp	r8, r3
 8004736:	dbeb      	blt.n	8004710 <_printf_float+0x36c>
 8004738:	e745      	b.n	80045c6 <_printf_float+0x222>
 800473a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800473c:	2a01      	cmp	r2, #1
 800473e:	dc01      	bgt.n	8004744 <_printf_float+0x3a0>
 8004740:	07db      	lsls	r3, r3, #31
 8004742:	d536      	bpl.n	80047b2 <_printf_float+0x40e>
 8004744:	4620      	mov	r0, r4
 8004746:	4629      	mov	r1, r5
 8004748:	463a      	mov	r2, r7
 800474a:	2301      	movs	r3, #1
 800474c:	47b0      	blx	r6
 800474e:	3001      	adds	r0, #1
 8004750:	f43f af12 	beq.w	8004578 <_printf_float+0x1d4>
 8004754:	4620      	mov	r0, r4
 8004756:	4629      	mov	r1, r5
 8004758:	4652      	mov	r2, sl
 800475a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800475c:	47b0      	blx	r6
 800475e:	3001      	adds	r0, #1
 8004760:	f43f af0a 	beq.w	8004578 <_printf_float+0x1d4>
 8004764:	e9db 0112 	ldrd	r0, r1, [fp, #72]	; 0x48
 8004768:	2200      	movs	r2, #0
 800476a:	2300      	movs	r3, #0
 800476c:	f7ff fca0 	bl	80040b0 <__aeabi_dcmpeq>
 8004770:	b9e8      	cbnz	r0, 80047ae <_printf_float+0x40a>
 8004772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004774:	4620      	mov	r0, r4
 8004776:	4629      	mov	r1, r5
 8004778:	1c7a      	adds	r2, r7, #1
 800477a:	3b01      	subs	r3, #1
 800477c:	e01d      	b.n	80047ba <_printf_float+0x416>
 800477e:	4620      	mov	r0, r4
 8004780:	4629      	mov	r1, r5
 8004782:	f10b 021a 	add.w	r2, fp, #26
 8004786:	2301      	movs	r3, #1
 8004788:	47b0      	blx	r6
 800478a:	3001      	adds	r0, #1
 800478c:	f43f aef4 	beq.w	8004578 <_printf_float+0x1d4>
 8004790:	3701      	adds	r7, #1
 8004792:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004794:	3b01      	subs	r3, #1
 8004796:	429f      	cmp	r7, r3
 8004798:	dbf1      	blt.n	800477e <_printf_float+0x3da>
 800479a:	4620      	mov	r0, r4
 800479c:	4629      	mov	r1, r5
 800479e:	f10b 0250 	add.w	r2, fp, #80	; 0x50
 80047a2:	464b      	mov	r3, r9
 80047a4:	47b0      	blx	r6
 80047a6:	3001      	adds	r0, #1
 80047a8:	f47f af0d 	bne.w	80045c6 <_printf_float+0x222>
 80047ac:	e6e4      	b.n	8004578 <_printf_float+0x1d4>
 80047ae:	2700      	movs	r7, #0
 80047b0:	e7ef      	b.n	8004792 <_printf_float+0x3ee>
 80047b2:	4620      	mov	r0, r4
 80047b4:	4629      	mov	r1, r5
 80047b6:	463a      	mov	r2, r7
 80047b8:	2301      	movs	r3, #1
 80047ba:	47b0      	blx	r6
 80047bc:	3001      	adds	r0, #1
 80047be:	d1ec      	bne.n	800479a <_printf_float+0x3f6>
 80047c0:	e6da      	b.n	8004578 <_printf_float+0x1d4>
 80047c2:	4620      	mov	r0, r4
 80047c4:	4629      	mov	r1, r5
 80047c6:	f10b 0219 	add.w	r2, fp, #25
 80047ca:	2301      	movs	r3, #1
 80047cc:	47b0      	blx	r6
 80047ce:	3001      	adds	r0, #1
 80047d0:	f43f aed2 	beq.w	8004578 <_printf_float+0x1d4>
 80047d4:	3701      	adds	r7, #1
 80047d6:	f8db 300c 	ldr.w	r3, [fp, #12]
 80047da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80047dc:	1a9b      	subs	r3, r3, r2
 80047de:	429f      	cmp	r7, r3
 80047e0:	dbef      	blt.n	80047c2 <_printf_float+0x41e>
 80047e2:	f8db 000c 	ldr.w	r0, [fp, #12]
 80047e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80047e8:	4298      	cmp	r0, r3
 80047ea:	bfb8      	it	lt
 80047ec:	4618      	movlt	r0, r3
 80047ee:	e019      	b.n	8004824 <_printf_float+0x480>
 80047f0:	2700      	movs	r7, #0
 80047f2:	e7f0      	b.n	80047d6 <_printf_float+0x432>
 80047f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047f8:	e88d 000c 	stmia.w	sp, {r2, r3}
 80047fc:	f8cb 3000 	str.w	r3, [fp]
 8004800:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8004804:	9302      	str	r3, [sp, #8]
 8004806:	ab0d      	add	r3, sp, #52	; 0x34
 8004808:	9303      	str	r3, [sp, #12]
 800480a:	ab0e      	add	r3, sp, #56	; 0x38
 800480c:	9305      	str	r3, [sp, #20]
 800480e:	2300      	movs	r3, #0
 8004810:	9306      	str	r3, [sp, #24]
 8004812:	f8cd 8010 	str.w	r8, [sp, #16]
 8004816:	4620      	mov	r0, r4
 8004818:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800481c:	f7ff fd31 	bl	8004282 <__cvt>
 8004820:	4607      	mov	r7, r0
 8004822:	e640      	b.n	80044a6 <_printf_float+0x102>
 8004824:	b011      	add	sp, #68	; 0x44
 8004826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800482a:	bf00      	nop

0800482c <_printf_common>:
 800482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004830:	4691      	mov	r9, r2
 8004832:	461f      	mov	r7, r3
 8004834:	688a      	ldr	r2, [r1, #8]
 8004836:	690b      	ldr	r3, [r1, #16]
 8004838:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800483c:	4293      	cmp	r3, r2
 800483e:	bfb8      	it	lt
 8004840:	4613      	movlt	r3, r2
 8004842:	f8c9 3000 	str.w	r3, [r9]
 8004846:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800484a:	4606      	mov	r6, r0
 800484c:	460c      	mov	r4, r1
 800484e:	b112      	cbz	r2, 8004856 <_printf_common+0x2a>
 8004850:	3301      	adds	r3, #1
 8004852:	f8c9 3000 	str.w	r3, [r9]
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	0699      	lsls	r1, r3, #26
 800485a:	bf42      	ittt	mi
 800485c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004860:	3302      	addmi	r3, #2
 8004862:	f8c9 3000 	strmi.w	r3, [r9]
 8004866:	6825      	ldr	r5, [r4, #0]
 8004868:	f015 0506 	ands.w	r5, r5, #6
 800486c:	d01c      	beq.n	80048a8 <_printf_common+0x7c>
 800486e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004872:	6822      	ldr	r2, [r4, #0]
 8004874:	3300      	adds	r3, #0
 8004876:	bf18      	it	ne
 8004878:	2301      	movne	r3, #1
 800487a:	0692      	lsls	r2, r2, #26
 800487c:	d51f      	bpl.n	80048be <_printf_common+0x92>
 800487e:	18e1      	adds	r1, r4, r3
 8004880:	1c5a      	adds	r2, r3, #1
 8004882:	2030      	movs	r0, #48	; 0x30
 8004884:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004888:	4422      	add	r2, r4
 800488a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800488e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004892:	3302      	adds	r3, #2
 8004894:	e013      	b.n	80048be <_printf_common+0x92>
 8004896:	4630      	mov	r0, r6
 8004898:	4639      	mov	r1, r7
 800489a:	f104 0219 	add.w	r2, r4, #25
 800489e:	2301      	movs	r3, #1
 80048a0:	47c0      	blx	r8
 80048a2:	3001      	adds	r0, #1
 80048a4:	d007      	beq.n	80048b6 <_printf_common+0x8a>
 80048a6:	3501      	adds	r5, #1
 80048a8:	68e3      	ldr	r3, [r4, #12]
 80048aa:	f8d9 2000 	ldr.w	r2, [r9]
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	429d      	cmp	r5, r3
 80048b2:	dbf0      	blt.n	8004896 <_printf_common+0x6a>
 80048b4:	e7db      	b.n	800486e <_printf_common+0x42>
 80048b6:	f04f 30ff 	mov.w	r0, #4294967295
 80048ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048be:	4630      	mov	r0, r6
 80048c0:	4639      	mov	r1, r7
 80048c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048c6:	47c0      	blx	r8
 80048c8:	3001      	adds	r0, #1
 80048ca:	d0f4      	beq.n	80048b6 <_printf_common+0x8a>
 80048cc:	6822      	ldr	r2, [r4, #0]
 80048ce:	f8d9 5000 	ldr.w	r5, [r9]
 80048d2:	68e3      	ldr	r3, [r4, #12]
 80048d4:	f002 0206 	and.w	r2, r2, #6
 80048d8:	2a04      	cmp	r2, #4
 80048da:	bf08      	it	eq
 80048dc:	1b5d      	subeq	r5, r3, r5
 80048de:	6922      	ldr	r2, [r4, #16]
 80048e0:	68a3      	ldr	r3, [r4, #8]
 80048e2:	bf0c      	ite	eq
 80048e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048e8:	2500      	movne	r5, #0
 80048ea:	4293      	cmp	r3, r2
 80048ec:	bfc4      	itt	gt
 80048ee:	1a9b      	subgt	r3, r3, r2
 80048f0:	18ed      	addgt	r5, r5, r3
 80048f2:	f04f 0900 	mov.w	r9, #0
 80048f6:	45a9      	cmp	r9, r5
 80048f8:	da0a      	bge.n	8004910 <_printf_common+0xe4>
 80048fa:	4630      	mov	r0, r6
 80048fc:	4639      	mov	r1, r7
 80048fe:	f104 021a 	add.w	r2, r4, #26
 8004902:	2301      	movs	r3, #1
 8004904:	47c0      	blx	r8
 8004906:	3001      	adds	r0, #1
 8004908:	d0d5      	beq.n	80048b6 <_printf_common+0x8a>
 800490a:	f109 0901 	add.w	r9, r9, #1
 800490e:	e7f2      	b.n	80048f6 <_printf_common+0xca>
 8004910:	2000      	movs	r0, #0
 8004912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08004918 <_printf_i>:
 8004918:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800491c:	460c      	mov	r4, r1
 800491e:	4617      	mov	r7, r2
 8004920:	7e22      	ldrb	r2, [r4, #24]
 8004922:	2a6e      	cmp	r2, #110	; 0x6e
 8004924:	4698      	mov	r8, r3
 8004926:	4606      	mov	r6, r0
 8004928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800492a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 800492e:	f000 80a9 	beq.w	8004a84 <_printf_i+0x16c>
 8004932:	d812      	bhi.n	800495a <_printf_i+0x42>
 8004934:	2a63      	cmp	r2, #99	; 0x63
 8004936:	d023      	beq.n	8004980 <_printf_i+0x68>
 8004938:	d80a      	bhi.n	8004950 <_printf_i+0x38>
 800493a:	2a00      	cmp	r2, #0
 800493c:	f000 80b6 	beq.w	8004aac <_printf_i+0x194>
 8004940:	2a58      	cmp	r2, #88	; 0x58
 8004942:	f040 80c5 	bne.w	8004ad0 <_printf_i+0x1b8>
 8004946:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800494a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8004b44 <_printf_i+0x22c>
 800494e:	e051      	b.n	80049f4 <_printf_i+0xdc>
 8004950:	2a64      	cmp	r2, #100	; 0x64
 8004952:	d01e      	beq.n	8004992 <_printf_i+0x7a>
 8004954:	2a69      	cmp	r2, #105	; 0x69
 8004956:	d01c      	beq.n	8004992 <_printf_i+0x7a>
 8004958:	e0ba      	b.n	8004ad0 <_printf_i+0x1b8>
 800495a:	2a73      	cmp	r2, #115	; 0x73
 800495c:	f000 80aa 	beq.w	8004ab4 <_printf_i+0x19c>
 8004960:	d809      	bhi.n	8004976 <_printf_i+0x5e>
 8004962:	2a6f      	cmp	r2, #111	; 0x6f
 8004964:	d02b      	beq.n	80049be <_printf_i+0xa6>
 8004966:	2a70      	cmp	r2, #112	; 0x70
 8004968:	f040 80b2 	bne.w	8004ad0 <_printf_i+0x1b8>
 800496c:	6822      	ldr	r2, [r4, #0]
 800496e:	f042 0220 	orr.w	r2, r2, #32
 8004972:	6022      	str	r2, [r4, #0]
 8004974:	e039      	b.n	80049ea <_printf_i+0xd2>
 8004976:	2a75      	cmp	r2, #117	; 0x75
 8004978:	d021      	beq.n	80049be <_printf_i+0xa6>
 800497a:	2a78      	cmp	r2, #120	; 0x78
 800497c:	d035      	beq.n	80049ea <_printf_i+0xd2>
 800497e:	e0a7      	b.n	8004ad0 <_printf_i+0x1b8>
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	1d11      	adds	r1, r2, #4
 8004984:	6019      	str	r1, [r3, #0]
 8004986:	6813      	ldr	r3, [r2, #0]
 8004988:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800498c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004990:	e0a2      	b.n	8004ad8 <_printf_i+0x1c0>
 8004992:	6820      	ldr	r0, [r4, #0]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	f010 0f80 	tst.w	r0, #128	; 0x80
 800499a:	d003      	beq.n	80049a4 <_printf_i+0x8c>
 800499c:	1d10      	adds	r0, r2, #4
 800499e:	6018      	str	r0, [r3, #0]
 80049a0:	6813      	ldr	r3, [r2, #0]
 80049a2:	e005      	b.n	80049b0 <_printf_i+0x98>
 80049a4:	0645      	lsls	r5, r0, #25
 80049a6:	d5f9      	bpl.n	800499c <_printf_i+0x84>
 80049a8:	1d10      	adds	r0, r2, #4
 80049aa:	6018      	str	r0, [r3, #0]
 80049ac:	f9b2 3000 	ldrsh.w	r3, [r2]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da3b      	bge.n	8004a2c <_printf_i+0x114>
 80049b4:	222d      	movs	r2, #45	; 0x2d
 80049b6:	425b      	negs	r3, r3
 80049b8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80049bc:	e036      	b.n	8004a2c <_printf_i+0x114>
 80049be:	6820      	ldr	r0, [r4, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80049c6:	d003      	beq.n	80049d0 <_printf_i+0xb8>
 80049c8:	1d10      	adds	r0, r2, #4
 80049ca:	6018      	str	r0, [r3, #0]
 80049cc:	6813      	ldr	r3, [r2, #0]
 80049ce:	e004      	b.n	80049da <_printf_i+0xc2>
 80049d0:	0640      	lsls	r0, r0, #25
 80049d2:	d5f9      	bpl.n	80049c8 <_printf_i+0xb0>
 80049d4:	1d10      	adds	r0, r2, #4
 80049d6:	6018      	str	r0, [r3, #0]
 80049d8:	8813      	ldrh	r3, [r2, #0]
 80049da:	7e22      	ldrb	r2, [r4, #24]
 80049dc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8004b44 <_printf_i+0x22c>
 80049e0:	2a6f      	cmp	r2, #111	; 0x6f
 80049e2:	bf0c      	ite	eq
 80049e4:	2208      	moveq	r2, #8
 80049e6:	220a      	movne	r2, #10
 80049e8:	e01c      	b.n	8004a24 <_printf_i+0x10c>
 80049ea:	2278      	movs	r2, #120	; 0x78
 80049ec:	f8df e158 	ldr.w	lr, [pc, #344]	; 8004b48 <_printf_i+0x230>
 80049f0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80049fc:	f100 0504 	add.w	r5, r0, #4
 8004a00:	601d      	str	r5, [r3, #0]
 8004a02:	d001      	beq.n	8004a08 <_printf_i+0xf0>
 8004a04:	6803      	ldr	r3, [r0, #0]
 8004a06:	e002      	b.n	8004a0e <_printf_i+0xf6>
 8004a08:	0655      	lsls	r5, r2, #25
 8004a0a:	d5fb      	bpl.n	8004a04 <_printf_i+0xec>
 8004a0c:	8803      	ldrh	r3, [r0, #0]
 8004a0e:	07d0      	lsls	r0, r2, #31
 8004a10:	bf44      	itt	mi
 8004a12:	f042 0220 	orrmi.w	r2, r2, #32
 8004a16:	6022      	strmi	r2, [r4, #0]
 8004a18:	b91b      	cbnz	r3, 8004a22 <_printf_i+0x10a>
 8004a1a:	6822      	ldr	r2, [r4, #0]
 8004a1c:	f022 0220 	bic.w	r2, r2, #32
 8004a20:	6022      	str	r2, [r4, #0]
 8004a22:	2210      	movs	r2, #16
 8004a24:	2000      	movs	r0, #0
 8004a26:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8004a2a:	e002      	b.n	8004a32 <_printf_i+0x11a>
 8004a2c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8004b44 <_printf_i+0x22c>
 8004a30:	220a      	movs	r2, #10
 8004a32:	6865      	ldr	r5, [r4, #4]
 8004a34:	60a5      	str	r5, [r4, #8]
 8004a36:	2d00      	cmp	r5, #0
 8004a38:	bfa2      	ittt	ge
 8004a3a:	6820      	ldrge	r0, [r4, #0]
 8004a3c:	f020 0004 	bicge.w	r0, r0, #4
 8004a40:	6020      	strge	r0, [r4, #0]
 8004a42:	b903      	cbnz	r3, 8004a46 <_printf_i+0x12e>
 8004a44:	b165      	cbz	r5, 8004a60 <_printf_i+0x148>
 8004a46:	460d      	mov	r5, r1
 8004a48:	fbb3 f0f2 	udiv	r0, r3, r2
 8004a4c:	fb02 3310 	mls	r3, r2, r0, r3
 8004a50:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8004a54:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2800      	cmp	r0, #0
 8004a5c:	d1f4      	bne.n	8004a48 <_printf_i+0x130>
 8004a5e:	e000      	b.n	8004a62 <_printf_i+0x14a>
 8004a60:	460d      	mov	r5, r1
 8004a62:	2a08      	cmp	r2, #8
 8004a64:	d10b      	bne.n	8004a7e <_printf_i+0x166>
 8004a66:	6823      	ldr	r3, [r4, #0]
 8004a68:	07da      	lsls	r2, r3, #31
 8004a6a:	d508      	bpl.n	8004a7e <_printf_i+0x166>
 8004a6c:	6923      	ldr	r3, [r4, #16]
 8004a6e:	6862      	ldr	r2, [r4, #4]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	bfde      	ittt	le
 8004a74:	2330      	movle	r3, #48	; 0x30
 8004a76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a7e:	1b49      	subs	r1, r1, r5
 8004a80:	6121      	str	r1, [r4, #16]
 8004a82:	e02e      	b.n	8004ae2 <_printf_i+0x1ca>
 8004a84:	6825      	ldr	r5, [r4, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	6960      	ldr	r0, [r4, #20]
 8004a8a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8004a8e:	d003      	beq.n	8004a98 <_printf_i+0x180>
 8004a90:	1d15      	adds	r5, r2, #4
 8004a92:	601d      	str	r5, [r3, #0]
 8004a94:	6813      	ldr	r3, [r2, #0]
 8004a96:	e008      	b.n	8004aaa <_printf_i+0x192>
 8004a98:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a9c:	f102 0504 	add.w	r5, r2, #4
 8004aa0:	601d      	str	r5, [r3, #0]
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	d001      	beq.n	8004aaa <_printf_i+0x192>
 8004aa6:	8018      	strh	r0, [r3, #0]
 8004aa8:	e000      	b.n	8004aac <_printf_i+0x194>
 8004aaa:	6018      	str	r0, [r3, #0]
 8004aac:	2300      	movs	r3, #0
 8004aae:	6123      	str	r3, [r4, #16]
 8004ab0:	460d      	mov	r5, r1
 8004ab2:	e016      	b.n	8004ae2 <_printf_i+0x1ca>
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	1d11      	adds	r1, r2, #4
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	6815      	ldr	r5, [r2, #0]
 8004abc:	6862      	ldr	r2, [r4, #4]
 8004abe:	4628      	mov	r0, r5
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	f000 ffcd 	bl	8005a60 <memchr>
 8004ac6:	b108      	cbz	r0, 8004acc <_printf_i+0x1b4>
 8004ac8:	1b40      	subs	r0, r0, r5
 8004aca:	6060      	str	r0, [r4, #4]
 8004acc:	6863      	ldr	r3, [r4, #4]
 8004ace:	e004      	b.n	8004ada <_printf_i+0x1c2>
 8004ad0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ad4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8004ad8:	2301      	movs	r3, #1
 8004ada:	6123      	str	r3, [r4, #16]
 8004adc:	2300      	movs	r3, #0
 8004ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ae2:	f8cd 8000 	str.w	r8, [sp]
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	4621      	mov	r1, r4
 8004aea:	aa03      	add	r2, sp, #12
 8004aec:	463b      	mov	r3, r7
 8004aee:	f7ff fe9d 	bl	800482c <_printf_common>
 8004af2:	3001      	adds	r0, #1
 8004af4:	d102      	bne.n	8004afc <_printf_i+0x1e4>
 8004af6:	f04f 30ff 	mov.w	r0, #4294967295
 8004afa:	e01f      	b.n	8004b3c <_printf_i+0x224>
 8004afc:	4630      	mov	r0, r6
 8004afe:	4639      	mov	r1, r7
 8004b00:	462a      	mov	r2, r5
 8004b02:	6923      	ldr	r3, [r4, #16]
 8004b04:	47c0      	blx	r8
 8004b06:	3001      	adds	r0, #1
 8004b08:	d0f5      	beq.n	8004af6 <_printf_i+0x1de>
 8004b0a:	6823      	ldr	r3, [r4, #0]
 8004b0c:	079b      	lsls	r3, r3, #30
 8004b0e:	d405      	bmi.n	8004b1c <_printf_i+0x204>
 8004b10:	68e0      	ldr	r0, [r4, #12]
 8004b12:	9b03      	ldr	r3, [sp, #12]
 8004b14:	4298      	cmp	r0, r3
 8004b16:	bfb8      	it	lt
 8004b18:	4618      	movlt	r0, r3
 8004b1a:	e00f      	b.n	8004b3c <_printf_i+0x224>
 8004b1c:	2500      	movs	r5, #0
 8004b1e:	68e3      	ldr	r3, [r4, #12]
 8004b20:	9a03      	ldr	r2, [sp, #12]
 8004b22:	1a9b      	subs	r3, r3, r2
 8004b24:	429d      	cmp	r5, r3
 8004b26:	daf3      	bge.n	8004b10 <_printf_i+0x1f8>
 8004b28:	4630      	mov	r0, r6
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	f104 0219 	add.w	r2, r4, #25
 8004b30:	2301      	movs	r3, #1
 8004b32:	47c0      	blx	r8
 8004b34:	3001      	adds	r0, #1
 8004b36:	d0de      	beq.n	8004af6 <_printf_i+0x1de>
 8004b38:	3501      	adds	r5, #1
 8004b3a:	e7f0      	b.n	8004b1e <_printf_i+0x206>
 8004b3c:	b004      	add	sp, #16
 8004b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b42:	bf00      	nop
 8004b44:	08006baa 	.word	0x08006baa
 8004b48:	08006bbb 	.word	0x08006bbb

08004b4c <iprintf>:
 8004b4c:	b40f      	push	{r0, r1, r2, r3}
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <iprintf+0x2c>)
 8004b50:	b513      	push	{r0, r1, r4, lr}
 8004b52:	681c      	ldr	r4, [r3, #0]
 8004b54:	b124      	cbz	r4, 8004b60 <iprintf+0x14>
 8004b56:	69a3      	ldr	r3, [r4, #24]
 8004b58:	b913      	cbnz	r3, 8004b60 <iprintf+0x14>
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	f000 feec 	bl	8005938 <__sinit>
 8004b60:	ab05      	add	r3, sp, #20
 8004b62:	4620      	mov	r0, r4
 8004b64:	68a1      	ldr	r1, [r4, #8]
 8004b66:	9a04      	ldr	r2, [sp, #16]
 8004b68:	9301      	str	r3, [sp, #4]
 8004b6a:	f001 fb37 	bl	80061dc <_vfiprintf_r>
 8004b6e:	b002      	add	sp, #8
 8004b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b74:	b004      	add	sp, #16
 8004b76:	4770      	bx	lr
 8004b78:	1ffe886c 	.word	0x1ffe886c

08004b7c <__fpclassifyd>:
 8004b7c:	460a      	mov	r2, r1
 8004b7e:	f031 4100 	bics.w	r1, r1, #2147483648	; 0x80000000
 8004b82:	b510      	push	{r4, lr}
 8004b84:	4603      	mov	r3, r0
 8004b86:	d01b      	beq.n	8004bc0 <__fpclassifyd+0x44>
 8004b88:	480f      	ldr	r0, [pc, #60]	; (8004bc8 <__fpclassifyd+0x4c>)
 8004b8a:	f5a2 1480 	sub.w	r4, r2, #1048576	; 0x100000
 8004b8e:	4284      	cmp	r4, r0
 8004b90:	d910      	bls.n	8004bb4 <__fpclassifyd+0x38>
 8004b92:	f102 42ff 	add.w	r2, r2, #2139095040	; 0x7f800000
 8004b96:	480c      	ldr	r0, [pc, #48]	; (8004bc8 <__fpclassifyd+0x4c>)
 8004b98:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8004b9c:	4282      	cmp	r2, r0
 8004b9e:	d909      	bls.n	8004bb4 <__fpclassifyd+0x38>
 8004ba0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004ba4:	d308      	bcc.n	8004bb8 <__fpclassifyd+0x3c>
 8004ba6:	4a09      	ldr	r2, [pc, #36]	; (8004bcc <__fpclassifyd+0x50>)
 8004ba8:	4291      	cmp	r1, r2
 8004baa:	d107      	bne.n	8004bbc <__fpclassifyd+0x40>
 8004bac:	fab3 f083 	clz	r0, r3
 8004bb0:	0940      	lsrs	r0, r0, #5
 8004bb2:	bd10      	pop	{r4, pc}
 8004bb4:	2004      	movs	r0, #4
 8004bb6:	bd10      	pop	{r4, pc}
 8004bb8:	2003      	movs	r0, #3
 8004bba:	bd10      	pop	{r4, pc}
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	bd10      	pop	{r4, pc}
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d1e6      	bne.n	8004b92 <__fpclassifyd+0x16>
 8004bc4:	2002      	movs	r0, #2
 8004bc6:	bd10      	pop	{r4, pc}
 8004bc8:	7fdfffff 	.word	0x7fdfffff
 8004bcc:	7ff00000 	.word	0x7ff00000

08004bd0 <strlen>:
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	d1fb      	bne.n	8004bd2 <strlen+0x2>
 8004bda:	1a18      	subs	r0, r3, r0
 8004bdc:	3801      	subs	r0, #1
 8004bde:	4770      	bx	lr

08004be0 <strncmp>:
 8004be0:	b570      	push	{r4, r5, r6, lr}
 8004be2:	b1aa      	cbz	r2, 8004c10 <strncmp+0x30>
 8004be4:	1e45      	subs	r5, r0, #1
 8004be6:	3901      	subs	r1, #1
 8004be8:	786b      	ldrb	r3, [r5, #1]
 8004bea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004bee:	42a3      	cmp	r3, r4
 8004bf0:	f105 0601 	add.w	r6, r5, #1
 8004bf4:	d106      	bne.n	8004c04 <strncmp+0x24>
 8004bf6:	f06f 0401 	mvn.w	r4, #1
 8004bfa:	1b64      	subs	r4, r4, r5
 8004bfc:	4414      	add	r4, r2
 8004bfe:	42e0      	cmn	r0, r4
 8004c00:	d102      	bne.n	8004c08 <strncmp+0x28>
 8004c02:	461c      	mov	r4, r3
 8004c04:	1b18      	subs	r0, r3, r4
 8004c06:	bd70      	pop	{r4, r5, r6, pc}
 8004c08:	4635      	mov	r5, r6
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1ec      	bne.n	8004be8 <strncmp+0x8>
 8004c0e:	e7f8      	b.n	8004c02 <strncmp+0x22>
 8004c10:	4610      	mov	r0, r2
 8004c12:	bd70      	pop	{r4, r5, r6, pc}

08004c14 <quorem>:
 8004c14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c18:	6903      	ldr	r3, [r0, #16]
 8004c1a:	690c      	ldr	r4, [r1, #16]
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	4680      	mov	r8, r0
 8004c20:	f2c0 8081 	blt.w	8004d26 <quorem+0x112>
 8004c24:	3c01      	subs	r4, #1
 8004c26:	f101 0714 	add.w	r7, r1, #20
 8004c2a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004c2e:	f100 0614 	add.w	r6, r0, #20
 8004c32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004c36:	eb06 030e 	add.w	r3, r6, lr
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 8004c42:	fbb3 f5f5 	udiv	r5, r3, r5
 8004c46:	eb07 090e 	add.w	r9, r7, lr
 8004c4a:	b3c5      	cbz	r5, 8004cbe <quorem+0xaa>
 8004c4c:	f04f 0a00 	mov.w	sl, #0
 8004c50:	4638      	mov	r0, r7
 8004c52:	46b4      	mov	ip, r6
 8004c54:	46d3      	mov	fp, sl
 8004c56:	f850 3b04 	ldr.w	r3, [r0], #4
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	fb02 a205 	mla	r2, r2, r5, sl
 8004c62:	436b      	muls	r3, r5
 8004c64:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8004c68:	b292      	uxth	r2, r2
 8004c6a:	ebc2 020b 	rsb	r2, r2, fp
 8004c6e:	f8bc b000 	ldrh.w	fp, [ip]
 8004c72:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004c76:	fa12 f28b 	uxtah	r2, r2, fp
 8004c7a:	fa1f fb83 	uxth.w	fp, r3
 8004c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8004c82:	ebcb 4313 	rsb	r3, fp, r3, lsr #16
 8004c86:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c90:	4548      	cmp	r0, r9
 8004c92:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004c96:	f84c 2b04 	str.w	r2, [ip], #4
 8004c9a:	d9dc      	bls.n	8004c56 <quorem+0x42>
 8004c9c:	f856 300e 	ldr.w	r3, [r6, lr]
 8004ca0:	b96b      	cbnz	r3, 8004cbe <quorem+0xaa>
 8004ca2:	9b01      	ldr	r3, [sp, #4]
 8004ca4:	3b04      	subs	r3, #4
 8004ca6:	42b3      	cmp	r3, r6
 8004ca8:	461a      	mov	r2, r3
 8004caa:	d802      	bhi.n	8004cb2 <quorem+0x9e>
 8004cac:	f8c8 4010 	str.w	r4, [r8, #16]
 8004cb0:	e005      	b.n	8004cbe <quorem+0xaa>
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	3b04      	subs	r3, #4
 8004cb6:	2a00      	cmp	r2, #0
 8004cb8:	d1f8      	bne.n	8004cac <quorem+0x98>
 8004cba:	3c01      	subs	r4, #1
 8004cbc:	e7f3      	b.n	8004ca6 <quorem+0x92>
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	f001 f8ef 	bl	8005ea2 <__mcmp>
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	db2c      	blt.n	8004d22 <quorem+0x10e>
 8004cc8:	3501      	adds	r5, #1
 8004cca:	4630      	mov	r0, r6
 8004ccc:	f04f 0e00 	mov.w	lr, #0
 8004cd0:	f857 1b04 	ldr.w	r1, [r7], #4
 8004cd4:	f8d0 c000 	ldr.w	ip, [r0]
 8004cd8:	b28a      	uxth	r2, r1
 8004cda:	ebc2 030e 	rsb	r3, r2, lr
 8004cde:	0c09      	lsrs	r1, r1, #16
 8004ce0:	fa13 f38c 	uxtah	r3, r3, ip
 8004ce4:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8004ce8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cf2:	454f      	cmp	r7, r9
 8004cf4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004cf8:	f840 3b04 	str.w	r3, [r0], #4
 8004cfc:	d9e8      	bls.n	8004cd0 <quorem+0xbc>
 8004cfe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004d02:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004d06:	b962      	cbnz	r2, 8004d22 <quorem+0x10e>
 8004d08:	3b04      	subs	r3, #4
 8004d0a:	42b3      	cmp	r3, r6
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	d802      	bhi.n	8004d16 <quorem+0x102>
 8004d10:	f8c8 4010 	str.w	r4, [r8, #16]
 8004d14:	e005      	b.n	8004d22 <quorem+0x10e>
 8004d16:	6812      	ldr	r2, [r2, #0]
 8004d18:	3b04      	subs	r3, #4
 8004d1a:	2a00      	cmp	r2, #0
 8004d1c:	d1f8      	bne.n	8004d10 <quorem+0xfc>
 8004d1e:	3c01      	subs	r4, #1
 8004d20:	e7f3      	b.n	8004d0a <quorem+0xf6>
 8004d22:	4628      	mov	r0, r5
 8004d24:	e000      	b.n	8004d28 <quorem+0x114>
 8004d26:	2000      	movs	r0, #0
 8004d28:	b003      	add	sp, #12
 8004d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004d30 <_dtoa_r>:
 8004d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d34:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004d36:	b097      	sub	sp, #92	; 0x5c
 8004d38:	4682      	mov	sl, r0
 8004d3a:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8004d3c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d40:	b945      	cbnz	r5, 8004d54 <_dtoa_r+0x24>
 8004d42:	2010      	movs	r0, #16
 8004d44:	f000 fe84 	bl	8005a50 <malloc>
 8004d48:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8004d4c:	6045      	str	r5, [r0, #4]
 8004d4e:	6085      	str	r5, [r0, #8]
 8004d50:	6005      	str	r5, [r0, #0]
 8004d52:	60c5      	str	r5, [r0, #12]
 8004d54:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d58:	6819      	ldr	r1, [r3, #0]
 8004d5a:	b159      	cbz	r1, 8004d74 <_dtoa_r+0x44>
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	604a      	str	r2, [r1, #4]
 8004d60:	2301      	movs	r3, #1
 8004d62:	4093      	lsls	r3, r2
 8004d64:	608b      	str	r3, [r1, #8]
 8004d66:	4650      	mov	r0, sl
 8004d68:	f000 febe 	bl	8005ae8 <_Bfree>
 8004d6c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	9b03      	ldr	r3, [sp, #12]
 8004d76:	4aa2      	ldr	r2, [pc, #648]	; (8005000 <_dtoa_r+0x2d0>)
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bfbf      	itttt	lt
 8004d7c:	2301      	movlt	r3, #1
 8004d7e:	6023      	strlt	r3, [r4, #0]
 8004d80:	9b03      	ldrlt	r3, [sp, #12]
 8004d82:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004d86:	bfb8      	it	lt
 8004d88:	9303      	strlt	r3, [sp, #12]
 8004d8a:	9f03      	ldr	r7, [sp, #12]
 8004d8c:	bfa4      	itt	ge
 8004d8e:	2300      	movge	r3, #0
 8004d90:	6023      	strge	r3, [r4, #0]
 8004d92:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8004d96:	0d1b      	lsrs	r3, r3, #20
 8004d98:	051b      	lsls	r3, r3, #20
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d11d      	bne.n	8004dda <_dtoa_r+0xaa>
 8004d9e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004da0:	f242 730f 	movw	r3, #9999	; 0x270f
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	9b02      	ldr	r3, [sp, #8]
 8004da8:	b943      	cbnz	r3, 8004dbc <_dtoa_r+0x8c>
 8004daa:	4a96      	ldr	r2, [pc, #600]	; (8005004 <_dtoa_r+0x2d4>)
 8004dac:	4b96      	ldr	r3, [pc, #600]	; (8005008 <_dtoa_r+0x2d8>)
 8004dae:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8004db2:	2800      	cmp	r0, #0
 8004db4:	bf14      	ite	ne
 8004db6:	4618      	movne	r0, r3
 8004db8:	4610      	moveq	r0, r2
 8004dba:	e000      	b.n	8004dbe <_dtoa_r+0x8e>
 8004dbc:	4892      	ldr	r0, [pc, #584]	; (8005008 <_dtoa_r+0x2d8>)
 8004dbe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8573 	beq.w	80058ac <_dtoa_r+0xb7c>
 8004dc6:	78c3      	ldrb	r3, [r0, #3]
 8004dc8:	b113      	cbz	r3, 8004dd0 <_dtoa_r+0xa0>
 8004dca:	f100 0308 	add.w	r3, r0, #8
 8004dce:	e000      	b.n	8004dd2 <_dtoa_r+0xa2>
 8004dd0:	1cc3      	adds	r3, r0, #3
 8004dd2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004dd4:	6013      	str	r3, [r2, #0]
 8004dd6:	f000 bd69 	b.w	80058ac <_dtoa_r+0xb7c>
 8004dda:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8004dde:	2200      	movs	r2, #0
 8004de0:	4620      	mov	r0, r4
 8004de2:	4629      	mov	r1, r5
 8004de4:	2300      	movs	r3, #0
 8004de6:	f7ff f963 	bl	80040b0 <__aeabi_dcmpeq>
 8004dea:	4680      	mov	r8, r0
 8004dec:	b158      	cbz	r0, 8004e06 <_dtoa_r+0xd6>
 8004dee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004df0:	2301      	movs	r3, #1
 8004df2:	6013      	str	r3, [r2, #0]
 8004df4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 8546 	beq.w	8005888 <_dtoa_r+0xb58>
 8004dfc:	4883      	ldr	r0, [pc, #524]	; (800500c <_dtoa_r+0x2dc>)
 8004dfe:	6018      	str	r0, [r3, #0]
 8004e00:	3801      	subs	r0, #1
 8004e02:	f000 bd53 	b.w	80058ac <_dtoa_r+0xb7c>
 8004e06:	ab15      	add	r3, sp, #84	; 0x54
 8004e08:	9300      	str	r3, [sp, #0]
 8004e0a:	ab14      	add	r3, sp, #80	; 0x50
 8004e0c:	9301      	str	r3, [sp, #4]
 8004e0e:	4650      	mov	r0, sl
 8004e10:	4622      	mov	r2, r4
 8004e12:	462b      	mov	r3, r5
 8004e14:	f001 f8c0 	bl	8005f98 <__d2b>
 8004e18:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004e1c:	9007      	str	r0, [sp, #28]
 8004e1e:	b15e      	cbz	r6, 8004e38 <_dtoa_r+0x108>
 8004e20:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004e24:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004e2e:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8004e32:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004e36:	e01d      	b.n	8004e74 <_dtoa_r+0x144>
 8004e38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004e3a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004e3c:	441e      	add	r6, r3
 8004e3e:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8004e42:	429e      	cmp	r6, r3
 8004e44:	bfad      	iteet	ge
 8004e46:	9a02      	ldrge	r2, [sp, #8]
 8004e48:	4b71      	ldrlt	r3, [pc, #452]	; (8005010 <_dtoa_r+0x2e0>)
 8004e4a:	9a02      	ldrlt	r2, [sp, #8]
 8004e4c:	f206 4312 	addwge	r3, r6, #1042	; 0x412
 8004e50:	bfa3      	ittte	ge
 8004e52:	fa22 f003 	lsrge.w	r0, r2, r3
 8004e56:	4b6f      	ldrge	r3, [pc, #444]	; (8005014 <_dtoa_r+0x2e4>)
 8004e58:	1b9b      	subge	r3, r3, r6
 8004e5a:	1b9b      	sublt	r3, r3, r6
 8004e5c:	bfaa      	itet	ge
 8004e5e:	409f      	lslge	r7, r3
 8004e60:	fa02 f003 	lsllt.w	r0, r2, r3
 8004e64:	4338      	orrge	r0, r7
 8004e66:	f7fe fe45 	bl	8003af4 <__aeabi_ui2d>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004e70:	3e01      	subs	r6, #1
 8004e72:	9313      	str	r3, [sp, #76]	; 0x4c
 8004e74:	2200      	movs	r2, #0
 8004e76:	4b68      	ldr	r3, [pc, #416]	; (8005018 <_dtoa_r+0x2e8>)
 8004e78:	f7fe fcfe 	bl	8003878 <__aeabi_dsub>
 8004e7c:	a35a      	add	r3, pc, #360	; (adr r3, 8004fe8 <_dtoa_r+0x2b8>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fe fead 	bl	8003be0 <__aeabi_dmul>
 8004e86:	a35a      	add	r3, pc, #360	; (adr r3, 8004ff0 <_dtoa_r+0x2c0>)
 8004e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8c:	f7fe fcf6 	bl	800387c <__adddf3>
 8004e90:	4604      	mov	r4, r0
 8004e92:	4630      	mov	r0, r6
 8004e94:	460d      	mov	r5, r1
 8004e96:	f7fe fe3d 	bl	8003b14 <__aeabi_i2d>
 8004e9a:	a357      	add	r3, pc, #348	; (adr r3, 8004ff8 <_dtoa_r+0x2c8>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fe fe9e 	bl	8003be0 <__aeabi_dmul>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	4629      	mov	r1, r5
 8004eac:	f7fe fce6 	bl	800387c <__adddf3>
 8004eb0:	4604      	mov	r4, r0
 8004eb2:	460d      	mov	r5, r1
 8004eb4:	f7ff f92e 	bl	8004114 <__aeabi_d2iz>
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4683      	mov	fp, r0
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	4620      	mov	r0, r4
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	f7ff f8ff 	bl	80040c4 <__aeabi_dcmplt>
 8004ec6:	b158      	cbz	r0, 8004ee0 <_dtoa_r+0x1b0>
 8004ec8:	4658      	mov	r0, fp
 8004eca:	f7fe fe23 	bl	8003b14 <__aeabi_i2d>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7ff f8eb 	bl	80040b0 <__aeabi_dcmpeq>
 8004eda:	b908      	cbnz	r0, 8004ee0 <_dtoa_r+0x1b0>
 8004edc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ee0:	f1bb 0f16 	cmp.w	fp, #22
 8004ee4:	d80d      	bhi.n	8004f02 <_dtoa_r+0x1d2>
 8004ee6:	4b4d      	ldr	r3, [pc, #308]	; (800501c <_dtoa_r+0x2ec>)
 8004ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004eec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004ef0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004ef4:	f7ff f904 	bl	8004100 <__aeabi_dcmpgt>
 8004ef8:	b130      	cbz	r0, 8004f08 <_dtoa_r+0x1d8>
 8004efa:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004efe:	2300      	movs	r3, #0
 8004f00:	e000      	b.n	8004f04 <_dtoa_r+0x1d4>
 8004f02:	2301      	movs	r3, #1
 8004f04:	9312      	str	r3, [sp, #72]	; 0x48
 8004f06:	e000      	b.n	8004f0a <_dtoa_r+0x1da>
 8004f08:	9012      	str	r0, [sp, #72]	; 0x48
 8004f0a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004f0c:	1b9e      	subs	r6, r3, r6
 8004f0e:	1e73      	subs	r3, r6, #1
 8004f10:	930a      	str	r3, [sp, #40]	; 0x28
 8004f12:	bf45      	ittet	mi
 8004f14:	425b      	negmi	r3, r3
 8004f16:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f18:	2300      	movpl	r3, #0
 8004f1a:	2300      	movmi	r3, #0
 8004f1c:	bf4c      	ite	mi
 8004f1e:	930a      	strmi	r3, [sp, #40]	; 0x28
 8004f20:	9309      	strpl	r3, [sp, #36]	; 0x24
 8004f22:	f1bb 0f00 	cmp.w	fp, #0
 8004f26:	db07      	blt.n	8004f38 <_dtoa_r+0x208>
 8004f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2a:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8004f2e:	445b      	add	r3, fp
 8004f30:	930a      	str	r3, [sp, #40]	; 0x28
 8004f32:	2300      	movs	r3, #0
 8004f34:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f36:	e008      	b.n	8004f4a <_dtoa_r+0x21a>
 8004f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f3a:	ebcb 0303 	rsb	r3, fp, r3
 8004f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f40:	f1cb 0300 	rsb	r3, fp, #0
 8004f44:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f46:	2300      	movs	r3, #0
 8004f48:	930d      	str	r3, [sp, #52]	; 0x34
 8004f4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f4c:	2b09      	cmp	r3, #9
 8004f4e:	d828      	bhi.n	8004fa2 <_dtoa_r+0x272>
 8004f50:	2b05      	cmp	r3, #5
 8004f52:	bfc4      	itt	gt
 8004f54:	3b04      	subgt	r3, #4
 8004f56:	9320      	strgt	r3, [sp, #128]	; 0x80
 8004f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f5a:	f1a3 0302 	sub.w	r3, r3, #2
 8004f5e:	bfcc      	ite	gt
 8004f60:	2500      	movgt	r5, #0
 8004f62:	2501      	movle	r5, #1
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d821      	bhi.n	8004fac <_dtoa_r+0x27c>
 8004f68:	e8df f003 	tbb	[pc, r3]
 8004f6c:	10040e02 	.word	0x10040e02
 8004f70:	2300      	movs	r3, #0
 8004f72:	e000      	b.n	8004f76 <_dtoa_r+0x246>
 8004f74:	2301      	movs	r3, #1
 8004f76:	930c      	str	r3, [sp, #48]	; 0x30
 8004f78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	dc20      	bgt.n	8004fc0 <_dtoa_r+0x290>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	9306      	str	r3, [sp, #24]
 8004f82:	9305      	str	r3, [sp, #20]
 8004f84:	461a      	mov	r2, r3
 8004f86:	e019      	b.n	8004fbc <_dtoa_r+0x28c>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	e000      	b.n	8004f8e <_dtoa_r+0x25e>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8004f90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f92:	445b      	add	r3, fp
 8004f94:	9306      	str	r3, [sp, #24]
 8004f96:	3301      	adds	r3, #1
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	9305      	str	r3, [sp, #20]
 8004f9c:	bfb8      	it	lt
 8004f9e:	2301      	movlt	r3, #1
 8004fa0:	e011      	b.n	8004fc6 <_dtoa_r+0x296>
 8004fa2:	2501      	movs	r5, #1
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9320      	str	r3, [sp, #128]	; 0x80
 8004fa8:	950c      	str	r5, [sp, #48]	; 0x30
 8004faa:	e001      	b.n	8004fb0 <_dtoa_r+0x280>
 8004fac:	2301      	movs	r3, #1
 8004fae:	930c      	str	r3, [sp, #48]	; 0x30
 8004fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fb4:	9306      	str	r3, [sp, #24]
 8004fb6:	9305      	str	r3, [sp, #20]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	2312      	movs	r3, #18
 8004fbc:	9221      	str	r2, [sp, #132]	; 0x84
 8004fbe:	e002      	b.n	8004fc6 <_dtoa_r+0x296>
 8004fc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fc2:	9306      	str	r3, [sp, #24]
 8004fc4:	9305      	str	r3, [sp, #20]
 8004fc6:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004fca:	2200      	movs	r2, #0
 8004fcc:	6062      	str	r2, [r4, #4]
 8004fce:	2104      	movs	r1, #4
 8004fd0:	f101 0214 	add.w	r2, r1, #20
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d823      	bhi.n	8005020 <_dtoa_r+0x2f0>
 8004fd8:	6862      	ldr	r2, [r4, #4]
 8004fda:	3201      	adds	r2, #1
 8004fdc:	6062      	str	r2, [r4, #4]
 8004fde:	0049      	lsls	r1, r1, #1
 8004fe0:	e7f6      	b.n	8004fd0 <_dtoa_r+0x2a0>
 8004fe2:	bf00      	nop
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	636f4361 	.word	0x636f4361
 8004fec:	3fd287a7 	.word	0x3fd287a7
 8004ff0:	8b60c8b3 	.word	0x8b60c8b3
 8004ff4:	3fc68a28 	.word	0x3fc68a28
 8004ff8:	509f79fb 	.word	0x509f79fb
 8004ffc:	3fd34413 	.word	0x3fd34413
 8005000:	7ff00000 	.word	0x7ff00000
 8005004:	08006bcc 	.word	0x08006bcc
 8005008:	08006bd5 	.word	0x08006bd5
 800500c:	08006ba9 	.word	0x08006ba9
 8005010:	fffffbee 	.word	0xfffffbee
 8005014:	fffffc0e 	.word	0xfffffc0e
 8005018:	3ff80000 	.word	0x3ff80000
 800501c:	08006c48 	.word	0x08006c48
 8005020:	4650      	mov	r0, sl
 8005022:	6861      	ldr	r1, [r4, #4]
 8005024:	f000 fd2b 	bl	8005a7e <_Balloc>
 8005028:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800502c:	6020      	str	r0, [r4, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	9308      	str	r3, [sp, #32]
 8005032:	9b05      	ldr	r3, [sp, #20]
 8005034:	2b0e      	cmp	r3, #14
 8005036:	f200 814b 	bhi.w	80052d0 <_dtoa_r+0x5a0>
 800503a:	2d00      	cmp	r5, #0
 800503c:	f000 8148 	beq.w	80052d0 <_dtoa_r+0x5a0>
 8005040:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005044:	f1bb 0f00 	cmp.w	fp, #0
 8005048:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800504c:	dd31      	ble.n	80050b2 <_dtoa_r+0x382>
 800504e:	4ab3      	ldr	r2, [pc, #716]	; (800531c <_dtoa_r+0x5ec>)
 8005050:	f00b 030f 	and.w	r3, fp, #15
 8005054:	ea4f 172b 	mov.w	r7, fp, asr #4
 8005058:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800505c:	06f8      	lsls	r0, r7, #27
 800505e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005062:	d50c      	bpl.n	800507e <_dtoa_r+0x34e>
 8005064:	4bae      	ldr	r3, [pc, #696]	; (8005320 <_dtoa_r+0x5f0>)
 8005066:	ec51 0b17 	vmov	r0, r1, d7
 800506a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800506e:	f7fe fee1 	bl	8003e34 <__aeabi_ddiv>
 8005072:	f007 070f 	and.w	r7, r7, #15
 8005076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800507a:	2603      	movs	r6, #3
 800507c:	e000      	b.n	8005080 <_dtoa_r+0x350>
 800507e:	2602      	movs	r6, #2
 8005080:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8005320 <_dtoa_r+0x5f0>
 8005084:	b177      	cbz	r7, 80050a4 <_dtoa_r+0x374>
 8005086:	07f9      	lsls	r1, r7, #31
 8005088:	d508      	bpl.n	800509c <_dtoa_r+0x36c>
 800508a:	4620      	mov	r0, r4
 800508c:	4629      	mov	r1, r5
 800508e:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005092:	f7fe fda5 	bl	8003be0 <__aeabi_dmul>
 8005096:	3601      	adds	r6, #1
 8005098:	4604      	mov	r4, r0
 800509a:	460d      	mov	r5, r1
 800509c:	107f      	asrs	r7, r7, #1
 800509e:	f108 0808 	add.w	r8, r8, #8
 80050a2:	e7ef      	b.n	8005084 <_dtoa_r+0x354>
 80050a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050a8:	4622      	mov	r2, r4
 80050aa:	462b      	mov	r3, r5
 80050ac:	f7fe fec2 	bl	8003e34 <__aeabi_ddiv>
 80050b0:	e01b      	b.n	80050ea <_dtoa_r+0x3ba>
 80050b2:	f1cb 0400 	rsb	r4, fp, #0
 80050b6:	b1dc      	cbz	r4, 80050f0 <_dtoa_r+0x3c0>
 80050b8:	4b98      	ldr	r3, [pc, #608]	; (800531c <_dtoa_r+0x5ec>)
 80050ba:	4d99      	ldr	r5, [pc, #612]	; (8005320 <_dtoa_r+0x5f0>)
 80050bc:	f004 020f 	and.w	r2, r4, #15
 80050c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80050c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fe fd88 	bl	8003be0 <__aeabi_dmul>
 80050d0:	1124      	asrs	r4, r4, #4
 80050d2:	2602      	movs	r6, #2
 80050d4:	b14c      	cbz	r4, 80050ea <_dtoa_r+0x3ba>
 80050d6:	07e2      	lsls	r2, r4, #31
 80050d8:	d504      	bpl.n	80050e4 <_dtoa_r+0x3b4>
 80050da:	e9d5 2300 	ldrd	r2, r3, [r5]
 80050de:	3601      	adds	r6, #1
 80050e0:	f7fe fd7e 	bl	8003be0 <__aeabi_dmul>
 80050e4:	1064      	asrs	r4, r4, #1
 80050e6:	3508      	adds	r5, #8
 80050e8:	e7f4      	b.n	80050d4 <_dtoa_r+0x3a4>
 80050ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80050ee:	e000      	b.n	80050f2 <_dtoa_r+0x3c2>
 80050f0:	2602      	movs	r6, #2
 80050f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050f4:	b1db      	cbz	r3, 800512e <_dtoa_r+0x3fe>
 80050f6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	4620      	mov	r0, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	4b88      	ldr	r3, [pc, #544]	; (8005324 <_dtoa_r+0x5f4>)
 8005102:	f7fe ffdf 	bl	80040c4 <__aeabi_dcmplt>
 8005106:	b190      	cbz	r0, 800512e <_dtoa_r+0x3fe>
 8005108:	9b05      	ldr	r3, [sp, #20]
 800510a:	b183      	cbz	r3, 800512e <_dtoa_r+0x3fe>
 800510c:	9b06      	ldr	r3, [sp, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	f340 80da 	ble.w	80052c8 <_dtoa_r+0x598>
 8005114:	4629      	mov	r1, r5
 8005116:	4620      	mov	r0, r4
 8005118:	2200      	movs	r2, #0
 800511a:	4b83      	ldr	r3, [pc, #524]	; (8005328 <_dtoa_r+0x5f8>)
 800511c:	f7fe fd60 	bl	8003be0 <__aeabi_dmul>
 8005120:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005128:	3601      	adds	r6, #1
 800512a:	9d06      	ldr	r5, [sp, #24]
 800512c:	e001      	b.n	8005132 <_dtoa_r+0x402>
 800512e:	9d05      	ldr	r5, [sp, #20]
 8005130:	465f      	mov	r7, fp
 8005132:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005136:	4630      	mov	r0, r6
 8005138:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800513c:	f7fe fcea 	bl	8003b14 <__aeabi_i2d>
 8005140:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005144:	f7fe fd4c 	bl	8003be0 <__aeabi_dmul>
 8005148:	2200      	movs	r2, #0
 800514a:	4b78      	ldr	r3, [pc, #480]	; (800532c <_dtoa_r+0x5fc>)
 800514c:	f7fe fb96 	bl	800387c <__adddf3>
 8005150:	4680      	mov	r8, r0
 8005152:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005156:	b9cd      	cbnz	r5, 800518c <_dtoa_r+0x45c>
 8005158:	2200      	movs	r2, #0
 800515a:	4b75      	ldr	r3, [pc, #468]	; (8005330 <_dtoa_r+0x600>)
 800515c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005160:	f7fe fb8a 	bl	8003878 <__aeabi_dsub>
 8005164:	4642      	mov	r2, r8
 8005166:	464b      	mov	r3, r9
 8005168:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800516c:	f7fe ffc8 	bl	8004100 <__aeabi_dcmpgt>
 8005170:	2800      	cmp	r0, #0
 8005172:	f040 8246 	bne.w	8005602 <_dtoa_r+0x8d2>
 8005176:	4642      	mov	r2, r8
 8005178:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800517c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005180:	f7fe ffa0 	bl	80040c4 <__aeabi_dcmplt>
 8005184:	2800      	cmp	r0, #0
 8005186:	f040 8236 	bne.w	80055f6 <_dtoa_r+0x8c6>
 800518a:	e09d      	b.n	80052c8 <_dtoa_r+0x598>
 800518c:	4b63      	ldr	r3, [pc, #396]	; (800531c <_dtoa_r+0x5ec>)
 800518e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005190:	1e6a      	subs	r2, r5, #1
 8005192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005196:	2900      	cmp	r1, #0
 8005198:	d049      	beq.n	800522e <_dtoa_r+0x4fe>
 800519a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519e:	2000      	movs	r0, #0
 80051a0:	4964      	ldr	r1, [pc, #400]	; (8005334 <_dtoa_r+0x604>)
 80051a2:	f7fe fe47 	bl	8003e34 <__aeabi_ddiv>
 80051a6:	4642      	mov	r2, r8
 80051a8:	464b      	mov	r3, r9
 80051aa:	f7fe fb65 	bl	8003878 <__aeabi_dsub>
 80051ae:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 80051b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051b6:	9c08      	ldr	r4, [sp, #32]
 80051b8:	4649      	mov	r1, r9
 80051ba:	4640      	mov	r0, r8
 80051bc:	f7fe ffaa 	bl	8004114 <__aeabi_d2iz>
 80051c0:	4606      	mov	r6, r0
 80051c2:	f7fe fca7 	bl	8003b14 <__aeabi_i2d>
 80051c6:	4602      	mov	r2, r0
 80051c8:	460b      	mov	r3, r1
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	f7fe fb53 	bl	8003878 <__aeabi_dsub>
 80051d2:	3630      	adds	r6, #48	; 0x30
 80051d4:	f804 6b01 	strb.w	r6, [r4], #1
 80051d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051dc:	4680      	mov	r8, r0
 80051de:	4689      	mov	r9, r1
 80051e0:	f7fe ff70 	bl	80040c4 <__aeabi_dcmplt>
 80051e4:	2800      	cmp	r0, #0
 80051e6:	f040 8340 	bne.w	800586a <_dtoa_r+0xb3a>
 80051ea:	4642      	mov	r2, r8
 80051ec:	464b      	mov	r3, r9
 80051ee:	2000      	movs	r0, #0
 80051f0:	494c      	ldr	r1, [pc, #304]	; (8005324 <_dtoa_r+0x5f4>)
 80051f2:	f7fe fb41 	bl	8003878 <__aeabi_dsub>
 80051f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80051fa:	f7fe ff63 	bl	80040c4 <__aeabi_dcmplt>
 80051fe:	2800      	cmp	r0, #0
 8005200:	f040 80d3 	bne.w	80053aa <_dtoa_r+0x67a>
 8005204:	9b08      	ldr	r3, [sp, #32]
 8005206:	1ae3      	subs	r3, r4, r3
 8005208:	42ab      	cmp	r3, r5
 800520a:	da5d      	bge.n	80052c8 <_dtoa_r+0x598>
 800520c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005210:	2200      	movs	r2, #0
 8005212:	4b45      	ldr	r3, [pc, #276]	; (8005328 <_dtoa_r+0x5f8>)
 8005214:	f7fe fce4 	bl	8003be0 <__aeabi_dmul>
 8005218:	2200      	movs	r2, #0
 800521a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800521e:	4b42      	ldr	r3, [pc, #264]	; (8005328 <_dtoa_r+0x5f8>)
 8005220:	4640      	mov	r0, r8
 8005222:	4649      	mov	r1, r9
 8005224:	f7fe fcdc 	bl	8003be0 <__aeabi_dmul>
 8005228:	4680      	mov	r8, r0
 800522a:	4689      	mov	r9, r1
 800522c:	e7c4      	b.n	80051b8 <_dtoa_r+0x488>
 800522e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005232:	4642      	mov	r2, r8
 8005234:	464b      	mov	r3, r9
 8005236:	f7fe fcd3 	bl	8003be0 <__aeabi_dmul>
 800523a:	9b08      	ldr	r3, [sp, #32]
 800523c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005240:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8005244:	195c      	adds	r4, r3, r5
 8005246:	461d      	mov	r5, r3
 8005248:	4649      	mov	r1, r9
 800524a:	4640      	mov	r0, r8
 800524c:	f7fe ff62 	bl	8004114 <__aeabi_d2iz>
 8005250:	4606      	mov	r6, r0
 8005252:	f7fe fc5f 	bl	8003b14 <__aeabi_i2d>
 8005256:	3630      	adds	r6, #48	; 0x30
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4640      	mov	r0, r8
 800525e:	4649      	mov	r1, r9
 8005260:	f7fe fb0a 	bl	8003878 <__aeabi_dsub>
 8005264:	f805 6b01 	strb.w	r6, [r5], #1
 8005268:	42a5      	cmp	r5, r4
 800526a:	4680      	mov	r8, r0
 800526c:	4689      	mov	r9, r1
 800526e:	d124      	bne.n	80052ba <_dtoa_r+0x58a>
 8005270:	2200      	movs	r2, #0
 8005272:	4b30      	ldr	r3, [pc, #192]	; (8005334 <_dtoa_r+0x604>)
 8005274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005278:	f7fe fb00 	bl	800387c <__adddf3>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4640      	mov	r0, r8
 8005282:	4649      	mov	r1, r9
 8005284:	f7fe ff3c 	bl	8004100 <__aeabi_dcmpgt>
 8005288:	2800      	cmp	r0, #0
 800528a:	f040 808e 	bne.w	80053aa <_dtoa_r+0x67a>
 800528e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005292:	2000      	movs	r0, #0
 8005294:	4927      	ldr	r1, [pc, #156]	; (8005334 <_dtoa_r+0x604>)
 8005296:	f7fe faef 	bl	8003878 <__aeabi_dsub>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4640      	mov	r0, r8
 80052a0:	4649      	mov	r1, r9
 80052a2:	f7fe ff0f 	bl	80040c4 <__aeabi_dcmplt>
 80052a6:	b178      	cbz	r0, 80052c8 <_dtoa_r+0x598>
 80052a8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	f104 32ff 	add.w	r2, r4, #4294967295
 80052b2:	f040 82da 	bne.w	800586a <_dtoa_r+0xb3a>
 80052b6:	4614      	mov	r4, r2
 80052b8:	e7f6      	b.n	80052a8 <_dtoa_r+0x578>
 80052ba:	2200      	movs	r2, #0
 80052bc:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <_dtoa_r+0x5f8>)
 80052be:	f7fe fc8f 	bl	8003be0 <__aeabi_dmul>
 80052c2:	4680      	mov	r8, r0
 80052c4:	4689      	mov	r9, r1
 80052c6:	e7bf      	b.n	8005248 <_dtoa_r+0x518>
 80052c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052d0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f2c0 808b 	blt.w	80053ee <_dtoa_r+0x6be>
 80052d8:	f1bb 0f0e 	cmp.w	fp, #14
 80052dc:	f300 8087 	bgt.w	80053ee <_dtoa_r+0x6be>
 80052e0:	4b0e      	ldr	r3, [pc, #56]	; (800531c <_dtoa_r+0x5ec>)
 80052e2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80052e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80052ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	da23      	bge.n	8005338 <_dtoa_r+0x608>
 80052f0:	9b05      	ldr	r3, [sp, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	dc20      	bgt.n	8005338 <_dtoa_r+0x608>
 80052f6:	f040 817d 	bne.w	80055f4 <_dtoa_r+0x8c4>
 80052fa:	4630      	mov	r0, r6
 80052fc:	2200      	movs	r2, #0
 80052fe:	4b0c      	ldr	r3, [pc, #48]	; (8005330 <_dtoa_r+0x600>)
 8005300:	4639      	mov	r1, r7
 8005302:	f7fe fc6d 	bl	8003be0 <__aeabi_dmul>
 8005306:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800530a:	f7fe feef 	bl	80040ec <__aeabi_dcmpge>
 800530e:	9d05      	ldr	r5, [sp, #20]
 8005310:	462e      	mov	r6, r5
 8005312:	2800      	cmp	r0, #0
 8005314:	f040 8170 	bne.w	80055f8 <_dtoa_r+0x8c8>
 8005318:	e175      	b.n	8005606 <_dtoa_r+0x8d6>
 800531a:	bf00      	nop
 800531c:	08006c48 	.word	0x08006c48
 8005320:	08006d10 	.word	0x08006d10
 8005324:	3ff00000 	.word	0x3ff00000
 8005328:	40240000 	.word	0x40240000
 800532c:	401c0000 	.word	0x401c0000
 8005330:	40140000 	.word	0x40140000
 8005334:	3fe00000 	.word	0x3fe00000
 8005338:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800533c:	9c08      	ldr	r4, [sp, #32]
 800533e:	4632      	mov	r2, r6
 8005340:	463b      	mov	r3, r7
 8005342:	4640      	mov	r0, r8
 8005344:	4649      	mov	r1, r9
 8005346:	f7fe fd75 	bl	8003e34 <__aeabi_ddiv>
 800534a:	f7fe fee3 	bl	8004114 <__aeabi_d2iz>
 800534e:	4605      	mov	r5, r0
 8005350:	f7fe fbe0 	bl	8003b14 <__aeabi_i2d>
 8005354:	4632      	mov	r2, r6
 8005356:	463b      	mov	r3, r7
 8005358:	f7fe fc42 	bl	8003be0 <__aeabi_dmul>
 800535c:	460b      	mov	r3, r1
 800535e:	4602      	mov	r2, r0
 8005360:	4649      	mov	r1, r9
 8005362:	4640      	mov	r0, r8
 8005364:	f7fe fa88 	bl	8003878 <__aeabi_dsub>
 8005368:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800536c:	9b08      	ldr	r3, [sp, #32]
 800536e:	f804 eb01 	strb.w	lr, [r4], #1
 8005372:	ebc3 0e04 	rsb	lr, r3, r4
 8005376:	9b05      	ldr	r3, [sp, #20]
 8005378:	459e      	cmp	lr, r3
 800537a:	d12b      	bne.n	80053d4 <_dtoa_r+0x6a4>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	f7fe fa7c 	bl	800387c <__adddf3>
 8005384:	4632      	mov	r2, r6
 8005386:	463b      	mov	r3, r7
 8005388:	4680      	mov	r8, r0
 800538a:	4689      	mov	r9, r1
 800538c:	f7fe feb8 	bl	8004100 <__aeabi_dcmpgt>
 8005390:	b970      	cbnz	r0, 80053b0 <_dtoa_r+0x680>
 8005392:	4640      	mov	r0, r8
 8005394:	4649      	mov	r1, r9
 8005396:	4632      	mov	r2, r6
 8005398:	463b      	mov	r3, r7
 800539a:	f7fe fe89 	bl	80040b0 <__aeabi_dcmpeq>
 800539e:	2800      	cmp	r0, #0
 80053a0:	f000 8264 	beq.w	800586c <_dtoa_r+0xb3c>
 80053a4:	07eb      	lsls	r3, r5, #31
 80053a6:	d403      	bmi.n	80053b0 <_dtoa_r+0x680>
 80053a8:	e260      	b.n	800586c <_dtoa_r+0xb3c>
 80053aa:	46bb      	mov	fp, r7
 80053ac:	e000      	b.n	80053b0 <_dtoa_r+0x680>
 80053ae:	461c      	mov	r4, r3
 80053b0:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 80053b4:	2a39      	cmp	r2, #57	; 0x39
 80053b6:	f104 33ff 	add.w	r3, r4, #4294967295
 80053ba:	d107      	bne.n	80053cc <_dtoa_r+0x69c>
 80053bc:	9a08      	ldr	r2, [sp, #32]
 80053be:	4293      	cmp	r3, r2
 80053c0:	d1f5      	bne.n	80053ae <_dtoa_r+0x67e>
 80053c2:	2330      	movs	r3, #48	; 0x30
 80053c4:	7013      	strb	r3, [r2, #0]
 80053c6:	f10b 0b01 	add.w	fp, fp, #1
 80053ca:	4613      	mov	r3, r2
 80053cc:	781a      	ldrb	r2, [r3, #0]
 80053ce:	3201      	adds	r2, #1
 80053d0:	701a      	strb	r2, [r3, #0]
 80053d2:	e24b      	b.n	800586c <_dtoa_r+0xb3c>
 80053d4:	2200      	movs	r2, #0
 80053d6:	4ba4      	ldr	r3, [pc, #656]	; (8005668 <_dtoa_r+0x938>)
 80053d8:	f7fe fc02 	bl	8003be0 <__aeabi_dmul>
 80053dc:	2200      	movs	r2, #0
 80053de:	2300      	movs	r3, #0
 80053e0:	4680      	mov	r8, r0
 80053e2:	4689      	mov	r9, r1
 80053e4:	f7fe fe64 	bl	80040b0 <__aeabi_dcmpeq>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	d0a8      	beq.n	800533e <_dtoa_r+0x60e>
 80053ec:	e23e      	b.n	800586c <_dtoa_r+0xb3c>
 80053ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d032      	beq.n	800545a <_dtoa_r+0x72a>
 80053f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80053f6:	2a01      	cmp	r2, #1
 80053f8:	dc0a      	bgt.n	8005410 <_dtoa_r+0x6e0>
 80053fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053fc:	b112      	cbz	r2, 8005404 <_dtoa_r+0x6d4>
 80053fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005402:	e002      	b.n	800540a <_dtoa_r+0x6da>
 8005404:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005406:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800540a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800540c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800540e:	e018      	b.n	8005442 <_dtoa_r+0x712>
 8005410:	9b05      	ldr	r3, [sp, #20]
 8005412:	1e5d      	subs	r5, r3, #1
 8005414:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005416:	42ab      	cmp	r3, r5
 8005418:	bfbf      	itttt	lt
 800541a:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800541c:	950b      	strlt	r5, [sp, #44]	; 0x2c
 800541e:	1aea      	sublt	r2, r5, r3
 8005420:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8005422:	bfb6      	itet	lt
 8005424:	189b      	addlt	r3, r3, r2
 8005426:	1b5d      	subge	r5, r3, r5
 8005428:	930d      	strlt	r3, [sp, #52]	; 0x34
 800542a:	9b05      	ldr	r3, [sp, #20]
 800542c:	bfb8      	it	lt
 800542e:	2500      	movlt	r5, #0
 8005430:	2b00      	cmp	r3, #0
 8005432:	bfb9      	ittee	lt
 8005434:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8005436:	9a05      	ldrlt	r2, [sp, #20]
 8005438:	9c09      	ldrge	r4, [sp, #36]	; 0x24
 800543a:	9b05      	ldrge	r3, [sp, #20]
 800543c:	bfbc      	itt	lt
 800543e:	1a9c      	sublt	r4, r3, r2
 8005440:	2300      	movlt	r3, #0
 8005442:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005444:	441a      	add	r2, r3
 8005446:	9209      	str	r2, [sp, #36]	; 0x24
 8005448:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800544a:	4650      	mov	r0, sl
 800544c:	441a      	add	r2, r3
 800544e:	2101      	movs	r1, #1
 8005450:	920a      	str	r2, [sp, #40]	; 0x28
 8005452:	f000 fbeb 	bl	8005c2c <__i2b>
 8005456:	4606      	mov	r6, r0
 8005458:	e002      	b.n	8005460 <_dtoa_r+0x730>
 800545a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800545c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800545e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8005460:	b164      	cbz	r4, 800547c <_dtoa_r+0x74c>
 8005462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005464:	2b00      	cmp	r3, #0
 8005466:	dd09      	ble.n	800547c <_dtoa_r+0x74c>
 8005468:	42a3      	cmp	r3, r4
 800546a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800546c:	bfa8      	it	ge
 800546e:	4623      	movge	r3, r4
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	9209      	str	r2, [sp, #36]	; 0x24
 8005474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005476:	1ae4      	subs	r4, r4, r3
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	930a      	str	r3, [sp, #40]	; 0x28
 800547c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800547e:	2b00      	cmp	r3, #0
 8005480:	dd20      	ble.n	80054c4 <_dtoa_r+0x794>
 8005482:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005484:	b1c3      	cbz	r3, 80054b8 <_dtoa_r+0x788>
 8005486:	2d00      	cmp	r5, #0
 8005488:	dd10      	ble.n	80054ac <_dtoa_r+0x77c>
 800548a:	4631      	mov	r1, r6
 800548c:	462a      	mov	r2, r5
 800548e:	4650      	mov	r0, sl
 8005490:	f000 fc66 	bl	8005d60 <__pow5mult>
 8005494:	4606      	mov	r6, r0
 8005496:	4631      	mov	r1, r6
 8005498:	9a07      	ldr	r2, [sp, #28]
 800549a:	4650      	mov	r0, sl
 800549c:	f000 fbcf 	bl	8005c3e <__multiply>
 80054a0:	9907      	ldr	r1, [sp, #28]
 80054a2:	4607      	mov	r7, r0
 80054a4:	4650      	mov	r0, sl
 80054a6:	f000 fb1f 	bl	8005ae8 <_Bfree>
 80054aa:	9707      	str	r7, [sp, #28]
 80054ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ae:	1b5a      	subs	r2, r3, r5
 80054b0:	d008      	beq.n	80054c4 <_dtoa_r+0x794>
 80054b2:	4650      	mov	r0, sl
 80054b4:	9907      	ldr	r1, [sp, #28]
 80054b6:	e002      	b.n	80054be <_dtoa_r+0x78e>
 80054b8:	9907      	ldr	r1, [sp, #28]
 80054ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054bc:	4650      	mov	r0, sl
 80054be:	f000 fc4f 	bl	8005d60 <__pow5mult>
 80054c2:	9007      	str	r0, [sp, #28]
 80054c4:	4650      	mov	r0, sl
 80054c6:	2101      	movs	r1, #1
 80054c8:	f000 fbb0 	bl	8005c2c <__i2b>
 80054cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	4605      	mov	r5, r0
 80054d2:	dd0a      	ble.n	80054ea <_dtoa_r+0x7ba>
 80054d4:	4629      	mov	r1, r5
 80054d6:	461a      	mov	r2, r3
 80054d8:	4650      	mov	r0, sl
 80054da:	f000 fc41 	bl	8005d60 <__pow5mult>
 80054de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	4605      	mov	r5, r0
 80054e4:	dd04      	ble.n	80054f0 <_dtoa_r+0x7c0>
 80054e6:	2700      	movs	r7, #0
 80054e8:	e01b      	b.n	8005522 <_dtoa_r+0x7f2>
 80054ea:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	dc13      	bgt.n	8005518 <_dtoa_r+0x7e8>
 80054f0:	9b02      	ldr	r3, [sp, #8]
 80054f2:	b98b      	cbnz	r3, 8005518 <_dtoa_r+0x7e8>
 80054f4:	9b03      	ldr	r3, [sp, #12]
 80054f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054fa:	b97b      	cbnz	r3, 800551c <_dtoa_r+0x7ec>
 80054fc:	9b03      	ldr	r3, [sp, #12]
 80054fe:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005502:	0d3f      	lsrs	r7, r7, #20
 8005504:	053f      	lsls	r7, r7, #20
 8005506:	b157      	cbz	r7, 800551e <_dtoa_r+0x7ee>
 8005508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550a:	3301      	adds	r3, #1
 800550c:	9309      	str	r3, [sp, #36]	; 0x24
 800550e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005510:	3301      	adds	r3, #1
 8005512:	930a      	str	r3, [sp, #40]	; 0x28
 8005514:	2701      	movs	r7, #1
 8005516:	e002      	b.n	800551e <_dtoa_r+0x7ee>
 8005518:	2700      	movs	r7, #0
 800551a:	e000      	b.n	800551e <_dtoa_r+0x7ee>
 800551c:	9f02      	ldr	r7, [sp, #8]
 800551e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005520:	b143      	cbz	r3, 8005534 <_dtoa_r+0x804>
 8005522:	692b      	ldr	r3, [r5, #16]
 8005524:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005528:	6918      	ldr	r0, [r3, #16]
 800552a:	f000 fb32 	bl	8005b92 <__hi0bits>
 800552e:	f1c0 0020 	rsb	r0, r0, #32
 8005532:	e000      	b.n	8005536 <_dtoa_r+0x806>
 8005534:	2001      	movs	r0, #1
 8005536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005538:	4418      	add	r0, r3
 800553a:	f010 001f 	ands.w	r0, r0, #31
 800553e:	d008      	beq.n	8005552 <_dtoa_r+0x822>
 8005540:	f1c0 0320 	rsb	r3, r0, #32
 8005544:	2b04      	cmp	r3, #4
 8005546:	dd02      	ble.n	800554e <_dtoa_r+0x81e>
 8005548:	f1c0 001c 	rsb	r0, r0, #28
 800554c:	e002      	b.n	8005554 <_dtoa_r+0x824>
 800554e:	d008      	beq.n	8005562 <_dtoa_r+0x832>
 8005550:	4618      	mov	r0, r3
 8005552:	301c      	adds	r0, #28
 8005554:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005556:	4403      	add	r3, r0
 8005558:	9309      	str	r3, [sp, #36]	; 0x24
 800555a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800555c:	4403      	add	r3, r0
 800555e:	4404      	add	r4, r0
 8005560:	930a      	str	r3, [sp, #40]	; 0x28
 8005562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005564:	2b00      	cmp	r3, #0
 8005566:	dd05      	ble.n	8005574 <_dtoa_r+0x844>
 8005568:	4650      	mov	r0, sl
 800556a:	9907      	ldr	r1, [sp, #28]
 800556c:	461a      	mov	r2, r3
 800556e:	f000 fc45 	bl	8005dfc <__lshift>
 8005572:	9007      	str	r0, [sp, #28]
 8005574:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005576:	2b00      	cmp	r3, #0
 8005578:	dd05      	ble.n	8005586 <_dtoa_r+0x856>
 800557a:	4629      	mov	r1, r5
 800557c:	4650      	mov	r0, sl
 800557e:	461a      	mov	r2, r3
 8005580:	f000 fc3c 	bl	8005dfc <__lshift>
 8005584:	4605      	mov	r5, r0
 8005586:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005588:	b1eb      	cbz	r3, 80055c6 <_dtoa_r+0x896>
 800558a:	9807      	ldr	r0, [sp, #28]
 800558c:	4629      	mov	r1, r5
 800558e:	f000 fc88 	bl	8005ea2 <__mcmp>
 8005592:	2800      	cmp	r0, #0
 8005594:	da17      	bge.n	80055c6 <_dtoa_r+0x896>
 8005596:	2300      	movs	r3, #0
 8005598:	4650      	mov	r0, sl
 800559a:	9907      	ldr	r1, [sp, #28]
 800559c:	220a      	movs	r2, #10
 800559e:	f000 faba 	bl	8005b16 <__multadd>
 80055a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80055a4:	9007      	str	r0, [sp, #28]
 80055a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	f000 8170 	beq.w	8005890 <_dtoa_r+0xb60>
 80055b0:	4631      	mov	r1, r6
 80055b2:	2300      	movs	r3, #0
 80055b4:	4650      	mov	r0, sl
 80055b6:	220a      	movs	r2, #10
 80055b8:	f000 faad 	bl	8005b16 <__multadd>
 80055bc:	9b06      	ldr	r3, [sp, #24]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	4606      	mov	r6, r0
 80055c2:	dc33      	bgt.n	800562c <_dtoa_r+0x8fc>
 80055c4:	e16d      	b.n	80058a2 <_dtoa_r+0xb72>
 80055c6:	9b05      	ldr	r3, [sp, #20]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	dc26      	bgt.n	800561a <_dtoa_r+0x8ea>
 80055cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	dd23      	ble.n	800561a <_dtoa_r+0x8ea>
 80055d2:	9b05      	ldr	r3, [sp, #20]
 80055d4:	9306      	str	r3, [sp, #24]
 80055d6:	9b06      	ldr	r3, [sp, #24]
 80055d8:	b973      	cbnz	r3, 80055f8 <_dtoa_r+0x8c8>
 80055da:	4629      	mov	r1, r5
 80055dc:	2205      	movs	r2, #5
 80055de:	4650      	mov	r0, sl
 80055e0:	f000 fa99 	bl	8005b16 <__multadd>
 80055e4:	4605      	mov	r5, r0
 80055e6:	4629      	mov	r1, r5
 80055e8:	9807      	ldr	r0, [sp, #28]
 80055ea:	f000 fc5a 	bl	8005ea2 <__mcmp>
 80055ee:	2800      	cmp	r0, #0
 80055f0:	dc09      	bgt.n	8005606 <_dtoa_r+0x8d6>
 80055f2:	e001      	b.n	80055f8 <_dtoa_r+0x8c8>
 80055f4:	2500      	movs	r5, #0
 80055f6:	462e      	mov	r6, r5
 80055f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80055fa:	9c08      	ldr	r4, [sp, #32]
 80055fc:	ea6f 0b03 	mvn.w	fp, r3
 8005600:	e008      	b.n	8005614 <_dtoa_r+0x8e4>
 8005602:	46bb      	mov	fp, r7
 8005604:	462e      	mov	r6, r5
 8005606:	9b08      	ldr	r3, [sp, #32]
 8005608:	9a08      	ldr	r2, [sp, #32]
 800560a:	1c5c      	adds	r4, r3, #1
 800560c:	2331      	movs	r3, #49	; 0x31
 800560e:	7013      	strb	r3, [r2, #0]
 8005610:	f10b 0b01 	add.w	fp, fp, #1
 8005614:	46b1      	mov	r9, r6
 8005616:	2600      	movs	r6, #0
 8005618:	e114      	b.n	8005844 <_dtoa_r+0xb14>
 800561a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800561c:	b923      	cbnz	r3, 8005628 <_dtoa_r+0x8f8>
 800561e:	9b05      	ldr	r3, [sp, #20]
 8005620:	9306      	str	r3, [sp, #24]
 8005622:	9f08      	ldr	r7, [sp, #32]
 8005624:	9c07      	ldr	r4, [sp, #28]
 8005626:	e0cc      	b.n	80057c2 <_dtoa_r+0xa92>
 8005628:	9b05      	ldr	r3, [sp, #20]
 800562a:	9306      	str	r3, [sp, #24]
 800562c:	2c00      	cmp	r4, #0
 800562e:	dd05      	ble.n	800563c <_dtoa_r+0x90c>
 8005630:	4631      	mov	r1, r6
 8005632:	4650      	mov	r0, sl
 8005634:	4622      	mov	r2, r4
 8005636:	f000 fbe1 	bl	8005dfc <__lshift>
 800563a:	4606      	mov	r6, r0
 800563c:	b1b7      	cbz	r7, 800566c <_dtoa_r+0x93c>
 800563e:	6871      	ldr	r1, [r6, #4]
 8005640:	4650      	mov	r0, sl
 8005642:	f000 fa1c 	bl	8005a7e <_Balloc>
 8005646:	6932      	ldr	r2, [r6, #16]
 8005648:	3202      	adds	r2, #2
 800564a:	4604      	mov	r4, r0
 800564c:	f106 010c 	add.w	r1, r6, #12
 8005650:	0092      	lsls	r2, r2, #2
 8005652:	300c      	adds	r0, #12
 8005654:	f7fe fe02 	bl	800425c <memcpy>
 8005658:	4650      	mov	r0, sl
 800565a:	4621      	mov	r1, r4
 800565c:	2201      	movs	r2, #1
 800565e:	f000 fbcd 	bl	8005dfc <__lshift>
 8005662:	4681      	mov	r9, r0
 8005664:	e003      	b.n	800566e <_dtoa_r+0x93e>
 8005666:	bf00      	nop
 8005668:	40240000 	.word	0x40240000
 800566c:	46b1      	mov	r9, r6
 800566e:	9f08      	ldr	r7, [sp, #32]
 8005670:	9c07      	ldr	r4, [sp, #28]
 8005672:	4629      	mov	r1, r5
 8005674:	4620      	mov	r0, r4
 8005676:	f7ff facd 	bl	8004c14 <quorem>
 800567a:	4631      	mov	r1, r6
 800567c:	9009      	str	r0, [sp, #36]	; 0x24
 800567e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005682:	4620      	mov	r0, r4
 8005684:	f000 fc0d 	bl	8005ea2 <__mcmp>
 8005688:	464a      	mov	r2, r9
 800568a:	9005      	str	r0, [sp, #20]
 800568c:	4629      	mov	r1, r5
 800568e:	4650      	mov	r0, sl
 8005690:	f000 fc23 	bl	8005eda <__mdiff>
 8005694:	68c2      	ldr	r2, [r0, #12]
 8005696:	4603      	mov	r3, r0
 8005698:	b93a      	cbnz	r2, 80056aa <_dtoa_r+0x97a>
 800569a:	4619      	mov	r1, r3
 800569c:	4620      	mov	r0, r4
 800569e:	9307      	str	r3, [sp, #28]
 80056a0:	f000 fbff 	bl	8005ea2 <__mcmp>
 80056a4:	9b07      	ldr	r3, [sp, #28]
 80056a6:	4602      	mov	r2, r0
 80056a8:	e000      	b.n	80056ac <_dtoa_r+0x97c>
 80056aa:	2201      	movs	r2, #1
 80056ac:	4650      	mov	r0, sl
 80056ae:	4619      	mov	r1, r3
 80056b0:	9207      	str	r2, [sp, #28]
 80056b2:	f000 fa19 	bl	8005ae8 <_Bfree>
 80056b6:	9a07      	ldr	r2, [sp, #28]
 80056b8:	b9a2      	cbnz	r2, 80056e4 <_dtoa_r+0x9b4>
 80056ba:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056bc:	b993      	cbnz	r3, 80056e4 <_dtoa_r+0x9b4>
 80056be:	9b02      	ldr	r3, [sp, #8]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	b973      	cbnz	r3, 80056e4 <_dtoa_r+0x9b4>
 80056c6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80056ca:	463b      	mov	r3, r7
 80056cc:	9407      	str	r4, [sp, #28]
 80056ce:	d040      	beq.n	8005752 <_dtoa_r+0xa22>
 80056d0:	9b05      	ldr	r3, [sp, #20]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bfc8      	it	gt
 80056d6:	9b09      	ldrgt	r3, [sp, #36]	; 0x24
 80056d8:	f107 0401 	add.w	r4, r7, #1
 80056dc:	bfc8      	it	gt
 80056de:	f103 0831 	addgt.w	r8, r3, #49	; 0x31
 80056e2:	e03d      	b.n	8005760 <_dtoa_r+0xa30>
 80056e4:	9b05      	ldr	r3, [sp, #20]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	da04      	bge.n	80056f4 <_dtoa_r+0x9c4>
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	46c4      	mov	ip, r8
 80056ee:	9407      	str	r4, [sp, #28]
 80056f0:	dc08      	bgt.n	8005704 <_dtoa_r+0x9d4>
 80056f2:	e021      	b.n	8005738 <_dtoa_r+0xa08>
 80056f4:	d124      	bne.n	8005740 <_dtoa_r+0xa10>
 80056f6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80056f8:	bb13      	cbnz	r3, 8005740 <_dtoa_r+0xa10>
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	b9f3      	cbnz	r3, 8005740 <_dtoa_r+0xa10>
 8005702:	e7f2      	b.n	80056ea <_dtoa_r+0x9ba>
 8005704:	4621      	mov	r1, r4
 8005706:	2201      	movs	r2, #1
 8005708:	4650      	mov	r0, sl
 800570a:	9705      	str	r7, [sp, #20]
 800570c:	f8cd 8008 	str.w	r8, [sp, #8]
 8005710:	f000 fb74 	bl	8005dfc <__lshift>
 8005714:	4629      	mov	r1, r5
 8005716:	9007      	str	r0, [sp, #28]
 8005718:	f000 fbc3 	bl	8005ea2 <__mcmp>
 800571c:	2800      	cmp	r0, #0
 800571e:	f8dd c008 	ldr.w	ip, [sp, #8]
 8005722:	9b05      	ldr	r3, [sp, #20]
 8005724:	dc03      	bgt.n	800572e <_dtoa_r+0x9fe>
 8005726:	d107      	bne.n	8005738 <_dtoa_r+0xa08>
 8005728:	f018 0f01 	tst.w	r8, #1
 800572c:	d004      	beq.n	8005738 <_dtoa_r+0xa08>
 800572e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005732:	d00e      	beq.n	8005752 <_dtoa_r+0xa22>
 8005734:	f108 0c01 	add.w	ip, r8, #1
 8005738:	1c7c      	adds	r4, r7, #1
 800573a:	f887 c000 	strb.w	ip, [r7]
 800573e:	e081      	b.n	8005844 <_dtoa_r+0xb14>
 8005740:	2a00      	cmp	r2, #0
 8005742:	f107 0201 	add.w	r2, r7, #1
 8005746:	dd0e      	ble.n	8005766 <_dtoa_r+0xa36>
 8005748:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800574c:	463b      	mov	r3, r7
 800574e:	9407      	str	r4, [sp, #28]
 8005750:	d103      	bne.n	800575a <_dtoa_r+0xa2a>
 8005752:	2239      	movs	r2, #57	; 0x39
 8005754:	3701      	adds	r7, #1
 8005756:	701a      	strb	r2, [r3, #0]
 8005758:	e057      	b.n	800580a <_dtoa_r+0xada>
 800575a:	4614      	mov	r4, r2
 800575c:	f108 0801 	add.w	r8, r8, #1
 8005760:	f887 8000 	strb.w	r8, [r7]
 8005764:	e06e      	b.n	8005844 <_dtoa_r+0xb14>
 8005766:	9b08      	ldr	r3, [sp, #32]
 8005768:	f802 8c01 	strb.w	r8, [r2, #-1]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	4617      	mov	r7, r2
 8005770:	9a06      	ldr	r2, [sp, #24]
 8005772:	4293      	cmp	r3, r2
 8005774:	d03a      	beq.n	80057ec <_dtoa_r+0xabc>
 8005776:	4621      	mov	r1, r4
 8005778:	220a      	movs	r2, #10
 800577a:	2300      	movs	r3, #0
 800577c:	4650      	mov	r0, sl
 800577e:	f000 f9ca 	bl	8005b16 <__multadd>
 8005782:	454e      	cmp	r6, r9
 8005784:	4604      	mov	r4, r0
 8005786:	4631      	mov	r1, r6
 8005788:	4650      	mov	r0, sl
 800578a:	f04f 020a 	mov.w	r2, #10
 800578e:	f04f 0300 	mov.w	r3, #0
 8005792:	d104      	bne.n	800579e <_dtoa_r+0xa6e>
 8005794:	f000 f9bf 	bl	8005b16 <__multadd>
 8005798:	4606      	mov	r6, r0
 800579a:	4681      	mov	r9, r0
 800579c:	e769      	b.n	8005672 <_dtoa_r+0x942>
 800579e:	f000 f9ba 	bl	8005b16 <__multadd>
 80057a2:	4649      	mov	r1, r9
 80057a4:	4606      	mov	r6, r0
 80057a6:	220a      	movs	r2, #10
 80057a8:	4650      	mov	r0, sl
 80057aa:	2300      	movs	r3, #0
 80057ac:	f000 f9b3 	bl	8005b16 <__multadd>
 80057b0:	4681      	mov	r9, r0
 80057b2:	e75e      	b.n	8005672 <_dtoa_r+0x942>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4650      	mov	r0, sl
 80057b8:	220a      	movs	r2, #10
 80057ba:	2300      	movs	r3, #0
 80057bc:	f000 f9ab 	bl	8005b16 <__multadd>
 80057c0:	4604      	mov	r4, r0
 80057c2:	4620      	mov	r0, r4
 80057c4:	4629      	mov	r1, r5
 80057c6:	f7ff fa25 	bl	8004c14 <quorem>
 80057ca:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80057ce:	f807 8b01 	strb.w	r8, [r7], #1
 80057d2:	9b08      	ldr	r3, [sp, #32]
 80057d4:	9a06      	ldr	r2, [sp, #24]
 80057d6:	1afb      	subs	r3, r7, r3
 80057d8:	4293      	cmp	r3, r2
 80057da:	dbeb      	blt.n	80057b4 <_dtoa_r+0xa84>
 80057dc:	9b08      	ldr	r3, [sp, #32]
 80057de:	2a01      	cmp	r2, #1
 80057e0:	bfac      	ite	ge
 80057e2:	189b      	addge	r3, r3, r2
 80057e4:	3301      	addlt	r3, #1
 80057e6:	46b1      	mov	r9, r6
 80057e8:	461f      	mov	r7, r3
 80057ea:	2600      	movs	r6, #0
 80057ec:	4621      	mov	r1, r4
 80057ee:	2201      	movs	r2, #1
 80057f0:	4650      	mov	r0, sl
 80057f2:	f000 fb03 	bl	8005dfc <__lshift>
 80057f6:	4629      	mov	r1, r5
 80057f8:	9007      	str	r0, [sp, #28]
 80057fa:	f000 fb52 	bl	8005ea2 <__mcmp>
 80057fe:	2800      	cmp	r0, #0
 8005800:	dc03      	bgt.n	800580a <_dtoa_r+0xada>
 8005802:	d116      	bne.n	8005832 <_dtoa_r+0xb02>
 8005804:	f018 0f01 	tst.w	r8, #1
 8005808:	d013      	beq.n	8005832 <_dtoa_r+0xb02>
 800580a:	463c      	mov	r4, r7
 800580c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005810:	2b39      	cmp	r3, #57	; 0x39
 8005812:	f104 32ff 	add.w	r2, r4, #4294967295
 8005816:	d109      	bne.n	800582c <_dtoa_r+0xafc>
 8005818:	9b08      	ldr	r3, [sp, #32]
 800581a:	429a      	cmp	r2, r3
 800581c:	d104      	bne.n	8005828 <_dtoa_r+0xaf8>
 800581e:	f10b 0b01 	add.w	fp, fp, #1
 8005822:	2331      	movs	r3, #49	; 0x31
 8005824:	9a08      	ldr	r2, [sp, #32]
 8005826:	e002      	b.n	800582e <_dtoa_r+0xafe>
 8005828:	4614      	mov	r4, r2
 800582a:	e7ef      	b.n	800580c <_dtoa_r+0xadc>
 800582c:	3301      	adds	r3, #1
 800582e:	7013      	strb	r3, [r2, #0]
 8005830:	e008      	b.n	8005844 <_dtoa_r+0xb14>
 8005832:	463c      	mov	r4, r7
 8005834:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005838:	2b30      	cmp	r3, #48	; 0x30
 800583a:	f104 32ff 	add.w	r2, r4, #4294967295
 800583e:	d101      	bne.n	8005844 <_dtoa_r+0xb14>
 8005840:	4614      	mov	r4, r2
 8005842:	e7f7      	b.n	8005834 <_dtoa_r+0xb04>
 8005844:	4650      	mov	r0, sl
 8005846:	4629      	mov	r1, r5
 8005848:	f000 f94e 	bl	8005ae8 <_Bfree>
 800584c:	f1b9 0f00 	cmp.w	r9, #0
 8005850:	d00c      	beq.n	800586c <_dtoa_r+0xb3c>
 8005852:	b12e      	cbz	r6, 8005860 <_dtoa_r+0xb30>
 8005854:	454e      	cmp	r6, r9
 8005856:	d003      	beq.n	8005860 <_dtoa_r+0xb30>
 8005858:	4650      	mov	r0, sl
 800585a:	4631      	mov	r1, r6
 800585c:	f000 f944 	bl	8005ae8 <_Bfree>
 8005860:	4650      	mov	r0, sl
 8005862:	4649      	mov	r1, r9
 8005864:	f000 f940 	bl	8005ae8 <_Bfree>
 8005868:	e000      	b.n	800586c <_dtoa_r+0xb3c>
 800586a:	46bb      	mov	fp, r7
 800586c:	4650      	mov	r0, sl
 800586e:	9907      	ldr	r1, [sp, #28]
 8005870:	f000 f93a 	bl	8005ae8 <_Bfree>
 8005874:	2300      	movs	r3, #0
 8005876:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005878:	7023      	strb	r3, [r4, #0]
 800587a:	f10b 0301 	add.w	r3, fp, #1
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005882:	b11b      	cbz	r3, 800588c <_dtoa_r+0xb5c>
 8005884:	601c      	str	r4, [r3, #0]
 8005886:	e001      	b.n	800588c <_dtoa_r+0xb5c>
 8005888:	480a      	ldr	r0, [pc, #40]	; (80058b4 <_dtoa_r+0xb84>)
 800588a:	e00f      	b.n	80058ac <_dtoa_r+0xb7c>
 800588c:	9808      	ldr	r0, [sp, #32]
 800588e:	e00d      	b.n	80058ac <_dtoa_r+0xb7c>
 8005890:	9b06      	ldr	r3, [sp, #24]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f73f aec5 	bgt.w	8005622 <_dtoa_r+0x8f2>
 8005898:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800589a:	2b02      	cmp	r3, #2
 800589c:	f73f ae9b 	bgt.w	80055d6 <_dtoa_r+0x8a6>
 80058a0:	e6bf      	b.n	8005622 <_dtoa_r+0x8f2>
 80058a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	f73f ae96 	bgt.w	80055d6 <_dtoa_r+0x8a6>
 80058aa:	e6bf      	b.n	800562c <_dtoa_r+0x8fc>
 80058ac:	b017      	add	sp, #92	; 0x5c
 80058ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b2:	bf00      	nop
 80058b4:	08006ba8 	.word	0x08006ba8

080058b8 <_cleanup_r>:
 80058b8:	4901      	ldr	r1, [pc, #4]	; (80058c0 <_cleanup_r+0x8>)
 80058ba:	f000 b8a7 	b.w	8005a0c <_fwalk_reent>
 80058be:	bf00      	nop
 80058c0:	08006761 	.word	0x08006761

080058c4 <std.isra.0>:
 80058c4:	2300      	movs	r3, #0
 80058c6:	b510      	push	{r4, lr}
 80058c8:	4604      	mov	r4, r0
 80058ca:	6003      	str	r3, [r0, #0]
 80058cc:	6043      	str	r3, [r0, #4]
 80058ce:	6083      	str	r3, [r0, #8]
 80058d0:	8181      	strh	r1, [r0, #12]
 80058d2:	6643      	str	r3, [r0, #100]	; 0x64
 80058d4:	81c2      	strh	r2, [r0, #14]
 80058d6:	6103      	str	r3, [r0, #16]
 80058d8:	6143      	str	r3, [r0, #20]
 80058da:	6183      	str	r3, [r0, #24]
 80058dc:	4619      	mov	r1, r3
 80058de:	305c      	adds	r0, #92	; 0x5c
 80058e0:	2208      	movs	r2, #8
 80058e2:	f7fe fcc6 	bl	8004272 <memset>
 80058e6:	4b05      	ldr	r3, [pc, #20]	; (80058fc <std.isra.0+0x38>)
 80058e8:	6263      	str	r3, [r4, #36]	; 0x24
 80058ea:	4b05      	ldr	r3, [pc, #20]	; (8005900 <std.isra.0+0x3c>)
 80058ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80058ee:	4b05      	ldr	r3, [pc, #20]	; (8005904 <std.isra.0+0x40>)
 80058f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <std.isra.0+0x44>)
 80058f4:	6224      	str	r4, [r4, #32]
 80058f6:	6323      	str	r3, [r4, #48]	; 0x30
 80058f8:	bd10      	pop	{r4, pc}
 80058fa:	bf00      	nop
 80058fc:	0800640d 	.word	0x0800640d
 8005900:	0800642f 	.word	0x0800642f
 8005904:	08006467 	.word	0x08006467
 8005908:	0800648b 	.word	0x0800648b

0800590c <__sfmoreglue>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	2368      	movs	r3, #104	; 0x68
 8005910:	1e4d      	subs	r5, r1, #1
 8005912:	435d      	muls	r5, r3
 8005914:	460e      	mov	r6, r1
 8005916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800591a:	f000 fbe1 	bl	80060e0 <_malloc_r>
 800591e:	4604      	mov	r4, r0
 8005920:	b140      	cbz	r0, 8005934 <__sfmoreglue+0x28>
 8005922:	2100      	movs	r1, #0
 8005924:	e880 0042 	stmia.w	r0, {r1, r6}
 8005928:	300c      	adds	r0, #12
 800592a:	60a0      	str	r0, [r4, #8]
 800592c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005930:	f7fe fc9f 	bl	8004272 <memset>
 8005934:	4620      	mov	r0, r4
 8005936:	bd70      	pop	{r4, r5, r6, pc}

08005938 <__sinit>:
 8005938:	6983      	ldr	r3, [r0, #24]
 800593a:	b510      	push	{r4, lr}
 800593c:	4604      	mov	r4, r0
 800593e:	bb33      	cbnz	r3, 800598e <__sinit+0x56>
 8005940:	6483      	str	r3, [r0, #72]	; 0x48
 8005942:	64c3      	str	r3, [r0, #76]	; 0x4c
 8005944:	6503      	str	r3, [r0, #80]	; 0x50
 8005946:	4b12      	ldr	r3, [pc, #72]	; (8005990 <__sinit+0x58>)
 8005948:	4a12      	ldr	r2, [pc, #72]	; (8005994 <__sinit+0x5c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6282      	str	r2, [r0, #40]	; 0x28
 800594e:	4298      	cmp	r0, r3
 8005950:	bf04      	itt	eq
 8005952:	2301      	moveq	r3, #1
 8005954:	6183      	streq	r3, [r0, #24]
 8005956:	f000 f81f 	bl	8005998 <__sfp>
 800595a:	6060      	str	r0, [r4, #4]
 800595c:	4620      	mov	r0, r4
 800595e:	f000 f81b 	bl	8005998 <__sfp>
 8005962:	60a0      	str	r0, [r4, #8]
 8005964:	4620      	mov	r0, r4
 8005966:	f000 f817 	bl	8005998 <__sfp>
 800596a:	2104      	movs	r1, #4
 800596c:	60e0      	str	r0, [r4, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	6860      	ldr	r0, [r4, #4]
 8005972:	f7ff ffa7 	bl	80058c4 <std.isra.0>
 8005976:	68a0      	ldr	r0, [r4, #8]
 8005978:	2109      	movs	r1, #9
 800597a:	2201      	movs	r2, #1
 800597c:	f7ff ffa2 	bl	80058c4 <std.isra.0>
 8005980:	68e0      	ldr	r0, [r4, #12]
 8005982:	2112      	movs	r1, #18
 8005984:	2202      	movs	r2, #2
 8005986:	f7ff ff9d 	bl	80058c4 <std.isra.0>
 800598a:	2301      	movs	r3, #1
 800598c:	61a3      	str	r3, [r4, #24]
 800598e:	bd10      	pop	{r4, pc}
 8005990:	08006b94 	.word	0x08006b94
 8005994:	080058b9 	.word	0x080058b9

08005998 <__sfp>:
 8005998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599a:	4b1b      	ldr	r3, [pc, #108]	; (8005a08 <__sfp+0x70>)
 800599c:	681e      	ldr	r6, [r3, #0]
 800599e:	69b3      	ldr	r3, [r6, #24]
 80059a0:	4607      	mov	r7, r0
 80059a2:	b913      	cbnz	r3, 80059aa <__sfp+0x12>
 80059a4:	4630      	mov	r0, r6
 80059a6:	f7ff ffc7 	bl	8005938 <__sinit>
 80059aa:	3648      	adds	r6, #72	; 0x48
 80059ac:	68b4      	ldr	r4, [r6, #8]
 80059ae:	6873      	ldr	r3, [r6, #4]
 80059b0:	3b01      	subs	r3, #1
 80059b2:	d404      	bmi.n	80059be <__sfp+0x26>
 80059b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059b8:	b175      	cbz	r5, 80059d8 <__sfp+0x40>
 80059ba:	3468      	adds	r4, #104	; 0x68
 80059bc:	e7f8      	b.n	80059b0 <__sfp+0x18>
 80059be:	6833      	ldr	r3, [r6, #0]
 80059c0:	b92b      	cbnz	r3, 80059ce <__sfp+0x36>
 80059c2:	4638      	mov	r0, r7
 80059c4:	2104      	movs	r1, #4
 80059c6:	f7ff ffa1 	bl	800590c <__sfmoreglue>
 80059ca:	6030      	str	r0, [r6, #0]
 80059cc:	b108      	cbz	r0, 80059d2 <__sfp+0x3a>
 80059ce:	6836      	ldr	r6, [r6, #0]
 80059d0:	e7ec      	b.n	80059ac <__sfp+0x14>
 80059d2:	230c      	movs	r3, #12
 80059d4:	603b      	str	r3, [r7, #0]
 80059d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059dc:	81e3      	strh	r3, [r4, #14]
 80059de:	2301      	movs	r3, #1
 80059e0:	81a3      	strh	r3, [r4, #12]
 80059e2:	6665      	str	r5, [r4, #100]	; 0x64
 80059e4:	6025      	str	r5, [r4, #0]
 80059e6:	60a5      	str	r5, [r4, #8]
 80059e8:	6065      	str	r5, [r4, #4]
 80059ea:	6125      	str	r5, [r4, #16]
 80059ec:	6165      	str	r5, [r4, #20]
 80059ee:	61a5      	str	r5, [r4, #24]
 80059f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059f4:	4629      	mov	r1, r5
 80059f6:	2208      	movs	r2, #8
 80059f8:	f7fe fc3b 	bl	8004272 <memset>
 80059fc:	6365      	str	r5, [r4, #52]	; 0x34
 80059fe:	63a5      	str	r5, [r4, #56]	; 0x38
 8005a00:	64a5      	str	r5, [r4, #72]	; 0x48
 8005a02:	64e5      	str	r5, [r4, #76]	; 0x4c
 8005a04:	4620      	mov	r0, r4
 8005a06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a08:	08006b94 	.word	0x08006b94

08005a0c <_fwalk_reent>:
 8005a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a10:	4680      	mov	r8, r0
 8005a12:	4689      	mov	r9, r1
 8005a14:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a18:	2600      	movs	r6, #0
 8005a1a:	b194      	cbz	r4, 8005a42 <_fwalk_reent+0x36>
 8005a1c:	68a5      	ldr	r5, [r4, #8]
 8005a1e:	6867      	ldr	r7, [r4, #4]
 8005a20:	3f01      	subs	r7, #1
 8005a22:	d40c      	bmi.n	8005a3e <_fwalk_reent+0x32>
 8005a24:	89ab      	ldrh	r3, [r5, #12]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d907      	bls.n	8005a3a <_fwalk_reent+0x2e>
 8005a2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	d003      	beq.n	8005a3a <_fwalk_reent+0x2e>
 8005a32:	4640      	mov	r0, r8
 8005a34:	4629      	mov	r1, r5
 8005a36:	47c8      	blx	r9
 8005a38:	4306      	orrs	r6, r0
 8005a3a:	3568      	adds	r5, #104	; 0x68
 8005a3c:	e7f0      	b.n	8005a20 <_fwalk_reent+0x14>
 8005a3e:	6824      	ldr	r4, [r4, #0]
 8005a40:	e7eb      	b.n	8005a1a <_fwalk_reent+0xe>
 8005a42:	4630      	mov	r0, r6
 8005a44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005a48 <_localeconv_r>:
 8005a48:	4800      	ldr	r0, [pc, #0]	; (8005a4c <_localeconv_r+0x4>)
 8005a4a:	4770      	bx	lr
 8005a4c:	1ffe8870 	.word	0x1ffe8870

08005a50 <malloc>:
 8005a50:	4b02      	ldr	r3, [pc, #8]	; (8005a5c <malloc+0xc>)
 8005a52:	4601      	mov	r1, r0
 8005a54:	6818      	ldr	r0, [r3, #0]
 8005a56:	f000 bb43 	b.w	80060e0 <_malloc_r>
 8005a5a:	bf00      	nop
 8005a5c:	1ffe886c 	.word	0x1ffe886c

08005a60 <memchr>:
 8005a60:	b510      	push	{r4, lr}
 8005a62:	b2c9      	uxtb	r1, r1
 8005a64:	4402      	add	r2, r0
 8005a66:	4290      	cmp	r0, r2
 8005a68:	4603      	mov	r3, r0
 8005a6a:	d006      	beq.n	8005a7a <memchr+0x1a>
 8005a6c:	781c      	ldrb	r4, [r3, #0]
 8005a6e:	428c      	cmp	r4, r1
 8005a70:	f100 0001 	add.w	r0, r0, #1
 8005a74:	d1f7      	bne.n	8005a66 <memchr+0x6>
 8005a76:	4618      	mov	r0, r3
 8005a78:	bd10      	pop	{r4, pc}
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	bd10      	pop	{r4, pc}

08005a7e <_Balloc>:
 8005a7e:	b570      	push	{r4, r5, r6, lr}
 8005a80:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a82:	4604      	mov	r4, r0
 8005a84:	460e      	mov	r6, r1
 8005a86:	b93d      	cbnz	r5, 8005a98 <_Balloc+0x1a>
 8005a88:	2010      	movs	r0, #16
 8005a8a:	f7ff ffe1 	bl	8005a50 <malloc>
 8005a8e:	6260      	str	r0, [r4, #36]	; 0x24
 8005a90:	6045      	str	r5, [r0, #4]
 8005a92:	6085      	str	r5, [r0, #8]
 8005a94:	6005      	str	r5, [r0, #0]
 8005a96:	60c5      	str	r5, [r0, #12]
 8005a98:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a9a:	68eb      	ldr	r3, [r5, #12]
 8005a9c:	b143      	cbz	r3, 8005ab0 <_Balloc+0x32>
 8005a9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005aa6:	b178      	cbz	r0, 8005ac8 <_Balloc+0x4a>
 8005aa8:	6802      	ldr	r2, [r0, #0]
 8005aaa:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005aae:	e017      	b.n	8005ae0 <_Balloc+0x62>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	2104      	movs	r1, #4
 8005ab4:	2221      	movs	r2, #33	; 0x21
 8005ab6:	f000 fac1 	bl	800603c <_calloc_r>
 8005aba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005abc:	60e8      	str	r0, [r5, #12]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1ec      	bne.n	8005a9e <_Balloc+0x20>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	bd70      	pop	{r4, r5, r6, pc}
 8005ac8:	2101      	movs	r1, #1
 8005aca:	fa01 f506 	lsl.w	r5, r1, r6
 8005ace:	1d6a      	adds	r2, r5, #5
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	f000 fab2 	bl	800603c <_calloc_r>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d0f3      	beq.n	8005ac4 <_Balloc+0x46>
 8005adc:	6046      	str	r6, [r0, #4]
 8005ade:	6085      	str	r5, [r0, #8]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	6103      	str	r3, [r0, #16]
 8005ae4:	60c3      	str	r3, [r0, #12]
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}

08005ae8 <_Bfree>:
 8005ae8:	b570      	push	{r4, r5, r6, lr}
 8005aea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005aec:	4606      	mov	r6, r0
 8005aee:	460d      	mov	r5, r1
 8005af0:	b93c      	cbnz	r4, 8005b02 <_Bfree+0x1a>
 8005af2:	2010      	movs	r0, #16
 8005af4:	f7ff ffac 	bl	8005a50 <malloc>
 8005af8:	6270      	str	r0, [r6, #36]	; 0x24
 8005afa:	6044      	str	r4, [r0, #4]
 8005afc:	6084      	str	r4, [r0, #8]
 8005afe:	6004      	str	r4, [r0, #0]
 8005b00:	60c4      	str	r4, [r0, #12]
 8005b02:	b13d      	cbz	r5, 8005b14 <_Bfree+0x2c>
 8005b04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005b06:	686a      	ldr	r2, [r5, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b0e:	6029      	str	r1, [r5, #0]
 8005b10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005b14:	bd70      	pop	{r4, r5, r6, pc}

08005b16 <__multadd>:
 8005b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b1a:	690f      	ldr	r7, [r1, #16]
 8005b1c:	4698      	mov	r8, r3
 8005b1e:	4606      	mov	r6, r0
 8005b20:	460c      	mov	r4, r1
 8005b22:	f101 0e14 	add.w	lr, r1, #20
 8005b26:	2300      	movs	r3, #0
 8005b28:	f8de 0000 	ldr.w	r0, [lr]
 8005b2c:	b285      	uxth	r5, r0
 8005b2e:	0c01      	lsrs	r1, r0, #16
 8005b30:	fb02 8505 	mla	r5, r2, r5, r8
 8005b34:	4351      	muls	r1, r2
 8005b36:	eb01 4115 	add.w	r1, r1, r5, lsr #16
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	b2ad      	uxth	r5, r5
 8005b3e:	ea4f 4811 	mov.w	r8, r1, lsr #16
 8005b42:	42bb      	cmp	r3, r7
 8005b44:	eb05 4101 	add.w	r1, r5, r1, lsl #16
 8005b48:	f84e 1b04 	str.w	r1, [lr], #4
 8005b4c:	dbec      	blt.n	8005b28 <__multadd+0x12>
 8005b4e:	f1b8 0f00 	cmp.w	r8, #0
 8005b52:	d01b      	beq.n	8005b8c <__multadd+0x76>
 8005b54:	68a3      	ldr	r3, [r4, #8]
 8005b56:	429f      	cmp	r7, r3
 8005b58:	db12      	blt.n	8005b80 <__multadd+0x6a>
 8005b5a:	6861      	ldr	r1, [r4, #4]
 8005b5c:	4630      	mov	r0, r6
 8005b5e:	3101      	adds	r1, #1
 8005b60:	f7ff ff8d 	bl	8005a7e <_Balloc>
 8005b64:	6922      	ldr	r2, [r4, #16]
 8005b66:	3202      	adds	r2, #2
 8005b68:	f104 010c 	add.w	r1, r4, #12
 8005b6c:	4605      	mov	r5, r0
 8005b6e:	0092      	lsls	r2, r2, #2
 8005b70:	300c      	adds	r0, #12
 8005b72:	f7fe fb73 	bl	800425c <memcpy>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f7ff ffb5 	bl	8005ae8 <_Bfree>
 8005b7e:	462c      	mov	r4, r5
 8005b80:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 8005b84:	3701      	adds	r7, #1
 8005b86:	f8c3 8014 	str.w	r8, [r3, #20]
 8005b8a:	6127      	str	r7, [r4, #16]
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b92 <__hi0bits>:
 8005b92:	0c03      	lsrs	r3, r0, #16
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	b913      	cbnz	r3, 8005b9e <__hi0bits+0xc>
 8005b98:	0400      	lsls	r0, r0, #16
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	e000      	b.n	8005ba0 <__hi0bits+0xe>
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005ba4:	bf04      	itt	eq
 8005ba6:	0200      	lsleq	r0, r0, #8
 8005ba8:	3308      	addeq	r3, #8
 8005baa:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005bae:	bf04      	itt	eq
 8005bb0:	0100      	lsleq	r0, r0, #4
 8005bb2:	3304      	addeq	r3, #4
 8005bb4:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005bb8:	bf04      	itt	eq
 8005bba:	0080      	lsleq	r0, r0, #2
 8005bbc:	3302      	addeq	r3, #2
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	db03      	blt.n	8005bca <__hi0bits+0x38>
 8005bc2:	0042      	lsls	r2, r0, #1
 8005bc4:	d503      	bpl.n	8005bce <__hi0bits+0x3c>
 8005bc6:	1c58      	adds	r0, r3, #1
 8005bc8:	4770      	bx	lr
 8005bca:	4618      	mov	r0, r3
 8005bcc:	4770      	bx	lr
 8005bce:	2020      	movs	r0, #32
 8005bd0:	4770      	bx	lr

08005bd2 <__lo0bits>:
 8005bd2:	6803      	ldr	r3, [r0, #0]
 8005bd4:	f013 0207 	ands.w	r2, r3, #7
 8005bd8:	d00b      	beq.n	8005bf2 <__lo0bits+0x20>
 8005bda:	07d9      	lsls	r1, r3, #31
 8005bdc:	d422      	bmi.n	8005c24 <__lo0bits+0x52>
 8005bde:	079a      	lsls	r2, r3, #30
 8005be0:	bf4b      	itete	mi
 8005be2:	085b      	lsrmi	r3, r3, #1
 8005be4:	089b      	lsrpl	r3, r3, #2
 8005be6:	6003      	strmi	r3, [r0, #0]
 8005be8:	6003      	strpl	r3, [r0, #0]
 8005bea:	bf4c      	ite	mi
 8005bec:	2001      	movmi	r0, #1
 8005bee:	2002      	movpl	r0, #2
 8005bf0:	4770      	bx	lr
 8005bf2:	b299      	uxth	r1, r3
 8005bf4:	b909      	cbnz	r1, 8005bfa <__lo0bits+0x28>
 8005bf6:	0c1b      	lsrs	r3, r3, #16
 8005bf8:	2210      	movs	r2, #16
 8005bfa:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005bfe:	bf04      	itt	eq
 8005c00:	0a1b      	lsreq	r3, r3, #8
 8005c02:	3208      	addeq	r2, #8
 8005c04:	0719      	lsls	r1, r3, #28
 8005c06:	bf04      	itt	eq
 8005c08:	091b      	lsreq	r3, r3, #4
 8005c0a:	3204      	addeq	r2, #4
 8005c0c:	0799      	lsls	r1, r3, #30
 8005c0e:	bf04      	itt	eq
 8005c10:	089b      	lsreq	r3, r3, #2
 8005c12:	3202      	addeq	r2, #2
 8005c14:	07d9      	lsls	r1, r3, #31
 8005c16:	d402      	bmi.n	8005c1e <__lo0bits+0x4c>
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	d005      	beq.n	8005c28 <__lo0bits+0x56>
 8005c1c:	3201      	adds	r2, #1
 8005c1e:	6003      	str	r3, [r0, #0]
 8005c20:	4610      	mov	r0, r2
 8005c22:	4770      	bx	lr
 8005c24:	2000      	movs	r0, #0
 8005c26:	4770      	bx	lr
 8005c28:	2020      	movs	r0, #32
 8005c2a:	4770      	bx	lr

08005c2c <__i2b>:
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	460c      	mov	r4, r1
 8005c30:	2101      	movs	r1, #1
 8005c32:	f7ff ff24 	bl	8005a7e <_Balloc>
 8005c36:	2201      	movs	r2, #1
 8005c38:	6144      	str	r4, [r0, #20]
 8005c3a:	6102      	str	r2, [r0, #16]
 8005c3c:	bd10      	pop	{r4, pc}

08005c3e <__multiply>:
 8005c3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c42:	4614      	mov	r4, r2
 8005c44:	690a      	ldr	r2, [r1, #16]
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	bfb8      	it	lt
 8005c4c:	460b      	movlt	r3, r1
 8005c4e:	4688      	mov	r8, r1
 8005c50:	bfbc      	itt	lt
 8005c52:	46a0      	movlt	r8, r4
 8005c54:	461c      	movlt	r4, r3
 8005c56:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c5a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c62:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c66:	eb07 0609 	add.w	r6, r7, r9
 8005c6a:	429e      	cmp	r6, r3
 8005c6c:	bfc8      	it	gt
 8005c6e:	3101      	addgt	r1, #1
 8005c70:	f7ff ff05 	bl	8005a7e <_Balloc>
 8005c74:	f100 0514 	add.w	r5, r0, #20
 8005c78:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	4563      	cmp	r3, ip
 8005c80:	d203      	bcs.n	8005c8a <__multiply+0x4c>
 8005c82:	2200      	movs	r2, #0
 8005c84:	f843 2b04 	str.w	r2, [r3], #4
 8005c88:	e7f9      	b.n	8005c7e <__multiply+0x40>
 8005c8a:	f104 0214 	add.w	r2, r4, #20
 8005c8e:	f108 0114 	add.w	r1, r8, #20
 8005c92:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005c96:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	9b00      	ldr	r3, [sp, #0]
 8005c9e:	9201      	str	r2, [sp, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d257      	bcs.n	8005d54 <__multiply+0x116>
 8005ca4:	f8b2 b000 	ldrh.w	fp, [r2]
 8005ca8:	f1bb 0f00 	cmp.w	fp, #0
 8005cac:	d023      	beq.n	8005cf6 <__multiply+0xb8>
 8005cae:	4689      	mov	r9, r1
 8005cb0:	46ae      	mov	lr, r5
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	f859 4b04 	ldr.w	r4, [r9], #4
 8005cba:	f8be a000 	ldrh.w	sl, [lr]
 8005cbe:	b2a3      	uxth	r3, r4
 8005cc0:	fb0b a303 	mla	r3, fp, r3, sl
 8005cc4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cc8:	f8de 4000 	ldr.w	r4, [lr]
 8005ccc:	4443      	add	r3, r8
 8005cce:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005cd2:	fb0b 840a 	mla	r4, fp, sl, r8
 8005cd6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005cda:	46f2      	mov	sl, lr
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005ce2:	454f      	cmp	r7, r9
 8005ce4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005ce8:	f84a 3b04 	str.w	r3, [sl], #4
 8005cec:	d901      	bls.n	8005cf2 <__multiply+0xb4>
 8005cee:	46d6      	mov	lr, sl
 8005cf0:	e7e1      	b.n	8005cb6 <__multiply+0x78>
 8005cf2:	f8ce 8004 	str.w	r8, [lr, #4]
 8005cf6:	9b01      	ldr	r3, [sp, #4]
 8005cf8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005cfc:	3204      	adds	r2, #4
 8005cfe:	f1ba 0f00 	cmp.w	sl, #0
 8005d02:	d021      	beq.n	8005d48 <__multiply+0x10a>
 8005d04:	682b      	ldr	r3, [r5, #0]
 8005d06:	462c      	mov	r4, r5
 8005d08:	4689      	mov	r9, r1
 8005d0a:	f04f 0800 	mov.w	r8, #0
 8005d0e:	f8b9 e000 	ldrh.w	lr, [r9]
 8005d12:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8005d16:	fb0a be0e 	mla	lr, sl, lr, fp
 8005d1a:	44f0      	add	r8, lr
 8005d1c:	46a3      	mov	fp, r4
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8005d24:	f84b 3b04 	str.w	r3, [fp], #4
 8005d28:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d2c:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 8005d30:	0c1b      	lsrs	r3, r3, #16
 8005d32:	fb0a e303 	mla	r3, sl, r3, lr
 8005d36:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8005d3a:	45b9      	cmp	r9, r7
 8005d3c:	ea4f 4813 	mov.w	r8, r3, lsr #16
 8005d40:	d201      	bcs.n	8005d46 <__multiply+0x108>
 8005d42:	465c      	mov	r4, fp
 8005d44:	e7e3      	b.n	8005d0e <__multiply+0xd0>
 8005d46:	6063      	str	r3, [r4, #4]
 8005d48:	3504      	adds	r5, #4
 8005d4a:	e7a7      	b.n	8005c9c <__multiply+0x5e>
 8005d4c:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 8005d50:	b913      	cbnz	r3, 8005d58 <__multiply+0x11a>
 8005d52:	3e01      	subs	r6, #1
 8005d54:	2e00      	cmp	r6, #0
 8005d56:	dcf9      	bgt.n	8005d4c <__multiply+0x10e>
 8005d58:	6106      	str	r6, [r0, #16]
 8005d5a:	b003      	add	sp, #12
 8005d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005d60 <__pow5mult>:
 8005d60:	f012 0303 	ands.w	r3, r2, #3
 8005d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d68:	4606      	mov	r6, r0
 8005d6a:	460f      	mov	r7, r1
 8005d6c:	4615      	mov	r5, r2
 8005d6e:	d007      	beq.n	8005d80 <__pow5mult+0x20>
 8005d70:	3b01      	subs	r3, #1
 8005d72:	4a21      	ldr	r2, [pc, #132]	; (8005df8 <__pow5mult+0x98>)
 8005d74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f7ff fecc 	bl	8005b16 <__multadd>
 8005d7e:	4607      	mov	r7, r0
 8005d80:	10ad      	asrs	r5, r5, #2
 8005d82:	d035      	beq.n	8005df0 <__pow5mult+0x90>
 8005d84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d86:	b93c      	cbnz	r4, 8005d98 <__pow5mult+0x38>
 8005d88:	2010      	movs	r0, #16
 8005d8a:	f7ff fe61 	bl	8005a50 <malloc>
 8005d8e:	6270      	str	r0, [r6, #36]	; 0x24
 8005d90:	6044      	str	r4, [r0, #4]
 8005d92:	6084      	str	r4, [r0, #8]
 8005d94:	6004      	str	r4, [r0, #0]
 8005d96:	60c4      	str	r4, [r0, #12]
 8005d98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005da0:	b97c      	cbnz	r4, 8005dc2 <__pow5mult+0x62>
 8005da2:	4630      	mov	r0, r6
 8005da4:	f240 2171 	movw	r1, #625	; 0x271
 8005da8:	f7ff ff40 	bl	8005c2c <__i2b>
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c8 0008 	str.w	r0, [r8, #8]
 8005db2:	4604      	mov	r4, r0
 8005db4:	6003      	str	r3, [r0, #0]
 8005db6:	e004      	b.n	8005dc2 <__pow5mult+0x62>
 8005db8:	106d      	asrs	r5, r5, #1
 8005dba:	d019      	beq.n	8005df0 <__pow5mult+0x90>
 8005dbc:	6820      	ldr	r0, [r4, #0]
 8005dbe:	b170      	cbz	r0, 8005dde <__pow5mult+0x7e>
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	07eb      	lsls	r3, r5, #31
 8005dc4:	d5f8      	bpl.n	8005db8 <__pow5mult+0x58>
 8005dc6:	4639      	mov	r1, r7
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4630      	mov	r0, r6
 8005dcc:	f7ff ff37 	bl	8005c3e <__multiply>
 8005dd0:	4639      	mov	r1, r7
 8005dd2:	4680      	mov	r8, r0
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f7ff fe87 	bl	8005ae8 <_Bfree>
 8005dda:	4647      	mov	r7, r8
 8005ddc:	e7ec      	b.n	8005db8 <__pow5mult+0x58>
 8005dde:	4630      	mov	r0, r6
 8005de0:	4621      	mov	r1, r4
 8005de2:	4622      	mov	r2, r4
 8005de4:	f7ff ff2b 	bl	8005c3e <__multiply>
 8005de8:	2300      	movs	r3, #0
 8005dea:	6020      	str	r0, [r4, #0]
 8005dec:	6003      	str	r3, [r0, #0]
 8005dee:	e7e7      	b.n	8005dc0 <__pow5mult+0x60>
 8005df0:	4638      	mov	r0, r7
 8005df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005df6:	bf00      	nop
 8005df8:	08006d38 	.word	0x08006d38

08005dfc <__lshift>:
 8005dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e00:	460c      	mov	r4, r1
 8005e02:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	6849      	ldr	r1, [r1, #4]
 8005e0a:	eb0a 0903 	add.w	r9, sl, r3
 8005e0e:	68a3      	ldr	r3, [r4, #8]
 8005e10:	4607      	mov	r7, r0
 8005e12:	4616      	mov	r6, r2
 8005e14:	f109 0501 	add.w	r5, r9, #1
 8005e18:	429d      	cmp	r5, r3
 8005e1a:	dd02      	ble.n	8005e22 <__lshift+0x26>
 8005e1c:	3101      	adds	r1, #1
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	e7fa      	b.n	8005e18 <__lshift+0x1c>
 8005e22:	4638      	mov	r0, r7
 8005e24:	f7ff fe2b 	bl	8005a7e <_Balloc>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4680      	mov	r8, r0
 8005e2c:	f100 0114 	add.w	r1, r0, #20
 8005e30:	4553      	cmp	r3, sl
 8005e32:	da04      	bge.n	8005e3e <__lshift+0x42>
 8005e34:	2200      	movs	r2, #0
 8005e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	e7f8      	b.n	8005e30 <__lshift+0x34>
 8005e3e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8005e42:	6920      	ldr	r0, [r4, #16]
 8005e44:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005e48:	f016 021f 	ands.w	r2, r6, #31
 8005e4c:	f104 0114 	add.w	r1, r4, #20
 8005e50:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8005e54:	d014      	beq.n	8005e80 <__lshift+0x84>
 8005e56:	f1c2 0c20 	rsb	ip, r2, #32
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	680e      	ldr	r6, [r1, #0]
 8005e5e:	4096      	lsls	r6, r2
 8005e60:	4330      	orrs	r0, r6
 8005e62:	469a      	mov	sl, r3
 8005e64:	f843 0b04 	str.w	r0, [r3], #4
 8005e68:	f851 0b04 	ldr.w	r0, [r1], #4
 8005e6c:	4571      	cmp	r1, lr
 8005e6e:	fa20 f00c 	lsr.w	r0, r0, ip
 8005e72:	d3f3      	bcc.n	8005e5c <__lshift+0x60>
 8005e74:	f8ca 0004 	str.w	r0, [sl, #4]
 8005e78:	b148      	cbz	r0, 8005e8e <__lshift+0x92>
 8005e7a:	f109 0502 	add.w	r5, r9, #2
 8005e7e:	e006      	b.n	8005e8e <__lshift+0x92>
 8005e80:	3b04      	subs	r3, #4
 8005e82:	f851 2b04 	ldr.w	r2, [r1], #4
 8005e86:	f843 2f04 	str.w	r2, [r3, #4]!
 8005e8a:	4571      	cmp	r1, lr
 8005e8c:	d3f9      	bcc.n	8005e82 <__lshift+0x86>
 8005e8e:	3d01      	subs	r5, #1
 8005e90:	4638      	mov	r0, r7
 8005e92:	f8c8 5010 	str.w	r5, [r8, #16]
 8005e96:	4621      	mov	r1, r4
 8005e98:	f7ff fe26 	bl	8005ae8 <_Bfree>
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005ea2 <__mcmp>:
 8005ea2:	6903      	ldr	r3, [r0, #16]
 8005ea4:	690a      	ldr	r2, [r1, #16]
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	b510      	push	{r4, lr}
 8005eaa:	d111      	bne.n	8005ed0 <__mcmp+0x2e>
 8005eac:	0092      	lsls	r2, r2, #2
 8005eae:	3014      	adds	r0, #20
 8005eb0:	3114      	adds	r1, #20
 8005eb2:	1883      	adds	r3, r0, r2
 8005eb4:	440a      	add	r2, r1
 8005eb6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8005eba:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ebe:	428c      	cmp	r4, r1
 8005ec0:	d002      	beq.n	8005ec8 <__mcmp+0x26>
 8005ec2:	d307      	bcc.n	8005ed4 <__mcmp+0x32>
 8005ec4:	2001      	movs	r0, #1
 8005ec6:	bd10      	pop	{r4, pc}
 8005ec8:	4283      	cmp	r3, r0
 8005eca:	d8f4      	bhi.n	8005eb6 <__mcmp+0x14>
 8005ecc:	2000      	movs	r0, #0
 8005ece:	bd10      	pop	{r4, pc}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	bd10      	pop	{r4, pc}
 8005ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed8:	bd10      	pop	{r4, pc}

08005eda <__mdiff>:
 8005eda:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ede:	4607      	mov	r7, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	4608      	mov	r0, r1
 8005ee4:	4611      	mov	r1, r2
 8005ee6:	4615      	mov	r5, r2
 8005ee8:	f7ff ffdb 	bl	8005ea2 <__mcmp>
 8005eec:	1e06      	subs	r6, r0, #0
 8005eee:	d108      	bne.n	8005f02 <__mdiff+0x28>
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	f7ff fdc3 	bl	8005a7e <_Balloc>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	6103      	str	r3, [r0, #16]
 8005efc:	6146      	str	r6, [r0, #20]
 8005efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f02:	bfbc      	itt	lt
 8005f04:	4623      	movlt	r3, r4
 8005f06:	462c      	movlt	r4, r5
 8005f08:	4638      	mov	r0, r7
 8005f0a:	6861      	ldr	r1, [r4, #4]
 8005f0c:	bfba      	itte	lt
 8005f0e:	461d      	movlt	r5, r3
 8005f10:	2601      	movlt	r6, #1
 8005f12:	2600      	movge	r6, #0
 8005f14:	f7ff fdb3 	bl	8005a7e <_Balloc>
 8005f18:	692b      	ldr	r3, [r5, #16]
 8005f1a:	60c6      	str	r6, [r0, #12]
 8005f1c:	6926      	ldr	r6, [r4, #16]
 8005f1e:	f105 0914 	add.w	r9, r5, #20
 8005f22:	3414      	adds	r4, #20
 8005f24:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8005f28:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f2c:	f100 0514 	add.w	r5, r0, #20
 8005f30:	f04f 0c00 	mov.w	ip, #0
 8005f34:	f854 3b04 	ldr.w	r3, [r4], #4
 8005f38:	f859 2b04 	ldr.w	r2, [r9], #4
 8005f3c:	fa1c f183 	uxtah	r1, ip, r3
 8005f40:	fa1f fe82 	uxth.w	lr, r2
 8005f44:	0c12      	lsrs	r2, r2, #16
 8005f46:	ebce 0101 	rsb	r1, lr, r1
 8005f4a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 8005f4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f52:	b289      	uxth	r1, r1
 8005f54:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f58:	45c8      	cmp	r8, r9
 8005f5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f5e:	46a6      	mov	lr, r4
 8005f60:	f845 3b04 	str.w	r3, [r5], #4
 8005f64:	d8e6      	bhi.n	8005f34 <__mdiff+0x5a>
 8005f66:	45be      	cmp	lr, r7
 8005f68:	d20e      	bcs.n	8005f88 <__mdiff+0xae>
 8005f6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005f6e:	fa1c f482 	uxtah	r4, ip, r2
 8005f72:	0c12      	lsrs	r2, r2, #16
 8005f74:	eb02 4224 	add.w	r2, r2, r4, asr #16
 8005f78:	b2a4      	uxth	r4, r4
 8005f7a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005f7e:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8005f82:	f845 2b04 	str.w	r2, [r5], #4
 8005f86:	e7ee      	b.n	8005f66 <__mdiff+0x8c>
 8005f88:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005f8c:	b90b      	cbnz	r3, 8005f92 <__mdiff+0xb8>
 8005f8e:	3e01      	subs	r6, #1
 8005f90:	e7fa      	b.n	8005f88 <__mdiff+0xae>
 8005f92:	6106      	str	r6, [r0, #16]
 8005f94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005f98 <__d2b>:
 8005f98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f9c:	2101      	movs	r1, #1
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	9f08      	ldr	r7, [sp, #32]
 8005fa2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8005fa4:	4614      	mov	r4, r2
 8005fa6:	f7ff fd6a 	bl	8005a7e <_Balloc>
 8005faa:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005fae:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005fb2:	4680      	mov	r8, r0
 8005fb4:	b10d      	cbz	r5, 8005fba <__d2b+0x22>
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	b1ec      	cbz	r4, 8005ffa <__d2b+0x62>
 8005fbe:	a802      	add	r0, sp, #8
 8005fc0:	f840 4d08 	str.w	r4, [r0, #-8]!
 8005fc4:	f7ff fe05 	bl	8005bd2 <__lo0bits>
 8005fc8:	9b00      	ldr	r3, [sp, #0]
 8005fca:	b150      	cbz	r0, 8005fe2 <__d2b+0x4a>
 8005fcc:	9a01      	ldr	r2, [sp, #4]
 8005fce:	f1c0 0120 	rsb	r1, r0, #32
 8005fd2:	fa02 f101 	lsl.w	r1, r2, r1
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	40c2      	lsrs	r2, r0
 8005fda:	f8c8 3014 	str.w	r3, [r8, #20]
 8005fde:	9201      	str	r2, [sp, #4]
 8005fe0:	e001      	b.n	8005fe6 <__d2b+0x4e>
 8005fe2:	f8c8 3014 	str.w	r3, [r8, #20]
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	f8c8 3018 	str.w	r3, [r8, #24]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	bf14      	ite	ne
 8005ff0:	2402      	movne	r4, #2
 8005ff2:	2401      	moveq	r4, #1
 8005ff4:	f8c8 4010 	str.w	r4, [r8, #16]
 8005ff8:	e009      	b.n	800600e <__d2b+0x76>
 8005ffa:	a801      	add	r0, sp, #4
 8005ffc:	f7ff fde9 	bl	8005bd2 <__lo0bits>
 8006000:	2401      	movs	r4, #1
 8006002:	9b01      	ldr	r3, [sp, #4]
 8006004:	f8c8 3014 	str.w	r3, [r8, #20]
 8006008:	f8c8 4010 	str.w	r4, [r8, #16]
 800600c:	3020      	adds	r0, #32
 800600e:	b135      	cbz	r5, 800601e <__d2b+0x86>
 8006010:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006014:	4405      	add	r5, r0
 8006016:	603d      	str	r5, [r7, #0]
 8006018:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800601c:	e009      	b.n	8006032 <__d2b+0x9a>
 800601e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8006022:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006026:	6038      	str	r0, [r7, #0]
 8006028:	6918      	ldr	r0, [r3, #16]
 800602a:	f7ff fdb2 	bl	8005b92 <__hi0bits>
 800602e:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8006032:	6030      	str	r0, [r6, #0]
 8006034:	4640      	mov	r0, r8
 8006036:	b002      	add	sp, #8
 8006038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800603c <_calloc_r>:
 800603c:	b538      	push	{r3, r4, r5, lr}
 800603e:	fb02 f401 	mul.w	r4, r2, r1
 8006042:	4621      	mov	r1, r4
 8006044:	f000 f84c 	bl	80060e0 <_malloc_r>
 8006048:	4605      	mov	r5, r0
 800604a:	b118      	cbz	r0, 8006054 <_calloc_r+0x18>
 800604c:	2100      	movs	r1, #0
 800604e:	4622      	mov	r2, r4
 8006050:	f7fe f90f 	bl	8004272 <memset>
 8006054:	4628      	mov	r0, r5
 8006056:	bd38      	pop	{r3, r4, r5, pc}

08006058 <_free_r>:
 8006058:	b530      	push	{r4, r5, lr}
 800605a:	2900      	cmp	r1, #0
 800605c:	d03d      	beq.n	80060da <_free_r+0x82>
 800605e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8006062:	1f0b      	subs	r3, r1, #4
 8006064:	491d      	ldr	r1, [pc, #116]	; (80060dc <_free_r+0x84>)
 8006066:	2a00      	cmp	r2, #0
 8006068:	bfb8      	it	lt
 800606a:	189b      	addlt	r3, r3, r2
 800606c:	680a      	ldr	r2, [r1, #0]
 800606e:	460c      	mov	r4, r1
 8006070:	b912      	cbnz	r2, 8006078 <_free_r+0x20>
 8006072:	605a      	str	r2, [r3, #4]
 8006074:	600b      	str	r3, [r1, #0]
 8006076:	bd30      	pop	{r4, r5, pc}
 8006078:	4293      	cmp	r3, r2
 800607a:	d20d      	bcs.n	8006098 <_free_r+0x40>
 800607c:	6819      	ldr	r1, [r3, #0]
 800607e:	1858      	adds	r0, r3, r1
 8006080:	4290      	cmp	r0, r2
 8006082:	bf01      	itttt	eq
 8006084:	585a      	ldreq	r2, [r3, r1]
 8006086:	1852      	addeq	r2, r2, r1
 8006088:	601a      	streq	r2, [r3, #0]
 800608a:	6842      	ldreq	r2, [r0, #4]
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	6023      	str	r3, [r4, #0]
 8006090:	bd30      	pop	{r4, r5, pc}
 8006092:	4299      	cmp	r1, r3
 8006094:	d803      	bhi.n	800609e <_free_r+0x46>
 8006096:	460a      	mov	r2, r1
 8006098:	6851      	ldr	r1, [r2, #4]
 800609a:	2900      	cmp	r1, #0
 800609c:	d1f9      	bne.n	8006092 <_free_r+0x3a>
 800609e:	6814      	ldr	r4, [r2, #0]
 80060a0:	1915      	adds	r5, r2, r4
 80060a2:	429d      	cmp	r5, r3
 80060a4:	d10a      	bne.n	80060bc <_free_r+0x64>
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4423      	add	r3, r4
 80060aa:	18d0      	adds	r0, r2, r3
 80060ac:	4288      	cmp	r0, r1
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	d113      	bne.n	80060da <_free_r+0x82>
 80060b2:	6808      	ldr	r0, [r1, #0]
 80060b4:	4403      	add	r3, r0
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	684b      	ldr	r3, [r1, #4]
 80060ba:	e00d      	b.n	80060d8 <_free_r+0x80>
 80060bc:	d902      	bls.n	80060c4 <_free_r+0x6c>
 80060be:	230c      	movs	r3, #12
 80060c0:	6003      	str	r3, [r0, #0]
 80060c2:	bd30      	pop	{r4, r5, pc}
 80060c4:	681c      	ldr	r4, [r3, #0]
 80060c6:	1918      	adds	r0, r3, r4
 80060c8:	4288      	cmp	r0, r1
 80060ca:	bf04      	itt	eq
 80060cc:	6808      	ldreq	r0, [r1, #0]
 80060ce:	6849      	ldreq	r1, [r1, #4]
 80060d0:	6059      	str	r1, [r3, #4]
 80060d2:	bf04      	itt	eq
 80060d4:	1900      	addeq	r0, r0, r4
 80060d6:	6018      	streq	r0, [r3, #0]
 80060d8:	6053      	str	r3, [r2, #4]
 80060da:	bd30      	pop	{r4, r5, pc}
 80060dc:	1ffe8950 	.word	0x1ffe8950

080060e0 <_malloc_r>:
 80060e0:	b570      	push	{r4, r5, r6, lr}
 80060e2:	1ccc      	adds	r4, r1, #3
 80060e4:	f024 0403 	bic.w	r4, r4, #3
 80060e8:	3408      	adds	r4, #8
 80060ea:	2c0c      	cmp	r4, #12
 80060ec:	bf38      	it	cc
 80060ee:	240c      	movcc	r4, #12
 80060f0:	2c00      	cmp	r4, #0
 80060f2:	4606      	mov	r6, r0
 80060f4:	da03      	bge.n	80060fe <_malloc_r+0x1e>
 80060f6:	230c      	movs	r3, #12
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	2000      	movs	r0, #0
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	428c      	cmp	r4, r1
 8006100:	d3f9      	bcc.n	80060f6 <_malloc_r+0x16>
 8006102:	4a20      	ldr	r2, [pc, #128]	; (8006184 <_malloc_r+0xa4>)
 8006104:	6813      	ldr	r3, [r2, #0]
 8006106:	4610      	mov	r0, r2
 8006108:	4619      	mov	r1, r3
 800610a:	b1a1      	cbz	r1, 8006136 <_malloc_r+0x56>
 800610c:	680a      	ldr	r2, [r1, #0]
 800610e:	1b12      	subs	r2, r2, r4
 8006110:	d40e      	bmi.n	8006130 <_malloc_r+0x50>
 8006112:	2a0b      	cmp	r2, #11
 8006114:	d903      	bls.n	800611e <_malloc_r+0x3e>
 8006116:	600a      	str	r2, [r1, #0]
 8006118:	188b      	adds	r3, r1, r2
 800611a:	508c      	str	r4, [r1, r2]
 800611c:	e01f      	b.n	800615e <_malloc_r+0x7e>
 800611e:	428b      	cmp	r3, r1
 8006120:	bf0d      	iteet	eq
 8006122:	685a      	ldreq	r2, [r3, #4]
 8006124:	684a      	ldrne	r2, [r1, #4]
 8006126:	605a      	strne	r2, [r3, #4]
 8006128:	6002      	streq	r2, [r0, #0]
 800612a:	bf18      	it	ne
 800612c:	460b      	movne	r3, r1
 800612e:	e016      	b.n	800615e <_malloc_r+0x7e>
 8006130:	460b      	mov	r3, r1
 8006132:	6849      	ldr	r1, [r1, #4]
 8006134:	e7e9      	b.n	800610a <_malloc_r+0x2a>
 8006136:	4d14      	ldr	r5, [pc, #80]	; (8006188 <_malloc_r+0xa8>)
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b91b      	cbnz	r3, 8006144 <_malloc_r+0x64>
 800613c:	4630      	mov	r0, r6
 800613e:	f000 f955 	bl	80063ec <_sbrk_r>
 8006142:	6028      	str	r0, [r5, #0]
 8006144:	4630      	mov	r0, r6
 8006146:	4621      	mov	r1, r4
 8006148:	f000 f950 	bl	80063ec <_sbrk_r>
 800614c:	1c42      	adds	r2, r0, #1
 800614e:	4603      	mov	r3, r0
 8006150:	d0d1      	beq.n	80060f6 <_malloc_r+0x16>
 8006152:	1cc5      	adds	r5, r0, #3
 8006154:	f025 0503 	bic.w	r5, r5, #3
 8006158:	4285      	cmp	r5, r0
 800615a:	d10a      	bne.n	8006172 <_malloc_r+0x92>
 800615c:	601c      	str	r4, [r3, #0]
 800615e:	f103 000b 	add.w	r0, r3, #11
 8006162:	1d1a      	adds	r2, r3, #4
 8006164:	f020 0007 	bic.w	r0, r0, #7
 8006168:	1a82      	subs	r2, r0, r2
 800616a:	d00a      	beq.n	8006182 <_malloc_r+0xa2>
 800616c:	4251      	negs	r1, r2
 800616e:	5099      	str	r1, [r3, r2]
 8006170:	bd70      	pop	{r4, r5, r6, pc}
 8006172:	4630      	mov	r0, r6
 8006174:	1ae9      	subs	r1, r5, r3
 8006176:	f000 f939 	bl	80063ec <_sbrk_r>
 800617a:	3001      	adds	r0, #1
 800617c:	d0bb      	beq.n	80060f6 <_malloc_r+0x16>
 800617e:	462b      	mov	r3, r5
 8006180:	e7ec      	b.n	800615c <_malloc_r+0x7c>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	1ffe8950 	.word	0x1ffe8950
 8006188:	1ffe894c 	.word	0x1ffe894c

0800618c <__sfputc_r>:
 800618c:	6893      	ldr	r3, [r2, #8]
 800618e:	3b01      	subs	r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	b510      	push	{r4, lr}
 8006194:	6093      	str	r3, [r2, #8]
 8006196:	da09      	bge.n	80061ac <__sfputc_r+0x20>
 8006198:	6994      	ldr	r4, [r2, #24]
 800619a:	42a3      	cmp	r3, r4
 800619c:	db02      	blt.n	80061a4 <__sfputc_r+0x18>
 800619e:	b2cb      	uxtb	r3, r1
 80061a0:	2b0a      	cmp	r3, #10
 80061a2:	d103      	bne.n	80061ac <__sfputc_r+0x20>
 80061a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061a8:	f000 b974 	b.w	8006494 <__swbuf_r>
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	1c58      	adds	r0, r3, #1
 80061b0:	6010      	str	r0, [r2, #0]
 80061b2:	7019      	strb	r1, [r3, #0]
 80061b4:	b2c8      	uxtb	r0, r1
 80061b6:	bd10      	pop	{r4, pc}

080061b8 <__sfputs_r>:
 80061b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ba:	4606      	mov	r6, r0
 80061bc:	460f      	mov	r7, r1
 80061be:	4614      	mov	r4, r2
 80061c0:	18d5      	adds	r5, r2, r3
 80061c2:	42ac      	cmp	r4, r5
 80061c4:	d008      	beq.n	80061d8 <__sfputs_r+0x20>
 80061c6:	4630      	mov	r0, r6
 80061c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061cc:	463a      	mov	r2, r7
 80061ce:	f7ff ffdd 	bl	800618c <__sfputc_r>
 80061d2:	1c43      	adds	r3, r0, #1
 80061d4:	d1f5      	bne.n	80061c2 <__sfputs_r+0xa>
 80061d6:	e000      	b.n	80061da <__sfputs_r+0x22>
 80061d8:	2000      	movs	r0, #0
 80061da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080061dc <_vfiprintf_r>:
 80061dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061e0:	b09d      	sub	sp, #116	; 0x74
 80061e2:	460d      	mov	r5, r1
 80061e4:	4690      	mov	r8, r2
 80061e6:	9303      	str	r3, [sp, #12]
 80061e8:	4606      	mov	r6, r0
 80061ea:	b118      	cbz	r0, 80061f4 <_vfiprintf_r+0x18>
 80061ec:	6983      	ldr	r3, [r0, #24]
 80061ee:	b90b      	cbnz	r3, 80061f4 <_vfiprintf_r+0x18>
 80061f0:	f7ff fba2 	bl	8005938 <__sinit>
 80061f4:	4b75      	ldr	r3, [pc, #468]	; (80063cc <_vfiprintf_r+0x1f0>)
 80061f6:	429d      	cmp	r5, r3
 80061f8:	d101      	bne.n	80061fe <_vfiprintf_r+0x22>
 80061fa:	6875      	ldr	r5, [r6, #4]
 80061fc:	e008      	b.n	8006210 <_vfiprintf_r+0x34>
 80061fe:	4b74      	ldr	r3, [pc, #464]	; (80063d0 <_vfiprintf_r+0x1f4>)
 8006200:	429d      	cmp	r5, r3
 8006202:	d101      	bne.n	8006208 <_vfiprintf_r+0x2c>
 8006204:	68b5      	ldr	r5, [r6, #8]
 8006206:	e003      	b.n	8006210 <_vfiprintf_r+0x34>
 8006208:	4b72      	ldr	r3, [pc, #456]	; (80063d4 <_vfiprintf_r+0x1f8>)
 800620a:	429d      	cmp	r5, r3
 800620c:	bf08      	it	eq
 800620e:	68f5      	ldreq	r5, [r6, #12]
 8006210:	89ab      	ldrh	r3, [r5, #12]
 8006212:	071c      	lsls	r4, r3, #28
 8006214:	d50a      	bpl.n	800622c <_vfiprintf_r+0x50>
 8006216:	692b      	ldr	r3, [r5, #16]
 8006218:	b143      	cbz	r3, 800622c <_vfiprintf_r+0x50>
 800621a:	2300      	movs	r3, #0
 800621c:	9309      	str	r3, [sp, #36]	; 0x24
 800621e:	2320      	movs	r3, #32
 8006220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006224:	2330      	movs	r3, #48	; 0x30
 8006226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800622a:	e041      	b.n	80062b0 <_vfiprintf_r+0xd4>
 800622c:	4630      	mov	r0, r6
 800622e:	4629      	mov	r1, r5
 8006230:	f000 f996 	bl	8006560 <__swsetup_r>
 8006234:	2800      	cmp	r0, #0
 8006236:	d0f0      	beq.n	800621a <_vfiprintf_r+0x3e>
 8006238:	f04f 30ff 	mov.w	r0, #4294967295
 800623c:	e0c2      	b.n	80063c4 <_vfiprintf_r+0x1e8>
 800623e:	9a03      	ldr	r2, [sp, #12]
 8006240:	1d11      	adds	r1, r2, #4
 8006242:	6812      	ldr	r2, [r2, #0]
 8006244:	9103      	str	r1, [sp, #12]
 8006246:	2a00      	cmp	r2, #0
 8006248:	bfbb      	ittet	lt
 800624a:	4252      	neglt	r2, r2
 800624c:	f043 0302 	orrlt.w	r3, r3, #2
 8006250:	9207      	strge	r2, [sp, #28]
 8006252:	9207      	strlt	r2, [sp, #28]
 8006254:	bfb8      	it	lt
 8006256:	9304      	strlt	r3, [sp, #16]
 8006258:	3401      	adds	r4, #1
 800625a:	7823      	ldrb	r3, [r4, #0]
 800625c:	2b2e      	cmp	r3, #46	; 0x2e
 800625e:	d07b      	beq.n	8006358 <_vfiprintf_r+0x17c>
 8006260:	f8df 8180 	ldr.w	r8, [pc, #384]	; 80063e4 <_vfiprintf_r+0x208>
 8006264:	7821      	ldrb	r1, [r4, #0]
 8006266:	4640      	mov	r0, r8
 8006268:	2203      	movs	r2, #3
 800626a:	f7ff fbf9 	bl	8005a60 <memchr>
 800626e:	b138      	cbz	r0, 8006280 <_vfiprintf_r+0xa4>
 8006270:	9a04      	ldr	r2, [sp, #16]
 8006272:	ebc8 0000 	rsb	r0, r8, r0
 8006276:	2340      	movs	r3, #64	; 0x40
 8006278:	4083      	lsls	r3, r0
 800627a:	4313      	orrs	r3, r2
 800627c:	9304      	str	r3, [sp, #16]
 800627e:	3401      	adds	r4, #1
 8006280:	7821      	ldrb	r1, [r4, #0]
 8006282:	4855      	ldr	r0, [pc, #340]	; (80063d8 <_vfiprintf_r+0x1fc>)
 8006284:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006288:	2206      	movs	r2, #6
 800628a:	f104 0801 	add.w	r8, r4, #1
 800628e:	f7ff fbe7 	bl	8005a60 <memchr>
 8006292:	2800      	cmp	r0, #0
 8006294:	f000 8085 	beq.w	80063a2 <_vfiprintf_r+0x1c6>
 8006298:	4b50      	ldr	r3, [pc, #320]	; (80063dc <_vfiprintf_r+0x200>)
 800629a:	2b00      	cmp	r3, #0
 800629c:	d178      	bne.n	8006390 <_vfiprintf_r+0x1b4>
 800629e:	9b03      	ldr	r3, [sp, #12]
 80062a0:	3307      	adds	r3, #7
 80062a2:	f023 0307 	bic.w	r3, r3, #7
 80062a6:	3308      	adds	r3, #8
 80062a8:	9303      	str	r3, [sp, #12]
 80062aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ac:	443b      	add	r3, r7
 80062ae:	9309      	str	r3, [sp, #36]	; 0x24
 80062b0:	4643      	mov	r3, r8
 80062b2:	461c      	mov	r4, r3
 80062b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062b8:	b91a      	cbnz	r2, 80062c2 <_vfiprintf_r+0xe6>
 80062ba:	ebb4 0908 	subs.w	r9, r4, r8
 80062be:	d00e      	beq.n	80062de <_vfiprintf_r+0x102>
 80062c0:	e002      	b.n	80062c8 <_vfiprintf_r+0xec>
 80062c2:	2a25      	cmp	r2, #37	; 0x25
 80062c4:	d1f5      	bne.n	80062b2 <_vfiprintf_r+0xd6>
 80062c6:	e7f8      	b.n	80062ba <_vfiprintf_r+0xde>
 80062c8:	4630      	mov	r0, r6
 80062ca:	4629      	mov	r1, r5
 80062cc:	4642      	mov	r2, r8
 80062ce:	464b      	mov	r3, r9
 80062d0:	f7ff ff72 	bl	80061b8 <__sfputs_r>
 80062d4:	3001      	adds	r0, #1
 80062d6:	d070      	beq.n	80063ba <_vfiprintf_r+0x1de>
 80062d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062da:	444b      	add	r3, r9
 80062dc:	9309      	str	r3, [sp, #36]	; 0x24
 80062de:	7823      	ldrb	r3, [r4, #0]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d06a      	beq.n	80063ba <_vfiprintf_r+0x1de>
 80062e4:	2300      	movs	r3, #0
 80062e6:	f04f 32ff 	mov.w	r2, #4294967295
 80062ea:	9304      	str	r3, [sp, #16]
 80062ec:	9307      	str	r3, [sp, #28]
 80062ee:	9205      	str	r2, [sp, #20]
 80062f0:	9306      	str	r3, [sp, #24]
 80062f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062f6:	931a      	str	r3, [sp, #104]	; 0x68
 80062f8:	f104 0801 	add.w	r8, r4, #1
 80062fc:	4644      	mov	r4, r8
 80062fe:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 80063e8 <_vfiprintf_r+0x20c>
 8006302:	7821      	ldrb	r1, [r4, #0]
 8006304:	4648      	mov	r0, r9
 8006306:	2205      	movs	r2, #5
 8006308:	f7ff fbaa 	bl	8005a60 <memchr>
 800630c:	f108 0801 	add.w	r8, r8, #1
 8006310:	9b04      	ldr	r3, [sp, #16]
 8006312:	b130      	cbz	r0, 8006322 <_vfiprintf_r+0x146>
 8006314:	ebc9 0000 	rsb	r0, r9, r0
 8006318:	2201      	movs	r2, #1
 800631a:	4082      	lsls	r2, r0
 800631c:	4313      	orrs	r3, r2
 800631e:	9304      	str	r3, [sp, #16]
 8006320:	e7ec      	b.n	80062fc <_vfiprintf_r+0x120>
 8006322:	06d8      	lsls	r0, r3, #27
 8006324:	bf44      	itt	mi
 8006326:	2220      	movmi	r2, #32
 8006328:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800632c:	0719      	lsls	r1, r3, #28
 800632e:	bf44      	itt	mi
 8006330:	222b      	movmi	r2, #43	; 0x2b
 8006332:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006336:	7822      	ldrb	r2, [r4, #0]
 8006338:	2a2a      	cmp	r2, #42	; 0x2a
 800633a:	d080      	beq.n	800623e <_vfiprintf_r+0x62>
 800633c:	9907      	ldr	r1, [sp, #28]
 800633e:	4623      	mov	r3, r4
 8006340:	461c      	mov	r4, r3
 8006342:	3301      	adds	r3, #1
 8006344:	7822      	ldrb	r2, [r4, #0]
 8006346:	3a30      	subs	r2, #48	; 0x30
 8006348:	2a09      	cmp	r2, #9
 800634a:	d803      	bhi.n	8006354 <_vfiprintf_r+0x178>
 800634c:	200a      	movs	r0, #10
 800634e:	fb00 2101 	mla	r1, r0, r1, r2
 8006352:	e7f5      	b.n	8006340 <_vfiprintf_r+0x164>
 8006354:	9107      	str	r1, [sp, #28]
 8006356:	e780      	b.n	800625a <_vfiprintf_r+0x7e>
 8006358:	7863      	ldrb	r3, [r4, #1]
 800635a:	2b2a      	cmp	r3, #42	; 0x2a
 800635c:	d10a      	bne.n	8006374 <_vfiprintf_r+0x198>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	1d1a      	adds	r2, r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	9203      	str	r2, [sp, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	bfb8      	it	lt
 800636a:	f04f 33ff 	movlt.w	r3, #4294967295
 800636e:	3402      	adds	r4, #2
 8006370:	9305      	str	r3, [sp, #20]
 8006372:	e775      	b.n	8006260 <_vfiprintf_r+0x84>
 8006374:	1c61      	adds	r1, r4, #1
 8006376:	2200      	movs	r2, #0
 8006378:	460c      	mov	r4, r1
 800637a:	3101      	adds	r1, #1
 800637c:	7823      	ldrb	r3, [r4, #0]
 800637e:	3b30      	subs	r3, #48	; 0x30
 8006380:	2b09      	cmp	r3, #9
 8006382:	d803      	bhi.n	800638c <_vfiprintf_r+0x1b0>
 8006384:	200a      	movs	r0, #10
 8006386:	fb00 3202 	mla	r2, r0, r2, r3
 800638a:	e7f5      	b.n	8006378 <_vfiprintf_r+0x19c>
 800638c:	9205      	str	r2, [sp, #20]
 800638e:	e767      	b.n	8006260 <_vfiprintf_r+0x84>
 8006390:	ab03      	add	r3, sp, #12
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	4630      	mov	r0, r6
 8006396:	a904      	add	r1, sp, #16
 8006398:	462a      	mov	r2, r5
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <_vfiprintf_r+0x204>)
 800639c:	f7fe f802 	bl	80043a4 <_printf_float>
 80063a0:	e007      	b.n	80063b2 <_vfiprintf_r+0x1d6>
 80063a2:	ab03      	add	r3, sp, #12
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4630      	mov	r0, r6
 80063a8:	a904      	add	r1, sp, #16
 80063aa:	462a      	mov	r2, r5
 80063ac:	4b0c      	ldr	r3, [pc, #48]	; (80063e0 <_vfiprintf_r+0x204>)
 80063ae:	f7fe fab3 	bl	8004918 <_printf_i>
 80063b2:	1c42      	adds	r2, r0, #1
 80063b4:	4607      	mov	r7, r0
 80063b6:	f47f af78 	bne.w	80062aa <_vfiprintf_r+0xce>
 80063ba:	89ab      	ldrh	r3, [r5, #12]
 80063bc:	065b      	lsls	r3, r3, #25
 80063be:	f53f af3b 	bmi.w	8006238 <_vfiprintf_r+0x5c>
 80063c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80063c4:	b01d      	add	sp, #116	; 0x74
 80063c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ca:	bf00      	nop
 80063cc:	08006bdc 	.word	0x08006bdc
 80063d0:	08006bfc 	.word	0x08006bfc
 80063d4:	08006c1c 	.word	0x08006c1c
 80063d8:	08006d4e 	.word	0x08006d4e
 80063dc:	080043a5 	.word	0x080043a5
 80063e0:	080061b9 	.word	0x080061b9
 80063e4:	08006d4a 	.word	0x08006d4a
 80063e8:	08006d44 	.word	0x08006d44

080063ec <_sbrk_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4c06      	ldr	r4, [pc, #24]	; (8006408 <_sbrk_r+0x1c>)
 80063f0:	2300      	movs	r3, #0
 80063f2:	4605      	mov	r5, r0
 80063f4:	4608      	mov	r0, r1
 80063f6:	6023      	str	r3, [r4, #0]
 80063f8:	f7fb f80a 	bl	8001410 <_sbrk>
 80063fc:	1c43      	adds	r3, r0, #1
 80063fe:	d102      	bne.n	8006406 <_sbrk_r+0x1a>
 8006400:	6823      	ldr	r3, [r4, #0]
 8006402:	b103      	cbz	r3, 8006406 <_sbrk_r+0x1a>
 8006404:	602b      	str	r3, [r5, #0]
 8006406:	bd38      	pop	{r3, r4, r5, pc}
 8006408:	1ffe8b8c 	.word	0x1ffe8b8c

0800640c <__sread>:
 800640c:	b510      	push	{r4, lr}
 800640e:	460c      	mov	r4, r1
 8006410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006414:	f000 fa2e 	bl	8006874 <_read_r>
 8006418:	2800      	cmp	r0, #0
 800641a:	bfab      	itete	ge
 800641c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800641e:	89a3      	ldrhlt	r3, [r4, #12]
 8006420:	181b      	addge	r3, r3, r0
 8006422:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006426:	bfac      	ite	ge
 8006428:	6563      	strge	r3, [r4, #84]	; 0x54
 800642a:	81a3      	strhlt	r3, [r4, #12]
 800642c:	bd10      	pop	{r4, pc}

0800642e <__swrite>:
 800642e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006432:	461d      	mov	r5, r3
 8006434:	898b      	ldrh	r3, [r1, #12]
 8006436:	05db      	lsls	r3, r3, #23
 8006438:	4607      	mov	r7, r0
 800643a:	460c      	mov	r4, r1
 800643c:	4616      	mov	r6, r2
 800643e:	d505      	bpl.n	800644c <__swrite+0x1e>
 8006440:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006444:	2200      	movs	r2, #0
 8006446:	2302      	movs	r3, #2
 8006448:	f000 f9b4 	bl	80067b4 <_lseek_r>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006452:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	4638      	mov	r0, r7
 800645a:	4632      	mov	r2, r6
 800645c:	462b      	mov	r3, r5
 800645e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006462:	f000 b86b 	b.w	800653c <_write_r>

08006466 <__sseek>:
 8006466:	b510      	push	{r4, lr}
 8006468:	460c      	mov	r4, r1
 800646a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800646e:	f000 f9a1 	bl	80067b4 <_lseek_r>
 8006472:	1c43      	adds	r3, r0, #1
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	bf15      	itete	ne
 8006478:	6560      	strne	r0, [r4, #84]	; 0x54
 800647a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800647e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006482:	81a3      	strheq	r3, [r4, #12]
 8006484:	bf18      	it	ne
 8006486:	81a3      	strhne	r3, [r4, #12]
 8006488:	bd10      	pop	{r4, pc}

0800648a <__sclose>:
 800648a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800648e:	f000 b8d3 	b.w	8006638 <_close_r>
	...

08006494 <__swbuf_r>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	460d      	mov	r5, r1
 8006498:	4614      	mov	r4, r2
 800649a:	4606      	mov	r6, r0
 800649c:	b118      	cbz	r0, 80064a6 <__swbuf_r+0x12>
 800649e:	6983      	ldr	r3, [r0, #24]
 80064a0:	b90b      	cbnz	r3, 80064a6 <__swbuf_r+0x12>
 80064a2:	f7ff fa49 	bl	8005938 <__sinit>
 80064a6:	4b22      	ldr	r3, [pc, #136]	; (8006530 <__swbuf_r+0x9c>)
 80064a8:	429c      	cmp	r4, r3
 80064aa:	d101      	bne.n	80064b0 <__swbuf_r+0x1c>
 80064ac:	6874      	ldr	r4, [r6, #4]
 80064ae:	e008      	b.n	80064c2 <__swbuf_r+0x2e>
 80064b0:	4b20      	ldr	r3, [pc, #128]	; (8006534 <__swbuf_r+0xa0>)
 80064b2:	429c      	cmp	r4, r3
 80064b4:	d101      	bne.n	80064ba <__swbuf_r+0x26>
 80064b6:	68b4      	ldr	r4, [r6, #8]
 80064b8:	e003      	b.n	80064c2 <__swbuf_r+0x2e>
 80064ba:	4b1f      	ldr	r3, [pc, #124]	; (8006538 <__swbuf_r+0xa4>)
 80064bc:	429c      	cmp	r4, r3
 80064be:	bf08      	it	eq
 80064c0:	68f4      	ldreq	r4, [r6, #12]
 80064c2:	69a3      	ldr	r3, [r4, #24]
 80064c4:	60a3      	str	r3, [r4, #8]
 80064c6:	89a3      	ldrh	r3, [r4, #12]
 80064c8:	071a      	lsls	r2, r3, #28
 80064ca:	d509      	bpl.n	80064e0 <__swbuf_r+0x4c>
 80064cc:	6923      	ldr	r3, [r4, #16]
 80064ce:	b13b      	cbz	r3, 80064e0 <__swbuf_r+0x4c>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	6920      	ldr	r0, [r4, #16]
 80064d4:	1a18      	subs	r0, r3, r0
 80064d6:	6963      	ldr	r3, [r4, #20]
 80064d8:	4298      	cmp	r0, r3
 80064da:	b2ed      	uxtb	r5, r5
 80064dc:	db0f      	blt.n	80064fe <__swbuf_r+0x6a>
 80064de:	e008      	b.n	80064f2 <__swbuf_r+0x5e>
 80064e0:	4630      	mov	r0, r6
 80064e2:	4621      	mov	r1, r4
 80064e4:	f000 f83c 	bl	8006560 <__swsetup_r>
 80064e8:	2800      	cmp	r0, #0
 80064ea:	d0f1      	beq.n	80064d0 <__swbuf_r+0x3c>
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	4630      	mov	r0, r6
 80064f4:	4621      	mov	r1, r4
 80064f6:	f000 f933 	bl	8006760 <_fflush_r>
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d1f6      	bne.n	80064ec <__swbuf_r+0x58>
 80064fe:	68a3      	ldr	r3, [r4, #8]
 8006500:	3b01      	subs	r3, #1
 8006502:	60a3      	str	r3, [r4, #8]
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	6022      	str	r2, [r4, #0]
 800650a:	701d      	strb	r5, [r3, #0]
 800650c:	6963      	ldr	r3, [r4, #20]
 800650e:	3001      	adds	r0, #1
 8006510:	4298      	cmp	r0, r3
 8006512:	d004      	beq.n	800651e <__swbuf_r+0x8a>
 8006514:	89a3      	ldrh	r3, [r4, #12]
 8006516:	07db      	lsls	r3, r3, #31
 8006518:	d507      	bpl.n	800652a <__swbuf_r+0x96>
 800651a:	2d0a      	cmp	r5, #10
 800651c:	d105      	bne.n	800652a <__swbuf_r+0x96>
 800651e:	4630      	mov	r0, r6
 8006520:	4621      	mov	r1, r4
 8006522:	f000 f91d 	bl	8006760 <_fflush_r>
 8006526:	2800      	cmp	r0, #0
 8006528:	d1e0      	bne.n	80064ec <__swbuf_r+0x58>
 800652a:	4628      	mov	r0, r5
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	bf00      	nop
 8006530:	08006bdc 	.word	0x08006bdc
 8006534:	08006bfc 	.word	0x08006bfc
 8006538:	08006c1c 	.word	0x08006c1c

0800653c <_write_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4c07      	ldr	r4, [pc, #28]	; (800655c <_write_r+0x20>)
 8006540:	4605      	mov	r5, r0
 8006542:	2000      	movs	r0, #0
 8006544:	6020      	str	r0, [r4, #0]
 8006546:	4608      	mov	r0, r1
 8006548:	4611      	mov	r1, r2
 800654a:	461a      	mov	r2, r3
 800654c:	f7fb fe5c 	bl	8002208 <_write>
 8006550:	1c43      	adds	r3, r0, #1
 8006552:	d102      	bne.n	800655a <_write_r+0x1e>
 8006554:	6823      	ldr	r3, [r4, #0]
 8006556:	b103      	cbz	r3, 800655a <_write_r+0x1e>
 8006558:	602b      	str	r3, [r5, #0]
 800655a:	bd38      	pop	{r3, r4, r5, pc}
 800655c:	1ffe8b8c 	.word	0x1ffe8b8c

08006560 <__swsetup_r>:
 8006560:	4b31      	ldr	r3, [pc, #196]	; (8006628 <__swsetup_r+0xc8>)
 8006562:	b570      	push	{r4, r5, r6, lr}
 8006564:	681d      	ldr	r5, [r3, #0]
 8006566:	4606      	mov	r6, r0
 8006568:	460c      	mov	r4, r1
 800656a:	b125      	cbz	r5, 8006576 <__swsetup_r+0x16>
 800656c:	69ab      	ldr	r3, [r5, #24]
 800656e:	b913      	cbnz	r3, 8006576 <__swsetup_r+0x16>
 8006570:	4628      	mov	r0, r5
 8006572:	f7ff f9e1 	bl	8005938 <__sinit>
 8006576:	4b2d      	ldr	r3, [pc, #180]	; (800662c <__swsetup_r+0xcc>)
 8006578:	429c      	cmp	r4, r3
 800657a:	d101      	bne.n	8006580 <__swsetup_r+0x20>
 800657c:	686c      	ldr	r4, [r5, #4]
 800657e:	e008      	b.n	8006592 <__swsetup_r+0x32>
 8006580:	4b2b      	ldr	r3, [pc, #172]	; (8006630 <__swsetup_r+0xd0>)
 8006582:	429c      	cmp	r4, r3
 8006584:	d101      	bne.n	800658a <__swsetup_r+0x2a>
 8006586:	68ac      	ldr	r4, [r5, #8]
 8006588:	e003      	b.n	8006592 <__swsetup_r+0x32>
 800658a:	4b2a      	ldr	r3, [pc, #168]	; (8006634 <__swsetup_r+0xd4>)
 800658c:	429c      	cmp	r4, r3
 800658e:	bf08      	it	eq
 8006590:	68ec      	ldreq	r4, [r5, #12]
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	b29a      	uxth	r2, r3
 8006596:	0711      	lsls	r1, r2, #28
 8006598:	d41d      	bmi.n	80065d6 <__swsetup_r+0x76>
 800659a:	06d5      	lsls	r5, r2, #27
 800659c:	d402      	bmi.n	80065a4 <__swsetup_r+0x44>
 800659e:	2209      	movs	r2, #9
 80065a0:	6032      	str	r2, [r6, #0]
 80065a2:	e038      	b.n	8006616 <__swsetup_r+0xb6>
 80065a4:	0750      	lsls	r0, r2, #29
 80065a6:	d512      	bpl.n	80065ce <__swsetup_r+0x6e>
 80065a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065aa:	b141      	cbz	r1, 80065be <__swsetup_r+0x5e>
 80065ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065b0:	4299      	cmp	r1, r3
 80065b2:	d002      	beq.n	80065ba <__swsetup_r+0x5a>
 80065b4:	4630      	mov	r0, r6
 80065b6:	f7ff fd4f 	bl	8006058 <_free_r>
 80065ba:	2300      	movs	r3, #0
 80065bc:	6363      	str	r3, [r4, #52]	; 0x34
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065c4:	81a3      	strh	r3, [r4, #12]
 80065c6:	2300      	movs	r3, #0
 80065c8:	6063      	str	r3, [r4, #4]
 80065ca:	6923      	ldr	r3, [r4, #16]
 80065cc:	6023      	str	r3, [r4, #0]
 80065ce:	89a3      	ldrh	r3, [r4, #12]
 80065d0:	f043 0308 	orr.w	r3, r3, #8
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	6923      	ldr	r3, [r4, #16]
 80065d8:	b94b      	cbnz	r3, 80065ee <__swsetup_r+0x8e>
 80065da:	89a3      	ldrh	r3, [r4, #12]
 80065dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e4:	d003      	beq.n	80065ee <__swsetup_r+0x8e>
 80065e6:	4630      	mov	r0, r6
 80065e8:	4621      	mov	r1, r4
 80065ea:	f000 f8f5 	bl	80067d8 <__smakebuf_r>
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	f013 0201 	ands.w	r2, r3, #1
 80065f4:	d005      	beq.n	8006602 <__swsetup_r+0xa2>
 80065f6:	2200      	movs	r2, #0
 80065f8:	60a2      	str	r2, [r4, #8]
 80065fa:	6962      	ldr	r2, [r4, #20]
 80065fc:	4252      	negs	r2, r2
 80065fe:	61a2      	str	r2, [r4, #24]
 8006600:	e003      	b.n	800660a <__swsetup_r+0xaa>
 8006602:	0799      	lsls	r1, r3, #30
 8006604:	bf58      	it	pl
 8006606:	6962      	ldrpl	r2, [r4, #20]
 8006608:	60a2      	str	r2, [r4, #8]
 800660a:	6922      	ldr	r2, [r4, #16]
 800660c:	b94a      	cbnz	r2, 8006622 <__swsetup_r+0xc2>
 800660e:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8006612:	b280      	uxth	r0, r0
 8006614:	b130      	cbz	r0, 8006624 <__swsetup_r+0xc4>
 8006616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	f04f 30ff 	mov.w	r0, #4294967295
 8006620:	bd70      	pop	{r4, r5, r6, pc}
 8006622:	2000      	movs	r0, #0
 8006624:	bd70      	pop	{r4, r5, r6, pc}
 8006626:	bf00      	nop
 8006628:	1ffe886c 	.word	0x1ffe886c
 800662c:	08006bdc 	.word	0x08006bdc
 8006630:	08006bfc 	.word	0x08006bfc
 8006634:	08006c1c 	.word	0x08006c1c

08006638 <_close_r>:
 8006638:	b538      	push	{r3, r4, r5, lr}
 800663a:	4c06      	ldr	r4, [pc, #24]	; (8006654 <_close_r+0x1c>)
 800663c:	2300      	movs	r3, #0
 800663e:	4605      	mov	r5, r0
 8006640:	4608      	mov	r0, r1
 8006642:	6023      	str	r3, [r4, #0]
 8006644:	f000 f94a 	bl	80068dc <_close>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_close_r+0x1a>
 800664c:	6823      	ldr	r3, [r4, #0]
 800664e:	b103      	cbz	r3, 8006652 <_close_r+0x1a>
 8006650:	602b      	str	r3, [r5, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	1ffe8b8c 	.word	0x1ffe8b8c

08006658 <__sflush_r>:
 8006658:	898a      	ldrh	r2, [r1, #12]
 800665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800665e:	4605      	mov	r5, r0
 8006660:	0710      	lsls	r0, r2, #28
 8006662:	460c      	mov	r4, r1
 8006664:	d457      	bmi.n	8006716 <__sflush_r+0xbe>
 8006666:	684b      	ldr	r3, [r1, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	dc02      	bgt.n	8006672 <__sflush_r+0x1a>
 800666c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	dd18      	ble.n	80066a4 <__sflush_r+0x4c>
 8006672:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006674:	b1b6      	cbz	r6, 80066a4 <__sflush_r+0x4c>
 8006676:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800667a:	2300      	movs	r3, #0
 800667c:	b292      	uxth	r2, r2
 800667e:	682f      	ldr	r7, [r5, #0]
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	b10a      	cbz	r2, 8006688 <__sflush_r+0x30>
 8006684:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006686:	e010      	b.n	80066aa <__sflush_r+0x52>
 8006688:	6a21      	ldr	r1, [r4, #32]
 800668a:	4628      	mov	r0, r5
 800668c:	2301      	movs	r3, #1
 800668e:	47b0      	blx	r6
 8006690:	1c41      	adds	r1, r0, #1
 8006692:	4602      	mov	r2, r0
 8006694:	d109      	bne.n	80066aa <__sflush_r+0x52>
 8006696:	682b      	ldr	r3, [r5, #0]
 8006698:	b13b      	cbz	r3, 80066aa <__sflush_r+0x52>
 800669a:	2b1d      	cmp	r3, #29
 800669c:	d001      	beq.n	80066a2 <__sflush_r+0x4a>
 800669e:	2b16      	cmp	r3, #22
 80066a0:	d147      	bne.n	8006732 <__sflush_r+0xda>
 80066a2:	602f      	str	r7, [r5, #0]
 80066a4:	2000      	movs	r0, #0
 80066a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	075b      	lsls	r3, r3, #29
 80066ae:	d505      	bpl.n	80066bc <__sflush_r+0x64>
 80066b0:	6863      	ldr	r3, [r4, #4]
 80066b2:	1ad2      	subs	r2, r2, r3
 80066b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066b6:	b10b      	cbz	r3, 80066bc <__sflush_r+0x64>
 80066b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066ba:	1ad2      	subs	r2, r2, r3
 80066bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066be:	6a21      	ldr	r1, [r4, #32]
 80066c0:	2300      	movs	r3, #0
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b0      	blx	r6
 80066c6:	1c46      	adds	r6, r0, #1
 80066c8:	89a3      	ldrh	r3, [r4, #12]
 80066ca:	d105      	bne.n	80066d8 <__sflush_r+0x80>
 80066cc:	682a      	ldr	r2, [r5, #0]
 80066ce:	b11a      	cbz	r2, 80066d8 <__sflush_r+0x80>
 80066d0:	2a1d      	cmp	r2, #29
 80066d2:	d001      	beq.n	80066d8 <__sflush_r+0x80>
 80066d4:	2a16      	cmp	r2, #22
 80066d6:	d119      	bne.n	800670c <__sflush_r+0xb4>
 80066d8:	2200      	movs	r2, #0
 80066da:	6062      	str	r2, [r4, #4]
 80066dc:	04d9      	lsls	r1, r3, #19
 80066de:	6922      	ldr	r2, [r4, #16]
 80066e0:	6022      	str	r2, [r4, #0]
 80066e2:	d504      	bpl.n	80066ee <__sflush_r+0x96>
 80066e4:	1c42      	adds	r2, r0, #1
 80066e6:	d101      	bne.n	80066ec <__sflush_r+0x94>
 80066e8:	682b      	ldr	r3, [r5, #0]
 80066ea:	b903      	cbnz	r3, 80066ee <__sflush_r+0x96>
 80066ec:	6560      	str	r0, [r4, #84]	; 0x54
 80066ee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066f0:	602f      	str	r7, [r5, #0]
 80066f2:	2900      	cmp	r1, #0
 80066f4:	d0d6      	beq.n	80066a4 <__sflush_r+0x4c>
 80066f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066fa:	4299      	cmp	r1, r3
 80066fc:	d002      	beq.n	8006704 <__sflush_r+0xac>
 80066fe:	4628      	mov	r0, r5
 8006700:	f7ff fcaa 	bl	8006058 <_free_r>
 8006704:	2000      	movs	r0, #0
 8006706:	6360      	str	r0, [r4, #52]	; 0x34
 8006708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800670c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006710:	81a3      	strh	r3, [r4, #12]
 8006712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006716:	690f      	ldr	r7, [r1, #16]
 8006718:	2f00      	cmp	r7, #0
 800671a:	d0c3      	beq.n	80066a4 <__sflush_r+0x4c>
 800671c:	0793      	lsls	r3, r2, #30
 800671e:	680e      	ldr	r6, [r1, #0]
 8006720:	bf08      	it	eq
 8006722:	694b      	ldreq	r3, [r1, #20]
 8006724:	600f      	str	r7, [r1, #0]
 8006726:	bf18      	it	ne
 8006728:	2300      	movne	r3, #0
 800672a:	ebc7 0806 	rsb	r8, r7, r6
 800672e:	608b      	str	r3, [r1, #8]
 8006730:	e012      	b.n	8006758 <__sflush_r+0x100>
 8006732:	89a3      	ldrh	r3, [r4, #12]
 8006734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006738:	81a3      	strh	r3, [r4, #12]
 800673a:	f04f 30ff 	mov.w	r0, #4294967295
 800673e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006742:	4628      	mov	r0, r5
 8006744:	6a21      	ldr	r1, [r4, #32]
 8006746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006748:	463a      	mov	r2, r7
 800674a:	4643      	mov	r3, r8
 800674c:	47b0      	blx	r6
 800674e:	2800      	cmp	r0, #0
 8006750:	ddef      	ble.n	8006732 <__sflush_r+0xda>
 8006752:	4407      	add	r7, r0
 8006754:	ebc0 0808 	rsb	r8, r0, r8
 8006758:	f1b8 0f00 	cmp.w	r8, #0
 800675c:	dcf1      	bgt.n	8006742 <__sflush_r+0xea>
 800675e:	e7a1      	b.n	80066a4 <__sflush_r+0x4c>

08006760 <_fflush_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	690b      	ldr	r3, [r1, #16]
 8006764:	4605      	mov	r5, r0
 8006766:	460c      	mov	r4, r1
 8006768:	b1db      	cbz	r3, 80067a2 <_fflush_r+0x42>
 800676a:	b118      	cbz	r0, 8006774 <_fflush_r+0x14>
 800676c:	6983      	ldr	r3, [r0, #24]
 800676e:	b90b      	cbnz	r3, 8006774 <_fflush_r+0x14>
 8006770:	f7ff f8e2 	bl	8005938 <__sinit>
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <_fflush_r+0x48>)
 8006776:	429c      	cmp	r4, r3
 8006778:	d101      	bne.n	800677e <_fflush_r+0x1e>
 800677a:	686c      	ldr	r4, [r5, #4]
 800677c:	e008      	b.n	8006790 <_fflush_r+0x30>
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <_fflush_r+0x4c>)
 8006780:	429c      	cmp	r4, r3
 8006782:	d101      	bne.n	8006788 <_fflush_r+0x28>
 8006784:	68ac      	ldr	r4, [r5, #8]
 8006786:	e003      	b.n	8006790 <_fflush_r+0x30>
 8006788:	4b09      	ldr	r3, [pc, #36]	; (80067b0 <_fflush_r+0x50>)
 800678a:	429c      	cmp	r4, r3
 800678c:	bf08      	it	eq
 800678e:	68ec      	ldreq	r4, [r5, #12]
 8006790:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006794:	b12b      	cbz	r3, 80067a2 <_fflush_r+0x42>
 8006796:	4628      	mov	r0, r5
 8006798:	4621      	mov	r1, r4
 800679a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800679e:	f7ff bf5b 	b.w	8006658 <__sflush_r>
 80067a2:	2000      	movs	r0, #0
 80067a4:	bd38      	pop	{r3, r4, r5, pc}
 80067a6:	bf00      	nop
 80067a8:	08006bdc 	.word	0x08006bdc
 80067ac:	08006bfc 	.word	0x08006bfc
 80067b0:	08006c1c 	.word	0x08006c1c

080067b4 <_lseek_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4c07      	ldr	r4, [pc, #28]	; (80067d4 <_lseek_r+0x20>)
 80067b8:	4605      	mov	r5, r0
 80067ba:	2000      	movs	r0, #0
 80067bc:	6020      	str	r0, [r4, #0]
 80067be:	4608      	mov	r0, r1
 80067c0:	4611      	mov	r1, r2
 80067c2:	461a      	mov	r2, r3
 80067c4:	f000 f8a2 	bl	800690c <_lseek>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_lseek_r+0x1e>
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_lseek_r+0x1e>
 80067d0:	602b      	str	r3, [r5, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	1ffe8b8c 	.word	0x1ffe8b8c

080067d8 <__smakebuf_r>:
 80067d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067da:	898b      	ldrh	r3, [r1, #12]
 80067dc:	079d      	lsls	r5, r3, #30
 80067de:	b091      	sub	sp, #68	; 0x44
 80067e0:	4606      	mov	r6, r0
 80067e2:	460c      	mov	r4, r1
 80067e4:	d426      	bmi.n	8006834 <__smakebuf_r+0x5c>
 80067e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ea:	2900      	cmp	r1, #0
 80067ec:	da09      	bge.n	8006802 <__smakebuf_r+0x2a>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80067f4:	f04f 0500 	mov.w	r5, #0
 80067f8:	bf14      	ite	ne
 80067fa:	2740      	movne	r7, #64	; 0x40
 80067fc:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8006800:	e00d      	b.n	800681e <__smakebuf_r+0x46>
 8006802:	aa01      	add	r2, sp, #4
 8006804:	f000 f848 	bl	8006898 <_fstat_r>
 8006808:	2800      	cmp	r0, #0
 800680a:	dbf0      	blt.n	80067ee <__smakebuf_r+0x16>
 800680c:	9d02      	ldr	r5, [sp, #8]
 800680e:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8006812:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8006816:	424d      	negs	r5, r1
 8006818:	414d      	adcs	r5, r1
 800681a:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800681e:	4630      	mov	r0, r6
 8006820:	4639      	mov	r1, r7
 8006822:	f7ff fc5d 	bl	80060e0 <_malloc_r>
 8006826:	b960      	cbnz	r0, 8006842 <__smakebuf_r+0x6a>
 8006828:	89a3      	ldrh	r3, [r4, #12]
 800682a:	059a      	lsls	r2, r3, #22
 800682c:	d41d      	bmi.n	800686a <__smakebuf_r+0x92>
 800682e:	f043 0302 	orr.w	r3, r3, #2
 8006832:	81a3      	strh	r3, [r4, #12]
 8006834:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	6123      	str	r3, [r4, #16]
 800683c:	2301      	movs	r3, #1
 800683e:	6163      	str	r3, [r4, #20]
 8006840:	e013      	b.n	800686a <__smakebuf_r+0x92>
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <__smakebuf_r+0x98>)
 8006844:	62b3      	str	r3, [r6, #40]	; 0x28
 8006846:	89a3      	ldrh	r3, [r4, #12]
 8006848:	6020      	str	r0, [r4, #0]
 800684a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800684e:	81a3      	strh	r3, [r4, #12]
 8006850:	6120      	str	r0, [r4, #16]
 8006852:	6167      	str	r7, [r4, #20]
 8006854:	b14d      	cbz	r5, 800686a <__smakebuf_r+0x92>
 8006856:	4630      	mov	r0, r6
 8006858:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800685c:	f000 f82e 	bl	80068bc <_isatty_r>
 8006860:	b118      	cbz	r0, 800686a <__smakebuf_r+0x92>
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f043 0301 	orr.w	r3, r3, #1
 8006868:	81a3      	strh	r3, [r4, #12]
 800686a:	b011      	add	sp, #68	; 0x44
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800686e:	bf00      	nop
 8006870:	080058b9 	.word	0x080058b9

08006874 <_read_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4c07      	ldr	r4, [pc, #28]	; (8006894 <_read_r+0x20>)
 8006878:	4605      	mov	r5, r0
 800687a:	2000      	movs	r0, #0
 800687c:	6020      	str	r0, [r4, #0]
 800687e:	4608      	mov	r0, r1
 8006880:	4611      	mov	r1, r2
 8006882:	461a      	mov	r2, r3
 8006884:	f000 f84a 	bl	800691c <_read>
 8006888:	1c43      	adds	r3, r0, #1
 800688a:	d102      	bne.n	8006892 <_read_r+0x1e>
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	b103      	cbz	r3, 8006892 <_read_r+0x1e>
 8006890:	602b      	str	r3, [r5, #0]
 8006892:	bd38      	pop	{r3, r4, r5, pc}
 8006894:	1ffe8b8c 	.word	0x1ffe8b8c

08006898 <_fstat_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	4c07      	ldr	r4, [pc, #28]	; (80068b8 <_fstat_r+0x20>)
 800689c:	2300      	movs	r3, #0
 800689e:	4605      	mov	r5, r0
 80068a0:	4608      	mov	r0, r1
 80068a2:	4611      	mov	r1, r2
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	f000 f821 	bl	80068ec <_fstat>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d102      	bne.n	80068b4 <_fstat_r+0x1c>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	b103      	cbz	r3, 80068b4 <_fstat_r+0x1c>
 80068b2:	602b      	str	r3, [r5, #0]
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
 80068b6:	bf00      	nop
 80068b8:	1ffe8b8c 	.word	0x1ffe8b8c

080068bc <_isatty_r>:
 80068bc:	b538      	push	{r3, r4, r5, lr}
 80068be:	4c06      	ldr	r4, [pc, #24]	; (80068d8 <_isatty_r+0x1c>)
 80068c0:	2300      	movs	r3, #0
 80068c2:	4605      	mov	r5, r0
 80068c4:	4608      	mov	r0, r1
 80068c6:	6023      	str	r3, [r4, #0]
 80068c8:	f000 f818 	bl	80068fc <_isatty>
 80068cc:	1c43      	adds	r3, r0, #1
 80068ce:	d102      	bne.n	80068d6 <_isatty_r+0x1a>
 80068d0:	6823      	ldr	r3, [r4, #0]
 80068d2:	b103      	cbz	r3, 80068d6 <_isatty_r+0x1a>
 80068d4:	602b      	str	r3, [r5, #0]
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	1ffe8b8c 	.word	0x1ffe8b8c

080068dc <_close>:
 80068dc:	4b02      	ldr	r3, [pc, #8]	; (80068e8 <_close+0xc>)
 80068de:	2258      	movs	r2, #88	; 0x58
 80068e0:	601a      	str	r2, [r3, #0]
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	4770      	bx	lr
 80068e8:	1ffe8b8c 	.word	0x1ffe8b8c

080068ec <_fstat>:
 80068ec:	4b02      	ldr	r3, [pc, #8]	; (80068f8 <_fstat+0xc>)
 80068ee:	2258      	movs	r2, #88	; 0x58
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	f04f 30ff 	mov.w	r0, #4294967295
 80068f6:	4770      	bx	lr
 80068f8:	1ffe8b8c 	.word	0x1ffe8b8c

080068fc <_isatty>:
 80068fc:	4b02      	ldr	r3, [pc, #8]	; (8006908 <_isatty+0xc>)
 80068fe:	2258      	movs	r2, #88	; 0x58
 8006900:	601a      	str	r2, [r3, #0]
 8006902:	2000      	movs	r0, #0
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	1ffe8b8c 	.word	0x1ffe8b8c

0800690c <_lseek>:
 800690c:	4b02      	ldr	r3, [pc, #8]	; (8006918 <_lseek+0xc>)
 800690e:	2258      	movs	r2, #88	; 0x58
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	f04f 30ff 	mov.w	r0, #4294967295
 8006916:	4770      	bx	lr
 8006918:	1ffe8b8c 	.word	0x1ffe8b8c

0800691c <_read>:
 800691c:	4b02      	ldr	r3, [pc, #8]	; (8006928 <_read+0xc>)
 800691e:	2258      	movs	r2, #88	; 0x58
 8006920:	601a      	str	r2, [r3, #0]
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	4770      	bx	lr
 8006928:	1ffe8b8c 	.word	0x1ffe8b8c

0800692c <UART_0_channel_config>:
 800692c:	0001c200 01080800 00000010              ............

08006938 <UART_0_tx_pin_config>:
 8006938:	00000090 00000001 00000002              ............

08006944 <UART_0_tx_pin>:
 8006944:	48028100 00000005 08006938              ...H....8i..

08006950 <UART_0_config>:
 8006950:	0800692c 080016e1 00000000 00000000     ,i..............
	...
 800696c:	08006944 04020200 00000000              Di..........

08006978 <UART_0_rx_pin_config>:
 8006978:	00000000 00000001 00000002              ............

08006984 <intUartReceive>:
 8006984:	01003f57                                W?..

08006988 <intUartTransmit>:
 8006988:	01003f59 01010230 00010000 00000000     Y?..0...........
 8006998:	00010000 01010102 202c6625 000a6625     ........%f, %f..
 80069a8:	52415453 00000054 504f5453 00000000     START...STOP....

080069b8 <npio2_hw>:
 80069b8:	3ff921fb 400921fb 4012d97c 401921fb     .!.?.!.@|..@.!.@
 80069c8:	401f6a7a 4022d97c 4025fdbb 402921fb     zj.@|."@..%@.!)@
 80069d8:	402c463a 402f6a7a 4031475c 4032d97c     :F,@zj/@\G1@|.2@
 80069e8:	40346b9c 4035fdbb 40378fdb 403921fb     .k4@..5@..7@.!9@
 80069f8:	403ab41b 403c463a 403dd85a 403f6a7a     ..:@:F<@Z.=@zj?@
 8006a08:	40407e4c 4041475c 4042106c 4042d97c     L~@@\GA@l.B@|.B@
 8006a18:	4043a28c 40446b9c 404534ac 4045fdbb     ..C@.kD@.4E@..E@
 8006a28:	4046c6cb 40478fdb 404858eb 404921fb     ..F@..G@.XH@.!I@

08006a38 <two_over_pi>:
 8006a38:	00a2f983 006e4e44 001529fc 002757d1     ....DNn..)...W'.
 8006a48:	00f534dd 00c0db62 0095993c 00439041     .4..b...<...A.C.
 8006a58:	00fe5163 00abdebb 00c561b7 00246e3a     cQ.......a..:n$.
 8006a68:	00424dd2 00e00649 002eea09 00d1921c     .MB.I...........
 8006a78:	00fe1deb 001cb129 00a73ee8 008235f5     ....)....>...5..
 8006a88:	002ebb44 0084e99c 007026b4 005f7e41     D........&p.A~_.
 8006a98:	003991d6 00398353 0039f49c 00845f8b     ..9.S.9...9.._..
 8006aa8:	00bdf928 003b1ff8 0097ffde 0005980f     (.....;.........
 8006ab8:	00ef2f11 008b5a0a 006d1f6d 00367ecf     ./...Z..m.m..~6.
 8006ac8:	0027cb09 00b74f46 003f669e 005fea2d     ..'.FO...f?.-._.
 8006ad8:	007527ba 00c7ebe5 00f17b3d 000739f7     .'u.....={...9..
 8006ae8:	008a5292 00ea6bfb 005fb11f 008d5d08     .R...k...._..]..
 8006af8:	00560330 0046fc7b 006babf0 00cfbc20     0.V.{.F...k. ...
 8006b08:	009af436 001da9e3 0091615e 00e61b08     6.......^a......
 8006b18:	00659985 005f14a0 0068408d 00ffd880     ..e..._..@h.....
 8006b28:	004d7327 00310606 001556ca 0073a8c9     'sM...1..V....s.
 8006b38:	0060e27b 00c08c6b                       {.`.k...

08006b40 <init_jk>:
 8006b40:	00000002 00000003 00000004 00000006     ................

08006b50 <PIo2>:
 8006b50:	40000000 3ff921fb 00000000 3e74442d     ...@.!.?....-Dt>
 8006b60:	80000000 3cf84698 60000000 3b78cc51     .....F.<...`Q.x;
 8006b70:	80000000 39f01b83 40000000 387a2520     .......9...@ %z8
 8006b80:	80000000 36e38222 00000000 3569f31d     ...."..6......i5
 8006b90:	00000043                                C...

08006b94 <_global_impure_ptr>:
 8006b94:	1ffe880c 00464e49 00666e69 004e414e     ....INF.inf.NAN.
 8006ba4:	006e616e 31300030 35343332 39383736     nan.0.0123456789
 8006bb4:	44434241 30004645 34333231 38373635     ABCDEF.012345678
 8006bc4:	63626139 00666564 69666e49 7974696e     9abcdef.Infinity
 8006bd4:	4e614e00 00000000                       .NaN....

08006bdc <__sf_fake_stdin>:
	...

08006bfc <__sf_fake_stdout>:
	...

08006c1c <__sf_fake_stderr>:
	...
 8006c3c:	49534f50 002e0058 00000000              POSIX.......

08006c48 <__mprec_tens>:
 8006c48:	00000000 3ff00000 00000000 40240000     .......?......$@
 8006c58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
 8006c68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
 8006c78:	00000000 412e8480 00000000 416312d0     .......A......cA
 8006c88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
 8006c98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
 8006ca8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
 8006cb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
 8006cc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
 8006cd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
 8006ce8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
 8006cf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
 8006d08:	79d99db4 44ea7843                       ...yCx.D

08006d10 <__mprec_bigtens>:
 8006d10:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
 8006d20:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
 8006d30:	7f73bf3c 75154fdd                       <.s..O.u

08006d38 <p05.5277>:
 8006d38:	00000005 00000019 0000007d 2b302d23     ........}...#-0+
 8006d48:	6c680020 6665004c 47464567 00000000      .hlL.efgEFG....
